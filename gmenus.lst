##############################################################################
#                                                                            #
# IAR H8 C-Compiler V1.53F/WIN                                               #
#                                                                            #
#       Compile time  =  19/Jun/2003  11:41:52                               #
#       Target option =  H8S/2300                                            #
#       Memory model  =  large                                               #
#       Source file   =  h:\jobs\eumedic3\gmenus.c                           #
#       List file     =  h:\jobs\eumedic3\debug\list\gmenus.lst              #
#       Object file   =  h:\jobs\eumedic3\debug\obj\gmenus.r37               #
#       Command line  =  -v3 -ml -OH:\Jobs\Eumedic3\Debug\Obj\ -RCODE -s9    #
#                        -um0I0 -e -K -g -LH:\Jobs\Eumedic3\Debug\List\ -q   #
#                        -t8 -IC:\IAR\EW23\h8\inc\                           #
#                        H:\Jobs\Eumedic3\GMenus.c                           #
#                                                                            #
#                           Copyright 2002 IAR Systems. All rights reserved. #
##############################################################################

   \                     	NAME	gmenus(17)
   \                     	RSEG	CODE(1)
   \                     	RSEG	CSTR(1)
   \                     	RSEG	UDATA2(1)
   \                     	RSEG	IDATA2(1)
   \                     	RSEG	CDATA2(1)
   \                     	PUBLIC	auto_repeating
   \                     	EXTERN	bar_graph
   \                     	EXTERN	beep_for
   \                     	PUBLIC	button_auto_wait
   \                     	PUBLIC	calc_checksum
   \                     	EXTERN	changed_lines
   \                     	EXTERN	clear_screen
   \                     	EXTERN	delta_width
   \                     	PUBLIC	disp_modulation
   \                     	EXTERN	display_timer
   \                     	EXTERN	dose
   \                     	EXTERN	end_beep
   \                     	EXTERN	freeze_display
   \                     	EXTERN	freq_cycling_off
   \                     	EXTERN	frequency
   \                     	PUBLIC	g_str
   \                     	PUBLIC	get_credit
   \                     	EXTERN	glcd_print_string
   \                     	EXTERN	initial_width
   \                     	EXTERN	intensity_off
   \                     	EXTERN	key_func
   \                     	PUBLIC	last_menu
   \                     	PUBLIC	main_menu
   \                     	PUBLIC	main_screen
   \                     	PUBLIC	menu
   \                     	PUBLIC	menu_contrast
   \                     	PUBLIC	menu_filter
   \                     	PUBLIC	menu_freq
   \                     	PUBLIC	menu_freq_cycle
   \                     	PUBLIC	menu_hours
   \                     	PUBLIC	menu_icons
   \                     	PUBLIC	menu_intensity
   \                     	PUBLIC	menu_interpulse
   \                     	PUBLIC	menu_map
   \                     	PUBLIC	menu_modulation
   \                     	PUBLIC	menu_power_off
   \                     	PUBLIC	menu_sprite_col
   \                     	PUBLIC	menu_timeout
   \                     	EXTERN	menu_timer
   \                     	PUBLIC	menu_tree
   \                     	EXTERN	modulate
   \                     	EXTERN	modulated_amp
   \                     	EXTERN	modulation_off
   \                     	EXTERN	n_rings
   \                     	EXTERN	no_reading_count
   \                     	PUBLIC	options_menu
   \                     	EXTERN	param
   \                     	PUBLIC	parameters_valid
   \                     	EXTERN	pip_n_times
   \                     	EXTERN	plot_big_char
   \                     	PUBLIC	plot_seq_chars_at
   \                     	EXTERN	plot_sprite
   \                     	PUBLIC	power_down
   \                     	EXTERN	power_off_timer
   \                     	PUBLIC	print_battery_state_at_col
   \                     	PUBLIC	print_big_value
   \                     	PUBLIC	print_params
   \                     	EXTERN	print_temp
   \                     	PUBLIC	range
   \                     	EXTERN	read_battery
   \                     	EXTERN	read_block_from_eeprom
   \                     	PUBLIC	read_button
   \                     	PUBLIC	read_keypad_action
   \                     	PUBLIC	read_parameters
   \                     	PUBLIC	realise_parameters
   \                     	EXTERN	reset_modulation
   \                     	EXTERN	response
   \                     	PUBLIC	save_parameters
   \                     	EXTERN	seconds
   \                     	EXTERN	serial_put_string
   \                     	EXTERN	set_contrast
   \                     	PUBLIC	set_default_params
   \                     	PUBLIC	set_menu_state
   \                     	EXTERN	set_pulse_period
   \                     	EXTERN	set_pulse_width
   \                     	EXTERN	set_viewpoint
   \                     	PUBLIC	settings_icons
   \                     	EXTERN	setup_dtc
   \                     	EXTERN	setup_threshold
   \                     	EXTERN	setup_tpu
   \                     	EXTERN	skin_display
   \                     	PUBLIC	skin_screen
   \                     	EXTERN	sprintf
   \                     	PUBLIC	start_screen
   \                     	PUBLIC	text_lh
   \                     	EXTERN	therapy_control
   \                     	PUBLIC	therapy_credit
   \                     	EXTERN	this_width
   \                     	EXTERN	timer_done
   \                     	EXTERN	timer_go
   \                     	EXTERN	update_display
   \                     	EXTERN	upside_down
   \                     	EXTERN	wait
   \                     	EXTERN	wait_for_eeprom_to_finish
   \                     	EXTERN	warble
   \                     	EXTERN	write_block_to_eeprom
   \                     	EXTERN	?UL_DIV_L03
   \                     	EXTERN	?SL_DIV_L03
   \                     	EXTERN	?UL_MOD_L03
   \                     	EXTERN	?SL_MOD_L03
   \                     	EXTERN	?F_MUL_L04
   \                     	EXTERN	?F_ADD_L04
   \                     	EXTERN	?F_TO_L_L04
   \                     	EXTERN	?CLH8SL_1_42_L00
   \                     	RSEG	CODE
      1          
      2          /*
      3          
      4          
      5          Copyright 2001 Eumedic Ltd.
      6          
      7          */
      8          
      9          #pragma language=extended       /* Enable use of extended keywords */
     10          
     11          
     12          #include <stdio.h>
     13          #include <inh8.h>               /* Intrinsic Funcs */
     14          #include <string.h>
     15          
     16          #include "hardware.h"   
     17          #include "serial.h"     
     18          #include "time.h"               
     19          #include "sysinit.h"
     20          #include "graphic.h"
     21          #include "pulse.h"
     22          #include "iic.h"
     23          #include "access.h"
     24          #include "general.h"
     25          #include "debug.h"
     26          
     27          
     28          char parameters_valid = FALSE; /* TRUE if parameters have been set up - So it's OK to save the to EEPROM at power down. */
     29          
     30          
     31          /* This enum controls the way menus are navigated. */
     32          
     33          typedef enum 
     34          {
     35                  MENU_MAIN,
     36          
     37                  MENU_GAP1,                      /* A break in the sequence of menus. */
     38          
     39                  MENU_FREQ_CYCLE,
     40                  MENU_FREQUENCY,
     41                  MENU_MODULATION,
     42                  MENU_FILTER,
     43                  MENU_INTENSITY,
     44                  MENU_INTERPULSE,
     45                  MENU_OPTIONS,
     46          
     47                  MENU_GAP2,                      /* A break in the sequence of menus. */
     48          
     49                  MENU_CONTRAST,
     50                  MENU_HOURS,
     51          
     52                  MENU_GAP3,                      /* A break in the sequence of menus. */
     53          
     54                  MENU_POWER_OFF          
     55          } menu_label;
     56          
     57          /* These initial values set up the initial menus. */
     58          #define MENU_FIRST_IN_LIST (MENU_GAP1 + 1)
     59          #define MENU_LAST_IN_LIST (MENU_GAP2 - 1)
     60          
     61          menu_label menu = MENU_MAIN;
     62          menu_label last_menu = MENU_FIRST_IN_LIST;
     63          
     64          
     65          
     66           
     67          /******************** PARAMETER STORAGE CODE *******************/
     68          
     69          
     70          /******************************************************************
     71          NAME            : 
     72          PURPOSE         : 
     73          PARAMETERS      : NONE
     74          RETURNS         : NONE
     75          SIDE-EFFECTS: NONE
     76          CALLED FROM : 
     77          *********************************************************************/
     78          
     79          
     80          
     81          /* Find the checksum of a block of data. */
     82          char calc_checksum(char * data, size_t size)
     83          {
   \                     calc_checksum:
   \   00000000   6DF0               PUSH.W  R0
     84                  char sum = 'K'; /* Sum initialiser. */
   \   00000002   F84B               MOV.B   #75,R0L
   \                     ?0011:
     85                  for (; size; size--)
   \   00000004   0D55               MOV.W   R5,R5
   \   00000006   4708               BEQ     ?0010
     86                  {
     87                          sum += *data++;
   \   00000008   6C60               MOV.B   @ER6+,R0H
   \   0000000A   0808               ADD.B   R0H,R0L
   \   0000000C   1B55               DEC.W   #1,R5
   \   0000000E   40F4               BRA     ?0011
   \                     ?0010:
     88                  }
     89                  return sum;
   \   00000010   0C8E               MOV.B   R0L,R6L
     90          }       
   \   00000012   6D70               POP.W   R0
   \   00000014   5470               RTS     
     91          
     92          void print_params()
     93          {
   \                     print_params:
     94                  PRINT "Ps:C:%i S:%i F:%i I:%i z:%i m:%i f:%i Fc:%i T:%li x:%i\r\n",
     95                          /* not in order of storage... */
     96                          param.contrast,                         
     97                          param.strength,                         
     98                          param.base_freq,                        
     99                          param.pulse_out_number, 
    100                          param.z_value,                  
    101                          param.modulation,               
    102                          param.filter,                   
    103                          param.freq_cycling,             
    104                          param.acc_ther_time,            
    105                          param.checksum                  
    106                   PREND
   \   00000016   6A0E....           MOV.B   @param+19:16,R6L
   \   0000001A   1756               EXTU.W  R6
   \   0000001C   6DF6               PUSH.W  R6
   \   0000001E   01006B06           MOV.L   @param:16,ER6
   \            ....    
   \   00000024   01006DF6           PUSH.L  ER6
   \   00000028   6A0E....           MOV.B   @param+16:16,R6L
   \   0000002C   1756               EXTU.W  R6
   \   0000002E   6DF6               PUSH.W  R6
   \   00000030   6A0E....           MOV.B   @param+15:16,R6L
   \   00000034   1756               EXTU.W  R6
   \   00000036   6DF6               PUSH.W  R6
   \   00000038   6A0E....           MOV.B   @param+14:16,R6L
   \   0000003C   1756               EXTU.W  R6
   \   0000003E   6DF6               PUSH.W  R6
   \   00000040   6A0E....           MOV.B   @param+13:16,R6L
   \   00000044   1756               EXTU.W  R6
   \   00000046   6DF6               PUSH.W  R6
   \   00000048   6A0E....           MOV.B   @param+12:16,R6L
   \   0000004C   1756               EXTU.W  R6
   \   0000004E   6DF6               PUSH.W  R6
   \   00000050   6B06....           MOV.W   @param+10:16,R6
   \   00000054   6DF6               PUSH.W  R6
   \   00000056   6B06....           MOV.W   @param+8:16,R6
   \   0000005A   6DF6               PUSH.W  R6
   \   0000005C   6A0E....           MOV.B   @param+17:16,R6L
   \   00000060   1756               EXTU.W  R6
   \   00000062   6DF6               PUSH.W  R6
   \   00000064   7A06....           MOV.L   #?0014,ER6
   \            ....    
   \   0000006A   01006DF6           PUSH.L  ER6
   \   0000006E   7A06....           MOV.L   #print_temp,ER6
   \            ....    
   \   00000074   5E......           JSR     @sprintf:24
   \   00000078   7917001A           ADD.W   #26,R7
   \   0000007C   7A06....           MOV.L   #print_temp,ER6
   \            ....    
   \   00000082   5E......           JSR     @serial_put_string:24
    107          }       
   \   00000086   5470               RTS     
    108                  
    109          
    110          /* Save the instrument parameters in the EEPROM. */
    111          void save_parameters()
    112          {
   \                     save_parameters:
    113                  //STR("saving params...\r\n");
    114                  param.checksum = calc_checksum( (char *) &param , sizeof(param) - 1);
   \   00000088   79050013           MOV.W   #19,R5
   \   0000008C   7906....           MOV.W   #param,R6
   \   00000090   17F6               EXTS.L  ER6
   \   00000092   5C00FF6A           BSR     calc_checksum
   \   00000096   6A8E....           MOV.B   R6L,@param+19:16
    115                  write_block_to_eeprom(0 , sizeof(param) , (char *) &param);
   \   0000009A   7906....           MOV.W   #param,R6
   \   0000009E   17F6               EXTS.L  ER6
   \   000000A0   01006DF6           PUSH.L  ER6
   \   000000A4   FD14               MOV.B   #20,R5L
   \   000000A6   18EE               SUB.B   R6L,R6L
   \   000000A8   5E......           JSR     @write_block_to_eeprom:24
   \   000000AC   0B97               ADDS.L  #4,ER7
    116          }       
   \   000000AE   5470               RTS     
    117          
    118          /* This doesn't reset the hours log, cutoff time, credit seq no. */
    119          void set_default_params()
    120          {
   \                     set_default_params:
    121                  param.strength                   = STRENGTH_MIN;  
   \   000000B0   7906000A           MOV.W   #10,R6
   \   000000B4   6B86....           MOV.W   R6,@param+8:16
    122                  param.base_freq                  = FREQ_DEF;       
   \   000000B8   7906003C           MOV.W   #60,R6
   \   000000BC   6B86....           MOV.W   R6,@param+10:16
    123                  param.pulse_out_number   = INTENSITY_MIN; 
   \   000000C0   FE01               MOV.B   #1,R6L
   \   000000C2   6A8E....           MOV.B   R6L,@param+12:16
    124                  param.z_value                    = Z_DEF;                  
   \   000000C6   FE14               MOV.B   #20,R6L
   \   000000C8   6A8E....           MOV.B   R6L,@param+13:16
    125                  param.modulation                 = MODULATION_MIN;
   \   000000CC   18EE               SUB.B   R6L,R6L
   \   000000CE   6A8E....           MOV.B   R6L,@param+14:16
    126                  param.filter                     = 0;                      
   \   000000D2   6A8E....           MOV.B   R6L,@param+15:16
    127                  param.freq_cycling               = 0;                      
   \   000000D6   6A8E....           MOV.B   R6L,@param+16:16
    128                  param.contrast                   = 9;                      
   \   000000DA   FE09               MOV.B   #9,R6L
   \   000000DC   6A8E....           MOV.B   R6L,@param+17:16
    129          
    130                  /* We should now have some valid parameters, if we need to save any. */
    131                  parameters_valid = TRUE;
   \   000000E0   FE01               MOV.B   #1,R6L
   \   000000E2   6AAE....           MOV.B   R6L,@parameters_valid:32
   \            ....    
    132          
    133          }       
   \   000000E8   5470               RTS     
    134          
    135          /* return true if out of range. */
    136          char range(short value, short lower, short upper)
    137          {
   \                     range:
    138                  if (value < lower)      
   \   000000EA   1D56               CMP.W   R5,R6
   \   000000EC   4C04               BGE     ?0016
    139                          return TRUE;
   \   000000EE   FE01               MOV.B   #1,R6L
   \   000000F0   5470               RTS     
   \                     ?0016:
    140                  else if (value > upper)
   \   000000F2   6F750004           MOV.W   @(4,SP),R5
   \   000000F6   1D56               CMP.W   R5,R6
   \   000000F8   4F04               BLE     ?0018
    141                          return TRUE;
   \   000000FA   FE01               MOV.B   #1,R6L
   \   000000FC   5470               RTS     
   \                     ?0018:
    142                          
    143                  return FALSE;
   \   000000FE   18EE               SUB.B   R6L,R6L
    144          }
   \   00000100   5470               RTS     
    145          
    146          /* Read the parameters from the EEPROM, return TRUE if the defaults needed setting. */
    147          char read_parameters()
    148          {
   \                     read_parameters:
   \   00000102   6DF0               PUSH.W  R0
    149                  char err = FALSE;
    150                  char bad_params = FALSE;
    151          
    152                  read_block_from_eeprom(0 , sizeof(param) , (char *) &param);
   \   00000104   7906....           MOV.W   #param,R6
   \   00000108   17F6               EXTS.L  ER6
   \   0000010A   01006DF6           PUSH.L  ER6
   \   0000010E   FD14               MOV.B   #20,R5L
   \   00000110   18EE               SUB.B   R6L,R6L
   \   00000112   5E......           JSR     @read_block_from_eeprom:24
   \   00000116   0B97               ADDS.L  #4,ER7
    153                  
    154                  //STR("Read parameters:\r\n");
    155          
    156                  //print_params();
    157          
    158                  err |= range(param.strength,                    STRENGTH_MIN,           STRENGTH_MAX);
   \   00000118   790600FA           MOV.W   #250,R6
   \   0000011C   6DF6               PUSH.W  R6
   \   0000011E   7905000A           MOV.W   #10,R5
   \   00000122   6B06....           MOV.W   @param+8:16,R6
   \   00000126   55C2               BSR     range
   \   00000128   0BD7               INC.W   #2,R7
   \   0000012A   0CE8               MOV.B   R6L,R0L
    159                  err |= range(param.base_freq,                   FREQ_MIN ,                      FREQ_MAX );
   \   0000012C   7906015E           MOV.W   #350,R6
   \   00000130   6DF6               PUSH.W  R6
   \   00000132   7905000F           MOV.W   #15,R5
   \   00000136   6B06....           MOV.W   @param+10:16,R6
   \   0000013A   55AE               BSR     range
   \   0000013C   0BD7               INC.W   #2,R7
   \   0000013E   14E8               OR.B    R6L,R0L
    160                  err |= range(param.pulse_out_number,    INTENSITY_MIN,          INTENSITY_MAX);
   \   00000140   79060008           MOV.W   #8,R6
   \   00000144   6DF6               PUSH.W  R6
   \   00000146   79050001           MOV.W   #1,R5
   \   0000014A   6A0E....           MOV.B   @param+12:16,R6L
   \   0000014E   1756               EXTU.W  R6
   \   00000150   5598               BSR     range
   \   00000152   0BD7               INC.W   #2,R7
   \   00000154   14E8               OR.B    R6L,R0L
    161                  err |= range(param.z_value,                             Z_MIN,                          Z_MAX);
   \   00000156   79060050           MOV.W   #80,R6
   \   0000015A   6DF6               PUSH.W  R6
   \   0000015C   7905000A           MOV.W   #10,R5
   \   00000160   6A0E....           MOV.B   @param+13:16,R6L
   \   00000164   1756               EXTU.W  R6
   \   00000166   5582               BSR     range
   \   00000168   0BD7               INC.W   #2,R7
   \   0000016A   14E8               OR.B    R6L,R0L
    162                  err |= range(param.modulation,                  MODULATION_MIN ,        MODULATION_MAX );
   \   0000016C   79060005           MOV.W   #5,R6
   \   00000170   6DF6               PUSH.W  R6
   \   00000172   1955               SUB.W   R5,R5
   \   00000174   6A0E....           MOV.B   @param+14:16,R6L
   \   00000178   1756               EXTU.W  R6
   \   0000017A   5C00FF6C           BSR     range
   \   0000017E   0BD7               INC.W   #2,R7
   \   00000180   14E8               OR.B    R6L,R0L
    163                  err |= range(param.filter,                              0,                                      1 );
   \   00000182   79060001           MOV.W   #1,R6
   \   00000186   6DF6               PUSH.W  R6
   \   00000188   1955               SUB.W   R5,R5
   \   0000018A   6A0E....           MOV.B   @param+15:16,R6L
   \   0000018E   1756               EXTU.W  R6
   \   00000190   5C00FF56           BSR     range
   \   00000194   0BD7               INC.W   #2,R7
   \   00000196   14E8               OR.B    R6L,R0L
    164                  err |= range(param.freq_cycling,                0,                                      1);
   \   00000198   79060001           MOV.W   #1,R6
   \   0000019C   6DF6               PUSH.W  R6
   \   0000019E   1955               SUB.W   R5,R5
   \   000001A0   6A0E....           MOV.B   @param+16:16,R6L
   \   000001A4   1756               EXTU.W  R6
   \   000001A6   5C00FF40           BSR     range
   \   000001AA   0BD7               INC.W   #2,R7
   \   000001AC   14E8               OR.B    R6L,R0L
    165                  err |= range(param.contrast,                    0,                                      31);
   \   000001AE   7906001F           MOV.W   #31,R6
   \   000001B2   6DF6               PUSH.W  R6
   \   000001B4   1955               SUB.W   R5,R5
   \   000001B6   6A0E....           MOV.B   @param+17:16,R6L
   \   000001BA   1756               EXTU.W  R6
   \   000001BC   5C00FF2A           BSR     range
   \   000001C0   0BD7               INC.W   #2,R7
   \   000001C2   14E8               OR.B    R6L,R0L
    166          
    167                  if (err)
   \   000001C4   1800               SUB.B   R0H,R0H
   \   000001C6   0C88               MOV.B   R0L,R0L
   \   000001C8   4710               BEQ     ?0021
    168                  {
    169                          STR("parameter out of range.\r\n");
   \   000001CA   7A06....           MOV.L   #?0022,ER6
   \            ....    
   \   000001D0   5E......           JSR     @serial_put_string:24
    170                          set_default_params();
   \   000001D4   5C00FED8           BSR     set_default_params
    171                          bad_params = TRUE;
   \   000001D8   F001               MOV.B   #1,R0H
   \                     ?0021:
    172                  }
    173          
    174                  if (param.checksum != calc_checksum( (char *) &param , sizeof(param) - 1))
   \   000001DA   79050013           MOV.W   #19,R5
   \   000001DE   7906....           MOV.W   #param,R6
   \   000001E2   17F6               EXTS.L  ER6
   \   000001E4   5C00FE18           BSR     calc_checksum
   \   000001E8   6A06....           MOV.B   @param+19:16,R6H
   \   000001EC   1C6E               CMP.B   R6H,R6L
   \   000001EE   4710               BEQ     ?0024
    175                  {
    176          
    177                          //PRINT "%i %i\r\n",param.checksum,calc_checksum( (char *) &param , sizeof(param) - 1) PREND
    178                          STR("bad sum!! set defaults\r\n");
   \   000001F0   7A06....           MOV.L   #?0025,ER6
   \            ....    
   \   000001F6   5E......           JSR     @serial_put_string:24
    179                          set_default_params();
   \   000001FA   5C00FEB2           BSR     set_default_params
    180                          bad_params = TRUE;
   \   000001FE   F001               MOV.B   #1,R0H
   \                     ?0024:
    181                  }
    182          
    183          
    184                  /* We  now have some valid parameters, if we need to save them. */
    185                  parameters_valid = TRUE;
   \   00000200   FE01               MOV.B   #1,R6L
   \   00000202   6AAE....           MOV.B   R6L,@parameters_valid:32
   \            ....    
    186          
    187                  return(bad_params);
   \   00000208   0C0E               MOV.B   R0H,R6L
    188          }
   \   0000020A   6D70               POP.W   R0
   \   0000020C   5470               RTS     
    189          
    190          
    191          /******************** END PARAMETER STORAGE CODE *******************/
    192          
    193          
    194          /******************************************************************
    195          NAME            : power_down
    196          PURPOSE         : Power down the unit.  Must use only this routine to power
    197                                          down as it does housekeeping.
    198          PARAMETERS      : NONE
    199          RETURNS         : NONE
    200          SIDE-EFFECTS: NONE
    201          CALLED FROM : 
    202          *********************************************************************/
    203          
    204          void power_down()
    205          {
   \                     power_down:
    206                  /* Save all the state we may want to keep. */
    207          
    208                  if (parameters_valid)
   \   0000020E   6A2E....           MOV.B   @parameters_valid:32,R6L
   \            ....    
   \   00000214   4708               BEQ     ?0027
    209                  {
    210                          save_parameters();
   \   00000216   5C00FE6E           BSR     save_parameters
    211                          wait_for_eeprom_to_finish(); /* Make sure the EEPROM is not deprived of power before it has done it's stuff. */
   \   0000021A   5E......           JSR     @wait_for_eeprom_to_finish:24
   \                     ?0027:
    212                          //print_params();
    213                  }
    214                  
    215                  clear_screen();
   \   0000021E   5E......           JSR     @clear_screen:24
    216                  update_display();
   \   00000222   5E......           JSR     @update_display:24
    217          
    218                  
    219                  POWER_HOLD_OFF;  /* power off */
   \   00000226   7F607270           BCLR    #7,@0xFFFFFF60
    220          
    221                  wait(2000);
   \   0000022A   7A060000           MOV.L   #2000,ER6
   \            07D0    
   \   00000230   5E......           JSR     @wait:24
    222          
    223                  glcd_print_string(4,5,2,"Power off");
   \   00000234   7A06....           MOV.L   #?0028,ER6
   \            ....    
   \   0000023A   01006DF6           PUSH.L  ER6
   \   0000023E   FE02               MOV.B   #2,R6L
   \   00000240   6DF6               PUSH.W  R6
   \   00000242   FD05               MOV.B   #5,R5L
   \   00000244   FE04               MOV.B   #4,R6L
   \   00000246   5E......           JSR     @glcd_print_string:24
    224                  update_display();
   \   0000024A   5E......           JSR     @update_display:24
   \                     ?0030:
    225          
    226                  while (1)
   \   0000024E   79060001           MOV.W   #1,R6
    227                  {
    228                          wait (100); /* save power! */
   \   00000252   1AE6               SUB.L   ER6,ER6
   \   00000254   FE64               MOV.B   #100,R6L
   \   00000256   5E......           JSR     @wait:24
    229                  }
    230          }
   \   0000025A   40F2               BRA     ?0030
    231          
    232          
    233          
    234          
    235          /******************************************************************
    236          NAME            : read_button
    237          PURPOSE         : low-level routine to return which button is pressed.
    238          PARAMETERS      : NONE
    239          RETURNS         : char: the button.
    240          SIDE-EFFECTS: none.
    241          CALLED FROM : read_keypad_action & ...
    242          *********************************************************************/
    243          
    244          #define BUTTON1_BIT 0x01
    245          #define BUTTON2_BIT 0x02
    246          #define BUTTON3_BIT 0x04
    247          #define BUTTON4_BIT 0x08
    248          
    249          #define TOP_BUTTON              4
    250          #define MIDTOP_BUTTON   3   
    251          #define MIDBOT_BUTTON   2
    252          #define BOTTOM_BUTTON   1
    253          
    254          
    255          char read_button()
    256          {
   \                     read_button:
    257                  register char bits = ~porte;
   \   0000025C   2D5D               MOV.B   @0xFFFFFF5D,R5L
   \   0000025E   170D               NOT.B   R5L
    258                  register char button = 0;
    259          
    260                  KICK_DOG; /* The watchdog. */
   \   00000260   79065A00           MOV.W   #23040,R6
   \   00000264   6B86FFBC           MOV.W   R6,@0xFFFFFFBC
    261          
    262                  if (! (bits & (BUTTON1_BIT | BUTTON2_BIT | BUTTON3_BIT | BUTTON4_BIT)) )
   \   00000268   0CD6               MOV.B   R5L,R6H
   \   0000026A   E60F               AND.B   #15,R6H
   \   0000026C   472C               BEQ     ?0047
    263                          return 0;
    264                          
    265                  if (bits & BUTTON1_BIT) 
   \   0000026E   730D               BTST    #0,R5L
   \   00000270   4704               BEQ     ?0035
    266                          button = BOTTOM_BUTTON;
   \   00000272   FE01               MOV.B   #1,R6L
   \   00000274   4016               BRA     ?0044
   \                     ?0035:
    267                  else if (bits & BUTTON2_BIT)    
   \   00000276   731D               BTST    #1,R5L
   \   00000278   4704               BEQ     ?0038
    268                          button = MIDBOT_BUTTON;
   \   0000027A   FE02               MOV.B   #2,R6L
   \   0000027C   400E               BRA     ?0044
   \                     ?0038:
    269                  else if (bits & BUTTON3_BIT)    
   \   0000027E   732D               BTST    #2,R5L
   \   00000280   4704               BEQ     ?0041
    270                          button = MIDTOP_BUTTON;
   \   00000282   FE03               MOV.B   #3,R6L
   \   00000284   4006               BRA     ?0044
   \                     ?0041:
    271                  else if (bits & BUTTON4_BIT)    
   \   00000286   733D               BTST    #3,R5L
   \   00000288   4702               BEQ     ?0044
    272                          button = TOP_BUTTON;
   \   0000028A   FE04               MOV.B   #4,R6L
   \                     ?0044:
    273          
    274                  if (!upside_down)
   \   0000028C   6A26....           MOV.B   @upside_down:32,R6H
   \            ....    
   \   00000292   4706               BEQ     ?0047
    275                          return button;
    276                          
    277                  return (TOP_BUTTON+1) - button;
   \   00000294   F605               MOV.B   #5,R6H
   \   00000296   18E6               SUB.B   R6L,R6H
   \   00000298   0C6E               MOV.B   R6H,R6L
    278          }
   \                     ?0047:
   \   0000029A   5470               RTS     
    279          
    280          
    281          
    282          /* If this is called at a regular rate, returns the button pressed, and takes care of autoincrement. */
    283          
    284          #define REPEAT_MAX 1
    285          #define INIT_WAIT_MAX 10
    286          
    287          char button_auto_wait[] = 
    288          {
    289                  0, /* Buttons are 1-4 */
    290                  INIT_WAIT_MAX,
    291                  INIT_WAIT_MAX,
    292                  INIT_WAIT_MAX,
    293                  INIT_WAIT_MAX,
    294          };
    295          
    296          char auto_repeating = FALSE;
    297          
    298          
    299          /******************************************************************
    300          NAME            : read_keypad_action
    301          PURPOSE         : reads the keypad and performs auto-repeat function.
    302          PARAMETERS      : the key pressed or 0
    303          RETURNS         : NONE
    304          SIDE-EFFECTS: auto_repeating global is set if we are auto-repeating.
    305          CALLED FROM : all menus etc.
    306          *********************************************************************/
    307          
    308          
    309          char read_keypad_action()
    310          {
   \                     read_keypad_action:
   \   0000029C   6DF0               PUSH.W  R0
    311          static char last_button = 0;
    312          static char repeat_count = 0;
    313          static char init_wait_count = 0;
    314                  
    315                  char button = read_button();
   \   0000029E   55BC               BSR     read_button
   \   000002A0   0CE8               MOV.B   R6L,R0L
    316          
    317                  if (button)
   \   000002A2   4766               BEQ     ?0054
    318                  {
    319                          if (button == last_button)
   \   000002A4   6A2E....           MOV.B   @?0048:32,R6L
   \            ....    
   \   000002AA   1CE8               CMP.B   R6L,R0L
   \   000002AC   465C               BNE     ?0054
    320                          {
    321                                  if (init_wait_count < button_auto_wait[button] /*INIT_WAIT_MAX */)
   \   000002AE   0C8E               MOV.B   R0L,R6L
   \   000002B0   1756               EXTU.W  R6
   \   000002B2   17F6               EXTS.L  ER6
   \   000002B4   78606A2D           MOV.B   @(button_auto_wait:32,ER6),R5L
   \            ........
   \   000002BC   6A2E....           MOV.B   @?0050:32,R6L
   \            ....    
   \   000002C2   1CED               CMP.B   R6L,R5L
   \   000002C4   4312               BLS     ?0056
    322                                  {
    323                                          init_wait_count++;
   \   000002C6   6A2E....           MOV.B   @?0050:32,R6L
   \            ....    
   \   000002CC   8E01               ADD.B   #1,R6L
   \   000002CE   6AAE....           MOV.B   R6L,@?0050:32
   \            ....    
    324                                          return 0;
   \   000002D4   18EE               SUB.B   R6L,R6L
    325                                  }
   \   000002D6   404E               BRA     ?0059
   \                     ?0056:
    326                                  else
    327                                  {
    328                                          repeat_count++;
   \   000002D8   6A2E....           MOV.B   @?0049:32,R6L
   \            ....    
   \   000002DE   8E01               ADD.B   #1,R6L
   \   000002E0   6AAE....           MOV.B   R6L,@?0049:32
   \            ....    
    329                                          if (repeat_count > REPEAT_MAX)
   \   000002E6   AE01               CMP.B   #1,R6L
   \   000002E8   431C               BLS     ?0058
    330                                          {
    331                                             repeat_count = 0;
   \   000002EA   18EE               SUB.B   R6L,R6L
   \   000002EC   6AAE....           MOV.B   R6L,@?0049:32
   \            ....    
    332                                             beep_for(1);
   \   000002F2   79060001           MOV.W   #1,R6
   \   000002F6   5E......           JSR     @beep_for:24
    333                                             auto_repeating = TRUE;
   \   000002FA   FE01               MOV.B   #1,R6L
   \   000002FC   6AAE....           MOV.B   R6L,@auto_repeating:32
   \            ....    
    334                                             return button;
   \   00000302   0C8E               MOV.B   R0L,R6L
    335                                             
    336                                          }
   \   00000304   4020               BRA     ?0059
   \                     ?0058:
    337                                          return 0;
   \   00000306   18EE               SUB.B   R6L,R6L
    338                                          
    339                                  }
   \   00000308   401C               BRA     ?0059
   \                     ?0054:
    340                          }
    341                  }
    342          
    343                  repeat_count = 0;
   \   0000030A   18EE               SUB.B   R6L,R6L
   \   0000030C   6AAE....           MOV.B   R6L,@?0049:32
   \            ....    
    344                  init_wait_count = 0;
   \   00000312   6AAE....           MOV.B   R6L,@?0050:32
   \            ....    
    345                  last_button = button;
   \   00000318   6AA8....           MOV.B   R0L,@?0048:32
   \            ....    
    346          
    347                  auto_repeating = FALSE;
   \   0000031E   6AAE....           MOV.B   R6L,@auto_repeating:32
   \            ....    
    348          
    349                  return button;
   \   00000324   0C8E               MOV.B   R0L,R6L
    350                  
    351          }       
   \                     ?0059:
   \   00000326   6D70               POP.W   R0
   \   00000328   5470               RTS     
    352          
    353          
    354          
    355          /******************************************************************
    356          NAME            : print_battery_state_at_col
    357          PURPOSE         : Prints the battery state icon at the given column, on
    358                                          bottom two rows.
    359          PARAMETERS      : char col: the column
    360          RETURNS         : NONE
    361          SIDE-EFFECTS: NONE
    362          CALLED FROM : 
    363          *********************************************************************/
    364          
    365          void print_battery_state_at_col(char col)
    366          {
   \                     print_battery_state_at_col:
   \   0000032A   6DF0               PUSH.W  R0
   \   0000032C   0CE8               MOV.B   R6L,R0L
    367          #define BATTERY_ICON 126
    368          float read_battery();
    369          signed char i;
    370          //static last_i = 255;  would need to reset it...
    371          
    372          
    373                  i =  (char)( (read_battery() - 7.0) * 3.5) ;
   \   0000032E   5E......           JSR     @read_battery:24
   \   00000332   7A05C0E0           MOV.L   #-1059061760,ER5
   \            0000    
   \   00000338   5E......           JSR     @?F_ADD_L04
   \   0000033C   7A054060           MOV.L   #1080033280,ER5
   \            0000    
   \   00000342   5E......           JSR     @?F_MUL_L04
   \   00000346   5E......           JSR     @?F_TO_L_L04
    374                  if (i < 0) i = 0;
   \   0000034A   0CEE               MOV     R6L,R6L
   \   0000034C   4C02               BGE     ?0061
   \   0000034E   18EE               SUB.B   R6L,R6L
   \                     ?0061:
    375                  if (i > 6) i = 6;
   \   00000350   AE06               CMP.B   #6,R6L
   \   00000352   4F02               BLE     ?0063
   \   00000354   FE06               MOV.B   #6,R6L
   \                     ?0063:
    376          
    377                  //if (i != last_i)
    378                  {
    379                          plot_sprite(7,col, 2,BATTERY_ICON + i);
   \   00000356   8E7E               ADD.B   #126,R6L
   \   00000358   6DF6               PUSH.W  R6
   \   0000035A   FE02               MOV.B   #2,R6L
   \   0000035C   6DF6               PUSH.W  R6
   \   0000035E   0C8D               MOV.B   R0L,R5L
   \   00000360   FE07               MOV.B   #7,R6L
   \   00000362   5E......           JSR     @plot_sprite:24
   \   00000366   0B97               ADDS.L  #4,ER7
    380                          //last_i =  i;
    381                  }
    382          }       
   \   00000368   6D70               POP.W   R0
   \   0000036A   5470               RTS     
    383          
    384          
    385          
    386          char menu_sprite_col;
    387          char text_lh = 0;
    388          char g_str[100];  /* ! temp print area ! */
    389          
    390          
    391          
    392          /* Icon numbers (in font 2) */
    393          #define ON_OFF_ICON 155
    394          #define PLUS_ICON 137
    395          #define MINUS_ICON 138
    396          #define NEXT_ICON 142
    397          #define DOWN_ICON 143
    398          #define PREV_ICON 148
    399          
    400          
    401          /******************************************************************
    402          NAME            : menu_icons
    403          PURPOSE         : Prints the soft-key icons down the correct side of the LCD.
    404          PARAMETERS      : the numbers of the four sprites to use, top first.
    405          RETURNS         : NONE
    406          SIDE-EFFECTS: NONE
    407          CALLED FROM : All the menus; and startup screens.
    408          *********************************************************************/
    409          
    410          void menu_icons(char spr1,char spr2,char spr3,char spr4)
    411          {
   \                     menu_icons:
   \   0000036C   6DF0               PUSH.W  R0
   \   0000036E   0CD8               MOV.B   R5L,R0L
    412                  menu_sprite_col = (upside_down)? 0: 91;
   \   00000370   6A26....           MOV.B   @upside_down:32,R6H
   \            ....    
   \   00000376   470A               BEQ     ?0065
   \   00000378   1866               SUB.B   R6H,R6H
   \   0000037A   6AA6....           MOV.B   R6H,@menu_sprite_col:32
   \            ....    
   \   00000380   4008               BRA     ?0066
   \                     ?0065:
   \   00000382   F65B               MOV.B   #91,R6H
   \   00000384   6AA6....           MOV.B   R6H,@menu_sprite_col:32
   \            ....    
   \                     ?0066:
    413          
    414                  plot_sprite(1,menu_sprite_col,2,spr1);
   \   0000038A   6DF6               PUSH.W  R6
   \   0000038C   FE02               MOV.B   #2,R6L
   \   0000038E   6DF6               PUSH.W  R6
   \   00000390   6A2D....           MOV.B   @menu_sprite_col:32,R5L
   \            ....    
   \   00000396   FE01               MOV.B   #1,R6L
   \   00000398   5E......           JSR     @plot_sprite:24
   \   0000039C   0B97               ADDS.L  #4,ER7
    415                  plot_sprite(3,menu_sprite_col,2,spr2);
   \   0000039E   6DF0               PUSH.W  R0
   \   000003A0   FE02               MOV.B   #2,R6L
   \   000003A2   6DF6               PUSH.W  R6
   \   000003A4   6A2D....           MOV.B   @menu_sprite_col:32,R5L
   \            ....    
   \   000003AA   FE03               MOV.B   #3,R6L
   \   000003AC   5E......           JSR     @plot_sprite:24
   \   000003B0   0B97               ADDS.L  #4,ER7
    416                  plot_sprite(5,menu_sprite_col,2,spr3);
   \   000003B2   6E7E0007           MOV.B   @(7,SP),R6L
   \   000003B6   6DF6               PUSH.W  R6
   \   000003B8   FE02               MOV.B   #2,R6L
   \   000003BA   6DF6               PUSH.W  R6
   \   000003BC   6A2D....           MOV.B   @menu_sprite_col:32,R5L
   \            ....    
   \   000003C2   FE05               MOV.B   #5,R6L
   \   000003C4   5E......           JSR     @plot_sprite:24
   \   000003C8   0B97               ADDS.L  #4,ER7
    417                  plot_sprite(7,menu_sprite_col,2,spr4);
   \   000003CA   6E7E0009           MOV.B   @(9,SP),R6L
   \   000003CE   6DF6               PUSH.W  R6
   \   000003D0   FE02               MOV.B   #2,R6L
   \   000003D2   6DF6               PUSH.W  R6
   \   000003D4   6A2D....           MOV.B   @menu_sprite_col:32,R5L
   \            ....    
   \   000003DA   FE07               MOV.B   #7,R6L
   \   000003DC   5E......           JSR     @plot_sprite:24
   \   000003E0   0B97               ADDS.L  #4,ER7
    418          }
   \   000003E2   6D70               POP.W   R0
   \   000003E4   5470               RTS     
    419          
    420          /******************************************************************
    421          NAME            : settings_icons
    422          PURPOSE         : Prints the icon display on the bottom of the LCD
    423                                          to indicate the settings.
    424          PARAMETERS      : NONE
    425          RETURNS         : NONE
    426          SIDE-EFFECTS: NONE
    427          CALLED FROM : Various menus.
    428          *********************************************************************/
    429          
    430          void settings_icons()
    431          {
   \                     settings_icons:
    432          
    433          #define SET_ICN_OFF1 30
    434          #define SET_ICN_OFF2 48
    435          
    436                  char mod_or_int;
    437                  char num_dash;
    438          
    439                  if (param.modulation)                                   /* Modulation Icon */
   \   000003E6   6A0E....           MOV.B   @param+14:16,R6L
   \   000003EA   470A               BEQ     ?0068
    440                  {
    441                          mod_or_int = 'M';
    442                          num_dash = '0' + param.modulation;      
   \   000003EC   6A0D....           MOV.B   @param+14:16,R5L
   \   000003F0   8D30               ADD.B   #48,R5L
   \   000003F2   FE4D               MOV.B   #77,R6L
   \   000003F4   4016               BRA     ?0072
   \                     ?0068:
    443                  }
    444                  else if (param.pulse_out_number > 1)    /* Intensity Icon. */
   \   000003F6   6A0E....           MOV.B   @param+12:16,R6L
   \   000003FA   AE01               CMP.B   #1,R6L
   \   000003FC   430A               BLS     ?0071
    445                  {
    446                          mod_or_int = 'I';
    447                          num_dash =  '0' + param.pulse_out_number;       
   \   000003FE   6A0D....           MOV.B   @param+12:16,R5L
   \   00000402   8D30               ADD.B   #48,R5L
   \   00000404   FE49               MOV.B   #73,R6L
    448                  }
    449                  else
   \   00000406   4004               BRA     ?0072
   \                     ?0071:
    450                  {
    451                          mod_or_int = ' ';
    452                          num_dash =  ' ';        
   \   00000408   FE20               MOV.B   #32,R6L
   \   0000040A   0CED               MOV.B   R6L,R5L
   \                     ?0072:
    453                  }
    454          
    455                  sprintf(g_str,"%c%c",mod_or_int,num_dash);
   \   0000040C   1755               EXTU.W  R5
   \   0000040E   6DF5               PUSH.W  R5
   \   00000410   1756               EXTU.W  R6
   \   00000412   6DF6               PUSH.W  R6
   \   00000414   7A06....           MOV.L   #?0073,ER6
   \            ....    
   \   0000041A   01006DF6           PUSH.L  ER6
   \   0000041E   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000424   5E......           JSR     @sprintf:24
   \   00000428   79170008           ADD.W   #8,R7
    456                  glcd_print_string(7,text_lh+SET_ICN_OFF1,1,g_str);
   \   0000042C   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000432   01006DF6           PUSH.L  ER6
   \   00000436   FE01               MOV.B   #1,R6L
   \   00000438   6DF6               PUSH.W  R6
   \   0000043A   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000440   8D1E               ADD.B   #30,R5L
   \   00000442   FE07               MOV.B   #7,R6L
   \   00000444   5E......           JSR     @glcd_print_string:24
   \   00000448   79170006           ADD.W   #6,R7
    457          
    458                  if (param.freq_cycling)
   \   0000044C   6A0E....           MOV.B   @param+16:16,R6L
   \   00000450   4722               BEQ     ?0075
    459                  {
    460                          glcd_print_string(7,text_lh+SET_ICN_OFF2,1,"FrCyc");
   \   00000452   7A06....           MOV.L   #?0076,ER6
   \            ....    
   \   00000458   01006DF6           PUSH.L  ER6
   \   0000045C   FE01               MOV.B   #1,R6L
   \   0000045E   6DF6               PUSH.W  R6
   \   00000460   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000466   8D30               ADD.B   #48,R5L
   \   00000468   FE07               MOV.B   #7,R6L
   \   0000046A   5E......           JSR     @glcd_print_string:24
   \   0000046E   79170006           ADD.W   #6,R7
    461                  }
    462                  else
   \   00000472   5470               RTS     
   \                     ?0075:
    463                  {
    464                          sprintf(g_str,"%3iHz",param.base_freq);
   \   00000474   6B06....           MOV.W   @param+10:16,R6
   \   00000478   6DF6               PUSH.W  R6
   \   0000047A   7A06....           MOV.L   #?0078,ER6
   \            ....    
   \   00000480   01006DF6           PUSH.L  ER6
   \   00000484   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   0000048A   5E......           JSR     @sprintf:24
   \   0000048E   79170006           ADD.W   #6,R7
    465                          glcd_print_string(7,text_lh+SET_ICN_OFF2,1,g_str);
   \   00000492   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000498   01006DF6           PUSH.L  ER6
   \   0000049C   FE01               MOV.B   #1,R6L
   \   0000049E   6DF6               PUSH.W  R6
   \   000004A0   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000004A6   8D30               ADD.B   #48,R5L
   \   000004A8   FE07               MOV.B   #7,R6L
   \   000004AA   5E......           JSR     @glcd_print_string:24
   \   000004AE   79170006           ADD.W   #6,R7
    466                  }
    467          }
   \   000004B2   5470               RTS     
    468          
    469          
    470          /******************************************************************
    471          NAME            : set_menu_state
    472          PURPOSE         : Sets some of the global state for the menu system
    473                                          particularly, the state do to with 
    474                                      whether the display is upside-down.
    475          PARAMETERS      : char upside_down_p: true if we want the display inverted.
    476          RETURNS         : NONE
    477          SIDE-EFFECTS: NONE
    478          CALLED FROM : 
    479          *********************************************************************/
    480          
    481          void set_menu_state(char upside_down_p)
    482          {
   \                     set_menu_state:
    483                  set_viewpoint(upside_down_p);
   \   000004B4   5E......           JSR     @set_viewpoint:24
    484                  text_lh =  upside_down? 10 : 0;
   \   000004B8   6A2E....           MOV.B   @upside_down:32,R6L
   \            ....    
   \   000004BE   470A               BEQ     ?0080
   \   000004C0   FE0A               MOV.B   #10,R6L
   \   000004C2   6AAE....           MOV.B   R6L,@text_lh:32
   \            ....    
   \   000004C8   5470               RTS     
   \                     ?0080:
   \   000004CA   18EE               SUB.B   R6L,R6L
   \   000004CC   6AAE....           MOV.B   R6L,@text_lh:32
   \            ....    
    485          }       
   \   000004D2   5470               RTS     
    486          
    487          
    488          
    489          /******************************************************************
    490          NAME            : print_big_value
    491          PURPOSE         : Print a number at a place that's useful for many menus.
    492          PARAMETERS      : short value - the value to print.
    493          RETURNS         : NONE
    494          SIDE-EFFECTS: NONE
    495          CALLED FROM : Many menus.
    496          *********************************************************************/
    497          
    498          
    499          void print_big_value(short value)
    500          {
   \                     print_big_value:
    501                  sprintf(g_str,"%3i",value);               
   \   000004D4   6DF6               PUSH.W  R6
   \   000004D6   7A06....           MOV.L   #?0082,ER6
   \            ....    
   \   000004DC   01006DF6           PUSH.L  ER6
   \   000004E0   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   000004E6   5E......           JSR     @sprintf:24
   \   000004EA   79170006           ADD.W   #6,R7
    502                  glcd_print_string(3,text_lh+35,2,g_str); 
   \   000004EE   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   000004F4   01006DF6           PUSH.L  ER6
   \   000004F8   FE02               MOV.B   #2,R6L
   \   000004FA   6DF6               PUSH.W  R6
   \   000004FC   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000502   8D23               ADD.B   #35,R5L
   \   00000504   FE03               MOV.B   #3,R6L
   \   00000506   5E......           JSR     @glcd_print_string:24
   \   0000050A   79170006           ADD.W   #6,R7
    503          }
   \   0000050E   5470               RTS     
    504          
    505          /******************************************************************
    506          NAME            : disp_modulation
    507          PURPOSE         : Display the value of modulation or 'Off'.
    508          PARAMETERS      : NONE
    509          RETURNS         : NONE
    510          SIDE-EFFECTS: NONE
    511          CALLED FROM : 
    512          *********************************************************************/
    513          
    514          void disp_modulation()
    515          {
   \                     disp_modulation:
    516                  if (param.modulation)
   \   00000510   6A0E....           MOV.B   @param+14:16,R6L
   \   00000514   470A               BEQ     ?0084
    517                  {
    518                          print_big_value(param.modulation);
   \   00000516   6A0E....           MOV.B   @param+14:16,R6L
   \   0000051A   1756               EXTU.W  R6
   \   0000051C   55B6               BSR     print_big_value
    519                  }
    520                  else
   \   0000051E   5470               RTS     
   \                     ?0084:
    521                  {
    522                          glcd_print_string(3,text_lh+35,2,"Off");
   \   00000520   7A06....           MOV.L   #?0086,ER6
   \            ....    
   \   00000526   01006DF6           PUSH.L  ER6
   \   0000052A   FE02               MOV.B   #2,R6L
   \   0000052C   6DF6               PUSH.W  R6
   \   0000052E   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000534   8D23               ADD.B   #35,R5L
   \   00000536   FE03               MOV.B   #3,R6L
   \   00000538   5E......           JSR     @glcd_print_string:24
   \   0000053C   79170006           ADD.W   #6,R7
    523                  }
    524          }       
   \   00000540   5470               RTS     
    525          
    526          
    527          
    528          #define PRINT_STRENGTH_BIG       print_big_value(param.strength);
    529          
    530          #define PRINT_STRENGTH_SMALL                               \
    531                  sprintf(g_str,"%3i",param.strength);                       \
    532                  glcd_print_string(0,text_lh + 68,1,g_str); \
    533          
    534          /******************************************************************
    535          NAME            : main_screen
    536          PURPOSE         : Print the static elements of the main screen.
    537                                          - used when first setting up the main screen,
    538                                          and when coming oout of the skin-screen.
    539          PARAMETERS      : NONE
    540          RETURNS         : NONE
    541          SIDE-EFFECTS: Timers are set...
    542          CALLED FROM : 
    543          *********************************************************************/
    544          
    545          #define NORMAL_POWER_OFF_TIME (30 * 1000L)
    546          void main_screen()
    547          {
   \                     main_screen:
    548          
    549                  /* Set the power off timer. */
    550                  power_off_timer.period = NORMAL_POWER_OFF_TIME ;
   \   00000542   7A060000           MOV.L   #30000,ER6
   \            7530    
   \   00000548   01006BA6           MOV.L   ER6,@power_off_timer+6:32
   \            ........
    551                  timer_go(&power_off_timer);
   \   00000550   7A06....           MOV.L   #power_off_timer,ER6
   \            ....    
   \   00000556   5E......           JSR     @timer_go:24
    552          
    553                  clear_screen();
   \   0000055A   5E......           JSR     @clear_screen:24
    554                  glcd_print_string(1,text_lh,2,"Strength");
   \   0000055E   7A06....           MOV.L   #?0087,ER6
   \            ....    
   \   00000564   01006DF6           PUSH.L  ER6
   \   00000568   FE02               MOV.B   #2,R6L
   \   0000056A   6DF6               PUSH.W  R6
   \   0000056C   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000572   FE01               MOV.B   #1,R6L
   \   00000574   5E......           JSR     @glcd_print_string:24
   \   00000578   79170006           ADD.W   #6,R7
    555                  if (param.pulse_out_number > 1)
   \   0000057C   6A0E....           MOV.B   @param+12:16,R6L
   \   00000580   AE01               CMP.B   #1,R6L
   \   00000582   4340               BLS     ?0089
    556                  {
    557                          sprintf(g_str,"x%i",param.pulse_out_number);
   \   00000584   6A0E....           MOV.B   @param+12:16,R6L
   \   00000588   1756               EXTU.W  R6
   \   0000058A   6DF6               PUSH.W  R6
   \   0000058C   7A06....           MOV.L   #?0090,ER6
   \            ....    
   \   00000592   01006DF6           PUSH.L  ER6
   \   00000596   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   0000059C   5E......           JSR     @sprintf:24
   \   000005A0   79170006           ADD.W   #6,R7
    558                          glcd_print_string(3,text_lh+65,1,g_str);                
   \   000005A4   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   000005AA   01006DF6           PUSH.L  ER6
   \   000005AE   FE01               MOV.B   #1,R6L
   \   000005B0   6DF6               PUSH.W  R6
   \   000005B2   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000005B8   8D41               ADD.B   #65,R5L
   \   000005BA   FE03               MOV.B   #3,R6L
   \   000005BC   5E......           JSR     @glcd_print_string:24
   \   000005C0   79170006           ADD.W   #6,R7
   \                     ?0089:
    559                  }
    560                  menu_icons(PLUS_ICON, MINUS_ICON, NEXT_ICON, ON_OFF_ICON);
   \   000005C4   FE9B               MOV.B   #155,R6L
   \   000005C6   6DF6               PUSH.W  R6
   \   000005C8   FE8E               MOV.B   #142,R6L
   \   000005CA   6DF6               PUSH.W  R6
   \   000005CC   FD8A               MOV.B   #138,R5L
   \   000005CE   FE89               MOV.B   #137,R6L
   \   000005D0   5C00FD98           BSR     menu_icons
   \   000005D4   0B97               ADDS.L  #4,ER7
    561                  button_auto_wait[1] = 30;
   \   000005D6   FE1E               MOV.B   #30,R6L
   \   000005D8   6AAE....           MOV.B   R6L,@button_auto_wait+1:32
   \            ....    
    562                  settings_icons();
   \   000005DE   5C00FE04           BSR     settings_icons
    563          
    564                  /* Print the value */
    565                  PRINT_STRENGTH_BIG
   \   000005E2   6B06....           MOV.W   @param+8:16,R6
   \   000005E6   5C00FEEA           BSR     print_big_value
    566          }
   \   000005EA   5470               RTS     
    567                  
    568          /******************************************************************
    569          NAME            : skin_screen
    570          PURPOSE         : Print the static elements of the skin screen.
    571                                          used when coming out of the main-screen.
    572          PARAMETERS      : NONE
    573          RETURNS         : NONE
    574          SIDE-EFFECTS: Timers are set...
    575          CALLED FROM : 
    576          *********************************************************************/
    577          
    578          void skin_screen()
    579          {
   \                     skin_screen:
    580          
    581          #define SKIN_POWER_OFF_TIME     (10L * 60L * 1000L)
    582          
    583                  /* Set the power off timer. */
    584                  power_off_timer.period = param.filter? SKIN_POWER_OFF_TIME : NORMAL_POWER_OFF_TIME;
   \   000005EC   6A0E....           MOV.B   @param+15:16,R6L
   \   000005F0   4710               BEQ     ?0092
   \   000005F2   7A060009           MOV.L   #600000,ER6
   \            27C0    
   \   000005F8   01006BA6           MOV.L   ER6,@power_off_timer+6:32
   \            ........
   \   00000600   400E               BRA     ?0093
   \                     ?0092:
   \   00000602   7A060000           MOV.L   #30000,ER6
   \            7530    
   \   00000608   01006BA6           MOV.L   ER6,@power_off_timer+6:32
   \            ........
   \                     ?0093:
    585                  timer_go(&power_off_timer);
   \   00000610   7A06....           MOV.L   #power_off_timer,ER6
   \            ....    
   \   00000616   5E......           JSR     @timer_go:24
    586          
    587                  clear_screen();
   \   0000061A   5E......           JSR     @clear_screen:24
    588                  glcd_print_string(0,text_lh+50,1,"Str");
   \   0000061E   7A06....           MOV.L   #?0094,ER6
   \            ....    
   \   00000624   01006DF6           PUSH.L  ER6
   \   00000628   FE01               MOV.B   #1,R6L
   \   0000062A   6DF6               PUSH.W  R6
   \   0000062C   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000632   8D32               ADD.B   #50,R5L
   \   00000634   18EE               SUB.B   R6L,R6L
   \   00000636   5E......           JSR     @glcd_print_string:24
   \   0000063A   79170006           ADD.W   #6,R7
    589          
    590                  menu_icons(PLUS_ICON, MINUS_ICON, NEXT_ICON, ON_OFF_ICON);
   \   0000063E   FE9B               MOV.B   #155,R6L
   \   00000640   6DF6               PUSH.W  R6
   \   00000642   FE8E               MOV.B   #142,R6L
   \   00000644   6DF6               PUSH.W  R6
   \   00000646   FD8A               MOV.B   #138,R5L
   \   00000648   FE89               MOV.B   #137,R6L
   \   0000064A   5C00FD1E           BSR     menu_icons
   \   0000064E   0B97               ADDS.L  #4,ER7
    591                  button_auto_wait[1] = 30;
   \   00000650   FE1E               MOV.B   #30,R6L
   \   00000652   6AAE....           MOV.B   R6L,@button_auto_wait+1:32
   \            ....    
    592          
    593          
    594                  settings_icons();
   \   00000658   5C00FD8A           BSR     settings_icons
    595          
    596                  /* Print the value */
    597                  PRINT_STRENGTH_SMALL
   \   0000065C   6B06....           MOV.W   @param+8:16,R6
   \   00000660   6DF6               PUSH.W  R6
   \   00000662   7A06....           MOV.L   #?0082,ER6
   \            ....    
   \   00000668   01006DF6           PUSH.L  ER6
   \   0000066C   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000672   5E......           JSR     @sprintf:24
   \   00000676   79170006           ADD.W   #6,R7
   \   0000067A   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000680   01006DF6           PUSH.L  ER6
   \   00000684   FE01               MOV.B   #1,R6L
   \   00000686   6DF6               PUSH.W  R6
   \   00000688   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   0000068E   8D44               ADD.B   #68,R5L
   \   00000690   18EE               SUB.B   R6L,R6L
   \   00000692   5E......           JSR     @glcd_print_string:24
   \   00000696   79170006           ADD.W   #6,R7
    598          
    599                  if (param.filter)
   \   0000069A   6A0E....           MOV.B   @param+15:16,R6L
   \   0000069E   4724               BEQ     ?0096
    600                  {
    601                          glcd_print_string(3,text_lh,1,"Filter");
   \   000006A0   7A06....           MOV.L   #?0097,ER6
   \            ....    
   \   000006A6   01006DF6           PUSH.L  ER6
   \   000006AA   FE01               MOV.B   #1,R6L
   \   000006AC   6DF6               PUSH.W  R6
   \   000006AE   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000006B4   FE03               MOV.B   #3,R6L
   \   000006B6   5E......           JSR     @glcd_print_string:24
   \   000006BA   79170006           ADD.W   #6,R7
    602                          settings_icons();
   \   000006BE   5C00FD24           BSR     settings_icons
   \   000006C2   5470               RTS     
   \                     ?0096:
    603                  }
    604                  else if (param.modulation)
   \   000006C4   6A0E....           MOV.B   @param+14:16,R6L
   \   000006C8   4724               BEQ     ?0100
    605                  {        
    606                          glcd_print_string(3,text_lh,1,"Modulation");
   \   000006CA   7A06....           MOV.L   #?0101,ER6
   \            ....    
   \   000006D0   01006DF6           PUSH.L  ER6
   \   000006D4   FE01               MOV.B   #1,R6L
   \   000006D6   6DF6               PUSH.W  R6
   \   000006D8   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000006DE   FE03               MOV.B   #3,R6L
   \   000006E0   5E......           JSR     @glcd_print_string:24
   \   000006E4   79170006           ADD.W   #6,R7
    607                          settings_icons();
   \   000006E8   5C00FCFA           BSR     settings_icons
   \   000006EC   5470               RTS     
   \                     ?0100:
    608                  }
    609                  else if (param.freq_cycling)
   \   000006EE   6A0E....           MOV.B   @param+16:16,R6L
   \   000006F2   4724               BEQ     ?0104
    610                  {
    611                          glcd_print_string(3,text_lh,1,"Freq Cycle");
   \   000006F4   7A06....           MOV.L   #?0105,ER6
   \            ....    
   \   000006FA   01006DF6           PUSH.L  ER6
   \   000006FE   FE01               MOV.B   #1,R6L
   \   00000700   6DF6               PUSH.W  R6
   \   00000702   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000708   FE03               MOV.B   #3,R6L
   \   0000070A   5E......           JSR     @glcd_print_string:24
   \   0000070E   79170006           ADD.W   #6,R7
    612                          settings_icons();
   \   00000712   5C00FCD0           BSR     settings_icons
    613                  }
    614                  else
   \   00000716   5470               RTS     
   \                     ?0104:
    615                  {
    616                          glcd_print_string(3,text_lh+70,1,"\x8D"); /* D/T symbol */
   \   00000718   7A06....           MOV.L   #?0107,ER6
   \            ....    
   \   0000071E   01006DF6           PUSH.L  ER6
   \   00000722   FE01               MOV.B   #1,R6L
   \   00000724   6DF6               PUSH.W  R6
   \   00000726   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   0000072C   8D46               ADD.B   #70,R5L
   \   0000072E   FE03               MOV.B   #3,R6L
   \   00000730   5E......           JSR     @glcd_print_string:24
   \   00000734   79170006           ADD.W   #6,R7
    617                  }
    618          }
   \   00000738   5470               RTS     
    619          
    620          
    621          
    622          
    623                  
    624          
    625          /******************************************************************
    626          NAME            : main_menu
    627          PURPOSE         : The main menu for the unit.  Allows the strength to be
    628                                          set.
    629          PARAMETERS      : NONE
    630          RETURNS         : NONE
    631          SIDE-EFFECTS: NONE
    632          CALLED FROM : 
    633          *********************************************************************/
    634          
    635          void write_analogue(char c);
    636          
    637          void main_menu()
    638          {
   \                     main_menu:
   \   0000073A   01006DF0           PUSH.L  ER0
   \   0000073E   6DF1               PUSH.W  R1
   \   00000740   6DF2               PUSH.W  R2
    639                  char button;
    640                  char loop_count = 0;
    641                  char flip_count = 0;
    642                  char skin_screen_on = FALSE;
    643                  short last_mins;
    644          
    645                  /* Reset Some timers. */
    646                  menu_timer.period = 2000;
   \   00000742   7A060000           MOV.L   #2000,ER6
   \            07D0    
   \   00000748   01006BA6           MOV.L   ER6,@menu_timer+6:32
   \            ........
    647                  display_timer.period = 3000;
   \   00000750   7A060000           MOV.L   #3000,ER6
   \            0BB8    
   \   00000756   01006BA6           MOV.L   ER6,@display_timer+6:32
   \            ........
    648          
    649                  main_screen();
   \   0000075E   5C00FDE0           BSR     main_screen
    650                  update_display();
   \   00000762   5E......           JSR     @update_display:24
   \   00000766   1888               SUB.B   R0L,R0L
   \   00000768   1800               SUB.B   R0H,R0H
   \   0000076A   1899               SUB.B   R1L,R1L
   \                     ?0109:
    651          
    652                  while (read_button()) ;
   \   0000076C   5C00FAEC           BSR     read_button
   \   00000770   0CEE               MOV.B   R6L,R6L
   \   00000772   46F8               BNE     ?0109
   \                     ?0108:
    653          
    654          
    655                  while (1)
   \   00000774   79060001           MOV.W   #1,R6
    656                  {
    657                          wait (30);
   \   00000778   1AE6               SUB.L   ER6,ER6
   \   0000077A   FE1E               MOV.B   #30,R6L
   \   0000077C   5E......           JSR     @wait:24
    658          
    659                          button = read_keypad_action();
   \   00000780   5C00FB18           BSR     read_keypad_action
   \   00000784   0CE1               MOV.B   R6L,R1H
    660                          
    661                          switch (button)
   \   00000786   A104               CMP.B   #4,R1H
   \   00000788   462C               BNE     ?0119
    662                          {
    663          
    664                                  case TOP_BUTTON:
    665                                          if (param.strength < STRENGTH_MAX)
   \   0000078A   6B06....           MOV.W   @param+8:16,R6
   \   0000078E   792600FA           CMP.W   #250,R6
   \   00000792   4C1A               BGE     ?0117
    666                                          {
    667                                                  param.strength++;
   \   00000794   6B06....           MOV.W   @param+8:16,R6
   \   00000798   0B56               INC.W   #1,R6
   \   0000079A   6B86....           MOV.W   R6,@param+8:16
    668                                                  set_pulse_width(param.strength); 
   \   0000079E   6A0E....           MOV.B   @param+9:16,R6L
   \   000007A2   5E......           JSR     @set_pulse_width:24
    669                                                  set_pulse_period(); 
   \   000007A6   5E......           JSR     @set_pulse_period:24
    670                                          }
    671                                          else
   \   000007AA   5800009C           BRA     ?0128
   \                     ?0117:
    672                                                  end_beep();
   \   000007AE   5E......           JSR     @end_beep:24
    673          
    674                                          break;
   \   000007B2   58000094           BRA     ?0128
   \                     ?0119:
   \   000007B6   A103               CMP.B   #3,R1H
   \   000007B8   4628               BNE     ?0123
    675          
    676                                  case MIDTOP_BUTTON:
    677                                          if (param.strength > STRENGTH_MIN)
   \   000007BA   6B06....           MOV.W   @param+8:16,R6
   \   000007BE   7926000A           CMP.W   #10,R6
   \   000007C2   4F18               BLE     ?0121
    678                                          {
    679                                                  param.strength--;
   \   000007C4   6B06....           MOV.W   @param+8:16,R6
   \   000007C8   1B56               DEC.W   #1,R6
   \   000007CA   6B86....           MOV.W   R6,@param+8:16
    680                                                  set_pulse_width(param.strength); 
   \   000007CE   6A0E....           MOV.B   @param+9:16,R6L
   \   000007D2   5E......           JSR     @set_pulse_width:24
    681                                                  set_pulse_period(); 
   \   000007D6   5E......           JSR     @set_pulse_period:24
    682                                          }
    683                                          else
   \   000007DA   406E               BRA     ?0128
   \                     ?0121:
    684                                                  end_beep();
   \   000007DC   5E......           JSR     @end_beep:24
    685                                          break;
   \   000007E0   4068               BRA     ?0128
   \                     ?0123:
   \   000007E2   A102               CMP.B   #2,R1H
   \   000007E4   4614               BNE     ?0124
    686          
    687                                  case MIDBOT_BUTTON:
    688                                          /* Make sure we are not partway through a modulation when we go to the menus. */
    689                                          reset_modulation();
   \   000007E6   5E......           JSR     @reset_modulation:24
    690                                          menu = last_menu;
   \   000007EA   6A2E....           MOV.B   @last_menu:32,R6L
   \            ....    
   \   000007F0   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
    691                                          return ;
    692          
    693                                  case BOTTOM_BUTTON:
   \   000007F6   580003C6           BRA     ?0111
   \                     ?0124:
   \   000007FA   A101               CMP.B   #1,R1H
   \   000007FC   464C               BNE     ?0128
    694          
    695                                          if (auto_repeating)     /* Request for power off. */
   \   000007FE   6A2E....           MOV.B   @auto_repeating:32,R6L
   \            ....    
   \   00000804   4704               BEQ     ?0126
    696                                          {
    697                                                  power_down();
   \   00000806   5C00FA04           BSR     power_down
   \                     ?0126:
    698                                          }
    699          
    700                                          flip_count++;
   \   0000080A   8001               ADD.B   #1,R0H
    701                                          plot_sprite(7,menu_sprite_col,2,ON_OFF_ICON + flip_count);
   \   0000080C   0C0E               MOV.B   R0H,R6L
   \   0000080E   8E9B               ADD.B   #155,R6L
   \   00000810   6DF6               PUSH.W  R6
   \   00000812   FE02               MOV.B   #2,R6L
   \   00000814   6DF6               PUSH.W  R6
   \   00000816   6A2D....           MOV.B   @menu_sprite_col:32,R5L
   \            ....    
   \   0000081C   FE07               MOV.B   #7,R6L
   \   0000081E   5E......           JSR     @plot_sprite:24
   \   00000822   0B97               ADDS.L  #4,ER7
    702                                          update_display();
   \   00000824   5E......           JSR     @update_display:24
    703          
    704                                          if (flip_count > 2)
   \   00000828   A002               CMP.B   #2,R0H
   \   0000082A   431E               BLS     ?0128
    705                                          {
    706                                                  beep_for(5);
   \   0000082C   79060005           MOV.W   #5,R6
   \   00000830   5E......           JSR     @beep_for:24
    707                                                  set_menu_state(!upside_down);
   \   00000834   6A2E....           MOV.B   @upside_down:32,R6L
   \            ....    
   \   0000083A   4604               BNE     ?0103
   \   0000083C   FE01               MOV.B   #1,R6L
   \   0000083E   4002               BRA     ?0099
   \                     ?0103:
   \   00000840   18EE               SUB.B   R6L,R6L
   \                     ?0099:
   \   00000842   5C00FC6E           BSR     set_menu_state
    708                                                  return;
    709                                          }
   \   00000846   58000376           BRA     ?0111
   \                     ?0128:
    710                                          break;
    711                          }
    712          
    713                          /* Things to do if a button is pressed... */
    714                          if (button)
   \   0000084A   0C11               MOV.B   R1H,R1H
   \   0000084C   477A               BEQ     ?0130
    715                          {
    716                                  if (button >= 3 && flip_count)
   \   0000084E   A103               CMP.B   #3,R1H
   \   00000850   451C               BCS     ?0132
   \   00000852   0C00               MOV.B   R0H,R0H
   \   00000854   4718               BEQ     ?0132
    717                                  {
    718                                          flip_count = 0;
    719                                          menu_icons(PLUS_ICON, MINUS_ICON, NEXT_ICON, ON_OFF_ICON);
   \   00000856   FE9B               MOV.B   #155,R6L
   \   00000858   6DF6               PUSH.W  R6
   \   0000085A   FE8E               MOV.B   #142,R6L
   \   0000085C   6DF6               PUSH.W  R6
   \   0000085E   FD8A               MOV.B   #138,R5L
   \   00000860   FE89               MOV.B   #137,R6L
   \   00000862   5C00FB06           BSR     menu_icons
   \   00000866   0B97               ADDS.L  #4,ER7
    720                                          update_display();
   \   00000868   5E......           JSR     @update_display:24
   \   0000086C   1800               SUB.B   R0H,R0H
   \                     ?0132:
    721                                  }
    722          
    723                          /* Hold off auto power-down. */
    724                      timer_go(&power_off_timer);
   \   0000086E   7A06....           MOV.L   #power_off_timer,ER6
   \            ....    
   \   00000874   5E......           JSR     @timer_go:24
    725          
    726                                  /* Update the value */
    727                                  if (skin_screen_on)
   \   00000878   0C99               MOV.B   R1L,R1L
   \   0000087A   4740               BEQ     ?0136
    728                                  {
    729                                          PRINT_STRENGTH_SMALL
   \   0000087C   6B06....           MOV.W   @param+8:16,R6
   \   00000880   6DF6               PUSH.W  R6
   \   00000882   7A06....           MOV.L   #?0082,ER6
   \            ....    
   \   00000888   01006DF6           PUSH.L  ER6
   \   0000088C   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000892   5E......           JSR     @sprintf:24
   \   00000896   79170006           ADD.W   #6,R7
   \   0000089A   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   000008A0   01006DF6           PUSH.L  ER6
   \   000008A4   FE01               MOV.B   #1,R6L
   \   000008A6   6DF6               PUSH.W  R6
   \   000008A8   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000008AE   8D44               ADD.B   #68,R5L
   \   000008B0   18EE               SUB.B   R6L,R6L
   \   000008B2   5E......           JSR     @glcd_print_string:24
   \   000008B6   79170006           ADD.W   #6,R7
    730                                  }
    731                                  else
   \   000008BA   4008               BRA     ?0137
   \                     ?0136:
    732                                  {
    733                                          PRINT_STRENGTH_BIG
   \   000008BC   6B06....           MOV.W   @param+8:16,R6
   \   000008C0   5C00FC10           BSR     print_big_value
   \                     ?0137:
    734                                  }
    735          
    736                                  /* Dont allow modulation whist adjusting strength. */
    737                                  reset_modulation();
   \   000008C4   5E......           JSR     @reset_modulation:24
   \                     ?0130:
    738                          }
    739                          
    740          
    741                          /* Control the therapy. */
    742                          therapy_control();
   \   000008C8   5E......           JSR     @therapy_control:24
    743                          modulate();
   \   000008CC   5E......           JSR     @modulate:24
    744          
    745          
    746                          /* Display the information. */
    747                          if (  ((loop_count++ & 0x7) == 0) )
   \   000008D0   0C8E               MOV.B   R0L,R6L
   \   000008D2   0A08               INC.B   R0L
   \   000008D4   EE07               AND.B   #7,R6L
   \   000008D6   586002DE           BNE     ?0190
    748                          {
    749                           char freeze_time = !timer_done(&display_timer);
   \   000008DA   7A06....           MOV.L   #display_timer,ER6
   \            ....    
   \   000008E0   5E......           JSR     @timer_done:24
   \   000008E4   0CEE               MOV.B   R6L,R6L
   \   000008E6   4604               BNE     ?0091
   \   000008E8   FA01               MOV.B   #1,R2L
   \   000008EA   4002               BRA     ?0098
   \                     ?0091:
   \   000008EC   18AA               SUB.B   R2L,R2L
   \                     ?0098:
    750          
    751                                  if (skin_display || freeze_time) /* If diagnostics frozen, then keep the display there. */
   \   000008EE   6A0E....           MOV.B   @skin_display:16,R6L
   \   000008F2   4606               BNE     ?0142
   \   000008F4   0CAA               MOV.B   R2L,R2L
   \   000008F6   58700296           BEQ     ?0141
   \                     ?0142:
    752                                  {
    753                                          char mins; 
    754                                          char secs; 
    755                                  
    756                                          mins = seconds / 60;
   \   000008FA   6B06....           MOV.W   @seconds:16,R6
   \   000008FE   7905003C           MOV.W   #60,R5
   \   00000902   17F6               EXTS.L  ER6
   \   00000904   01D05356           DIVXS.W R5,ER6
   \   00000908   0CE1               MOV.B   R6L,R1H
    757                                          secs = seconds % 60;
   \   0000090A   6B06....           MOV.W   @seconds:16,R6
   \   0000090E   17F6               EXTS.L  ER6
   \   00000910   01D05356           DIVXS.W R5,ER6
   \   00000914   0DE6               MOV.W   E6,R6
   \   00000916   0CE2               MOV.B   R6L,R2H
    758          
    759                                          if (!skin_screen_on)
   \   00000918   0C99               MOV.B   R1L,R1L
   \   0000091A   4606               BNE     ?0145
    760                                          {
    761                                                  skin_screen();
   \   0000091C   5C00FCCC           BSR     skin_screen
    762                                                  skin_screen_on = TRUE;
   \   00000920   F901               MOV.B   #1,R1L
   \                     ?0145:
    763                                          }
    764          
    765                                          if (!freeze_time)        /* Don't update diags if we have frozen display. */
   \   00000922   0CAA               MOV.B   R2L,R2L
   \   00000924   58600234           BNE     ?0181
    766                                          {
    767                                                  sprintf(g_str,"%01i:%02i", mins,secs);            
   \   00000928   0C2E               MOV.B   R2H,R6L
   \   0000092A   1756               EXTU.W  R6
   \   0000092C   6DF6               PUSH.W  R6
   \   0000092E   0C1E               MOV.B   R1H,R6L
   \   00000930   1756               EXTU.W  R6
   \   00000932   6DF6               PUSH.W  R6
   \   00000934   7A06....           MOV.L   #?0148,ER6
   \            ....    
   \   0000093A   01006DF6           PUSH.L  ER6
   \   0000093E   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000944   5E......           JSR     @sprintf:24
   \   00000948   79170008           ADD.W   #8,R7
    768                                                  glcd_print_string(0,text_lh,1,g_str);
   \   0000094C   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000952   01006DF6           PUSH.L  ER6
   \   00000956   FE01               MOV.B   #1,R6L
   \   00000958   6DF6               PUSH.W  R6
   \   0000095A   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000960   18EE               SUB.B   R6L,R6L
   \   00000962   5E......           JSR     @glcd_print_string:24
   \   00000966   79170006           ADD.W   #6,R7
    769          
    770                                                  /* [No diagnostics in these cases:] */
    771                                                  if ( !(param.filter || param.modulation || param.freq_cycling) )
   \   0000096A   6A0E....           MOV.B   @param+15:16,R6L
   \   0000096E   58600164           BNE     ?0150
   \   00000972   6A0E....           MOV.B   @param+14:16,R6L
   \   00000976   5860015C           BNE     ?0150
   \   0000097A   6A0E....           MOV.B   @param+16:16,R6L
   \   0000097E   58600154           BNE     ?0150
    772                                                  {
    773                                                          /* Diagnostics */
    774                                                          sprintf(g_str,"%3i %3i",initial_width,delta_width);     
   \   00000982   6B06....           MOV.W   @delta_width:16,R6
   \   00000986   6DF6               PUSH.W  R6
   \   00000988   6B06....           MOV.W   @initial_width:16,R6
   \   0000098C   6DF6               PUSH.W  R6
   \   0000098E   7A06....           MOV.L   #?0154,ER6
   \            ....    
   \   00000994   01006DF6           PUSH.L  ER6
   \   00000998   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   0000099E   5E......           JSR     @sprintf:24
   \   000009A2   79170008           ADD.W   #8,R7
    775                                                          glcd_print_string(3,text_lh,2,g_str);
   \   000009A6   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   000009AC   01006DF6           PUSH.L  ER6
   \   000009B0   FE02               MOV.B   #2,R6L
   \   000009B2   6DF6               PUSH.W  R6
   \   000009B4   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000009BA   FE03               MOV.B   #3,R6L
   \   000009BC   5E......           JSR     @glcd_print_string:24
   \   000009C0   79170006           ADD.W   #6,R7
    776          
    777                                                          sprintf(g_str,"%3i%c",this_width, dose? PLUS_ICON : ' ');                 
   \   000009C4   6A0E....           MOV.B   @dose:16,R6L
   \   000009C8   4706               BEQ     ?0157
   \   000009CA   79060089           MOV.W   #137,R6
   \   000009CE   4004               BRA     ?0158
   \                     ?0157:
   \   000009D0   79060020           MOV.W   #32,R6
   \                     ?0158:
   \   000009D4   6DF6               PUSH.W  R6
   \   000009D6   6B06....           MOV.W   @this_width:16,R6
   \   000009DA   6DF6               PUSH.W  R6
   \   000009DC   7A06....           MOV.L   #?0155,ER6
   \            ....    
   \   000009E2   01006DF6           PUSH.L  ER6
   \   000009E6   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   000009EC   5E......           JSR     @sprintf:24
   \   000009F0   79170008           ADD.W   #8,R7
    778                                                          glcd_print_string(5,text_lh,2,g_str);
   \   000009F4   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   000009FA   01006DF6           PUSH.L  ER6
   \   000009FE   FE02               MOV.B   #2,R6L
   \   00000A00   6DF6               PUSH.W  R6
   \   00000A02   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000A08   FE05               MOV.B   #5,R6L
   \   00000A0A   5E......           JSR     @glcd_print_string:24
   \   00000A0E   79170006           ADD.W   #6,R7
    779          
    780          
    781                                                          if (seconds >= RESPONSE_WAIT) /* Only show response if it's been evaluated. */
   \   00000A12   6B06....           MOV.W   @seconds:16,R6
   \   00000A16   79260005           CMP.W   #5,R6
   \   00000A1A   4D4C               BLT     ?0160
    782                                                          {
    783                                                                  sprintf(g_str,"%2i %2i",n_rings>>1 , response);           
   \   00000A1C   6A0E....           MOV.B   @response:16,R6L
   \   00000A20   17D6               EXTS.W  R6
   \   00000A22   6DF6               PUSH.W  R6
   \   00000A24   6A0E....           MOV.B   @n_rings:16,R6L
   \   00000A28   110E               SHLR.B  R6L
   \   00000A2A   1756               EXTU.W  R6
   \   00000A2C   6DF6               PUSH.W  R6
   \   00000A2E   7A06....           MOV.L   #?0161,ER6
   \            ....    
   \   00000A34   01006DF6           PUSH.L  ER6
   \   00000A38   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000A3E   5E......           JSR     @sprintf:24
   \   00000A42   79170008           ADD.W   #8,R7
    784                                                                  glcd_print_string(5,text_lh+46 ,1,g_str );
   \   00000A46   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000A4C   01006DF6           PUSH.L  ER6
   \   00000A50   FE01               MOV.B   #1,R6L
   \   00000A52   6DF6               PUSH.W  R6
   \   00000A54   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000A5A   8D2E               ADD.B   #46,R5L
   \   00000A5C   FE05               MOV.B   #5,R6L
   \   00000A5E   5E......           JSR     @glcd_print_string:24
   \   00000A62   79170006           ADD.W   #6,R7
    785                                                          }
    786                                                          else
   \   00000A66   4042               BRA     ?0162
   \                     ?0160:
    787                                                          {
    788                                                                  sprintf(g_str,"%2i  -",n_rings>>1);               
   \   00000A68   6A0E....           MOV.B   @n_rings:16,R6L
   \   00000A6C   110E               SHLR.B  R6L
   \   00000A6E   1756               EXTU.W  R6
   \   00000A70   6DF6               PUSH.W  R6
   \   00000A72   7A06....           MOV.L   #?0163,ER6
   \            ....    
   \   00000A78   01006DF6           PUSH.L  ER6
   \   00000A7C   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000A82   5E......           JSR     @sprintf:24
   \   00000A86   79170006           ADD.W   #6,R7
    789                                                                  glcd_print_string(5,text_lh+46 ,1,g_str );
   \   00000A8A   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00000A90   01006DF6           PUSH.L  ER6
   \   00000A94   FE01               MOV.B   #1,R6L
   \   00000A96   6DF6               PUSH.W  R6
   \   00000A98   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000A9E   8D2E               ADD.B   #46,R5L
   \   00000AA0   FE05               MOV.B   #5,R6L
   \   00000AA2   5E......           JSR     @glcd_print_string:24
   \   00000AA6   79170006           ADD.W   #6,R7
   \                     ?0162:
    790                                                          }
    791          
    792                                                          if (no_reading_count >= NO_READING_COUNT)
   \   00000AAA   6A0E....           MOV.B   @no_reading_count:16,R6L
   \   00000AAE   AE14               CMP.B   #20,R6L
   \   00000AB0   585000A8           BCS     ?0181
    793                                                          {
    794                                                                  glcd_print_string(6,text_lh,1,"* No Info *");
   \   00000AB4   7A06....           MOV.L   #?0166,ER6
   \            ....    
   \   00000ABA   01006DF6           PUSH.L  ER6
   \   00000ABE   FE01               MOV.B   #1,R6L
   \   00000AC0   6DF6               PUSH.W  R6
   \   00000AC2   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000AC8   FE06               MOV.B   #6,R6L
   \   00000ACA   5E......           JSR     @glcd_print_string:24
   \   00000ACE   79170006           ADD.W   #6,R7
    795                                                          }
    796          
    797                                                  }
    798                                                  else
   \   00000AD2   58000086           BRA     ?0181
   \                     ?0150:
    799                                                  {void bar_graph(char line, char col , char size , short max , short variable);
    800                                                          if (param.modulation)
   \   00000AD6   6A0E....           MOV.B   @param+14:16,R6L
   \   00000ADA   4722               BEQ     ?0169
    801                                                          {
    802                                                                  bar_graph( 4, text_lh , 60 ,param.strength , modulated_amp);
   \   00000ADC   6B06....           MOV.W   @modulated_amp:16,R6
   \   00000AE0   6DF6               PUSH.W  R6
   \   00000AE2   6B06....           MOV.W   @param+8:16,R6
   \   00000AE6   6DF6               PUSH.W  R6
   \   00000AE8   FE3C               MOV.B   #60,R6L
   \   00000AEA   6DF6               PUSH.W  R6
   \   00000AEC   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000AF2   FE04               MOV.B   #4,R6L
   \   00000AF4   5E......           JSR     @bar_graph:24
   \   00000AF8   79170006           ADD.W   #6,R7
   \   00000AFC   405E               BRA     ?0181
   \                     ?0169:
    803                                                          }
    804                                                          else if (param.freq_cycling)
   \   00000AFE   6A0E....           MOV.B   @param+16:16,R6L
   \   00000B02   473A               BEQ     ?0172
    805                                                          {
    806                                                                  bar_graph( 4, text_lh , 60 ,MOD_FREQ_MAX , frequency);
   \   00000B04   6B06....           MOV.W   @frequency:16,R6
   \   00000B08   6DF6               PUSH.W  R6
   \   00000B0A   79060078           MOV.W   #120,R6
   \   00000B0E   6DF6               PUSH.W  R6
   \   00000B10   FE3C               MOV.B   #60,R6L
   \   00000B12   6DF6               PUSH.W  R6
   \   00000B14   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000B1A   FE04               MOV.B   #4,R6L
   \   00000B1C   5E......           JSR     @bar_graph:24
   \   00000B20   79170006           ADD.W   #6,R7
    807                                                                  /* Beep once for each minute in FreCyc mode. */
    808                                                                  if ( mins != last_mins)
   \   00000B24   0C1E               MOV.B   R1H,R6L
   \   00000B26   1756               EXTU.W  R6
   \   00000B28   1D86               CMP.W   E0,R6
   \   00000B2A   4730               BEQ     ?0181
    809                                                                  {
    810                                                                          last_mins = mins;
   \   00000B2C   0C1E               MOV.B   R1H,R6L
   \   00000B2E   1756               EXTU.W  R6
   \   00000B30   0D68               MOV.W   R6,E0
    811                                                                          if (mins)
   \   00000B32   0C11               MOV.B   R1H,R1H
   \   00000B34   4726               BEQ     ?0181
    812                                                                          {
    813                                                                                  pip_n_times(mins);
   \   00000B36   0C1E               MOV.B   R1H,R6L
   \   00000B38   5E......           JSR     @pip_n_times:24
   \   00000B3C   401E               BRA     ?0181
   \                     ?0172:
    814                                                                          }
    815                                                                  }
    816                                                          }
    817                                                          else if (param.filter)
   \   00000B3E   6A0E....           MOV.B   @param+15:16,R6L
   \   00000B42   4718               BEQ     ?0181
    818                                                          {
    819                                                                  //PRINT "TS%li\r\n",timer_seconds(&power_off_timer) PREND
    820                                                  /* Power off warning control - has to be taken care of separately when in filter mode... */
    821                                                  if ( timer_done(&power_off_timer) )
   \   00000B44   7A06....           MOV.L   #power_off_timer,ER6
   \            ....    
   \   00000B4A   5E......           JSR     @timer_done:24
   \   00000B4E   0CEE               MOV.B   R6L,R6L
   \   00000B50   470A               BEQ     ?0181
    822                                                  {
    823                                                      menu = MENU_POWER_OFF;
   \   00000B52   FE0D               MOV.B   #13,R6L
   \   00000B54   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
    824                                                      return ;
    825                                                  }
   \   00000B5A   4064               BRA     ?0111
   \                     ?0181:
    826                                                          }
    827                                                  }
    828                                          }
    829          
    830                                          if (freeze_display)     /* Got a signal from the therapy code to freeze and warble. */
   \   00000B5C   6A0E....           MOV.B   @freeze_display:16,R6L
   \   00000B60   471C               BEQ     ?0183
    831                                          {
    832                                                  update_display();
   \   00000B62   5E......           JSR     @update_display:24
    833          
    834                                                  timer_go(&display_timer);
   \   00000B66   7A06....           MOV.L   #display_timer,ER6
   \            ....    
   \   00000B6C   5E......           JSR     @timer_go:24
    835                                                  warble(freeze_display);
   \   00000B70   6A0E....           MOV.B   @freeze_display:16,R6L
   \   00000B74   5E......           JSR     @warble:24
    836                                                  freeze_display = FALSE;
   \   00000B78   18EE               SUB.B   R6L,R6L
   \   00000B7A   6A8E....           MOV.B   R6L,@freeze_display:16
   \                     ?0183:
    837                                          }
    838          
    839                              /* Hold off auto power-down. */
    840                                          if (!param.filter)
   \   00000B7E   6A0E....           MOV.B   @param+15:16,R6L
   \   00000B82   4634               BNE     ?0190
    841                                  timer_go(&power_off_timer);
   \   00000B84   7A06....           MOV.L   #power_off_timer,ER6
   \            ....    
   \   00000B8A   5E......           JSR     @timer_go:24
    842                                  }
    843                                  else  /* Off-Skin display. */
   \   00000B8E   4028               BRA     ?0190
   \                     ?0141:
    844                                  {
    845                                          if (skin_screen_on)
   \   00000B90   0C99               MOV.B   R1L,R1L
   \   00000B92   4706               BEQ     ?0188
    846                                          {
    847                                                  main_screen();
   \   00000B94   5C00F9AA           BSR     main_screen
    848                                                  skin_screen_on = FALSE;
   \   00000B98   1899               SUB.B   R1L,R1L
   \                     ?0188:
    849                                          }
    850          
    851                                          print_battery_state_at_col( text_lh+5);
   \   00000B9A   6A2E....           MOV.B   @text_lh:32,R6L
   \            ....    
   \   00000BA0   8E05               ADD.B   #5,R6L
   \   00000BA2   5C00F784           BSR     print_battery_state_at_col
    852                                          #if 0  // Some useful debug.
    853                                          sprintf(g_str,"%3i %3i",this_width,n_rings>>1 );                  
    854                                          glcd_print_string(5,text_lh+18,1,g_str);
    855                                          #endif
    856                          /* Power off warning control */
    857                          if ( timer_done(&power_off_timer) )
   \   00000BA6   7A06....           MOV.L   #power_off_timer,ER6
   \            ....    
   \   00000BAC   5E......           JSR     @timer_done:24
   \   00000BB0   0CEE               MOV.B   R6L,R6L
   \   00000BB2   4704               BEQ     ?0190
    858                          {
    859                                                  power_down();
   \   00000BB4   5C00F656           BSR     power_down
   \                     ?0190:
    860                          }
    861                                  }
    862                          }
    863          
    864                          update_display();
   \   00000BB8   5E......           JSR     @update_display:24
    865          
    866                  }
    867          }       
   \   00000BBC   5800FBB4           BRA     ?0108
   \                     ?0111:
   \   00000BC0   6D72               POP.W   R2
   \   00000BC2   6D71               POP.W   R1
   \   00000BC4   01006D70           POP.L   ER0
   \   00000BC8   5470               RTS     
    868          
    869          
    870          
    871          
    872          /******************************************************************
    873          NAME            : menu_timeout
    874          PURPOSE         : Determing if a menu has timed out and should return 
    875                                    to the main menu.
    876          PARAMETERS      : char remember: TRUE if system should remember the current 
    877                                    menu to come back to.
    878          RETURNS         : If menu has timed out.
    879          SIDE-EFFECTS: NONE
    880          CALLED FROM : 
    881          *********************************************************************/
    882          
    883          
    884          char menu_timeout(char remember) 
    885          {
   \                     menu_timeout:
   \   00000BCA   6DF0               PUSH.W  R0
   \   00000BCC   0CE8               MOV.B   R6L,R0L
    886                  if (timer_done(&menu_timer))
   \   00000BCE   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00000BD4   5E......           JSR     @timer_done:24
   \   00000BD8   0CEE               MOV.B   R6L,R6L
   \   00000BDA   4724               BEQ     ?0193
    887                  {
    888                          if (remember)
   \   00000BDC   0C88               MOV.B   R0L,R0L
   \   00000BDE   470C               BEQ     ?0195
    889                                  last_menu = menu;
   \   00000BE0   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   00000BE6   6AAE....           MOV.B   R6L,@last_menu:32
   \            ....    
   \                     ?0195:
    890                          menu= 0;
   \   00000BEC   18EE               SUB.B   R6L,R6L
   \   00000BEE   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
    891                          beep_for(1);
   \   00000BF4   79060001           MOV.W   #1,R6
   \   00000BF8   5E......           JSR     @beep_for:24
    892                          return TRUE;
   \   00000BFC   FE01               MOV.B   #1,R6L
    893                  }
   \   00000BFE   4002               BRA     ?0196
   \                     ?0193:
    894                  return FALSE;
   \   00000C00   18EE               SUB.B   R6L,R6L
    895          }       
   \                     ?0196:
   \   00000C02   6D70               POP.W   R0
   \   00000C04   5470               RTS     
    896          
    897          
    898          void invert_char(char row, char col);
    899          
    900          /******************************************************************
    901          NAME            : menu_map
    902          PURPOSE         : Display a little map of the menus to give some indication
    903                                          of where the user is in the menu system.
    904          PARAMETERS      : NONE
    905          RETURNS         : NONE
    906          SIDE-EFFECTS: NONE
    907          CALLED FROM : 
    908          *********************************************************************/
    909          
    910          void menu_map()
    911          {
   \                     menu_map:
    912                  glcd_print_string(6,text_lh+30,1,"cfMFIg-");
   \   00000C06   7A06....           MOV.L   #?0197,ER6
   \            ....    
   \   00000C0C   01006DF6           PUSH.L  ER6
   \   00000C10   FE01               MOV.B   #1,R6L
   \   00000C12   6DF6               PUSH.W  R6
   \   00000C14   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000C1A   8D1E               ADD.B   #30,R5L
   \   00000C1C   FE06               MOV.B   #6,R6L
   \   00000C1E   5E......           JSR     @glcd_print_string:24
   \   00000C22   79170006           ADD.W   #6,R7
    913                  plot_sprite(5 ,text_lh+30+((menu-MENU_FIRST_IN_LIST)*6) , 1, 134);
   \   00000C26   FE86               MOV.B   #134,R6L
   \   00000C28   6DF6               PUSH.W  R6
   \   00000C2A   FE01               MOV.B   #1,R6L
   \   00000C2C   6DF6               PUSH.W  R6
   \   00000C2E   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   00000C34   8EFE               ADD.B   #254,R6L
   \   00000C36   FD06               MOV.B   #6,R5L
   \   00000C38   50E5               MULXU.B R6L,R5
   \   00000C3A   6A2E....           MOV.B   @text_lh:32,R6L
   \            ....    
   \   00000C40   08ED               ADD.B   R6L,R5L
   \   00000C42   8D1E               ADD.B   #30,R5L
   \   00000C44   FE05               MOV.B   #5,R6L
   \   00000C46   5E......           JSR     @plot_sprite:24
   \   00000C4A   0B97               ADDS.L  #4,ER7
    914                  
    915          
    916                  //glcd_print_string(6,text_lh+30+((menu-MENU_MODULATION)*6),1,"*");
    917          }       
   \   00000C4C   5470               RTS     
    918          
    919          /******************************************************************
    920          NAME            : gmenu_modulation
    921          PURPOSE         : Menu allowing setting of modulation.
    922          PARAMETERS      : NONE
    923          RETURNS         : NONE
    924          SIDE-EFFECTS: sets modulation.
    925          CALLED FROM : 
    926          *********************************************************************/
    927          
    928                  
    929          void menu_modulation()
    930          {
   \                     menu_modulation:
   \   00000C4E   6DF0               PUSH.W  R0
    931          #define PRINT_MOD  disp_modulation();
    932                  char button;
    933          
    934          
    935                  /* Draw the screen. */
    936                  clear_screen();
   \   00000C50   5E......           JSR     @clear_screen:24
    937                  glcd_print_string(1,text_lh,2,"Modulate");
   \   00000C54   7A06....           MOV.L   #?0198,ER6
   \            ....    
   \   00000C5A   01006DF6           PUSH.L  ER6
   \   00000C5E   FE02               MOV.B   #2,R6L
   \   00000C60   6DF6               PUSH.W  R6
   \   00000C62   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000C68   FE01               MOV.B   #1,R6L
   \   00000C6A   5E......           JSR     @glcd_print_string:24
   \   00000C6E   79170006           ADD.W   #6,R7
    938          
    939                  menu_icons(PLUS_ICON, MINUS_ICON, NEXT_ICON, PREV_ICON);
   \   00000C72   FE94               MOV.B   #148,R6L
   \   00000C74   6DF6               PUSH.W  R6
   \   00000C76   FE8E               MOV.B   #142,R6L
   \   00000C78   6DF6               PUSH.W  R6
   \   00000C7A   FD8A               MOV.B   #138,R5L
   \   00000C7C   FE89               MOV.B   #137,R6L
   \   00000C7E   5C00F6EA           BSR     menu_icons
   \   00000C82   0B97               ADDS.L  #4,ER7
    940                  button_auto_wait[1] = INIT_WAIT_MAX;
   \   00000C84   FE0A               MOV.B   #10,R6L
   \   00000C86   6AAE....           MOV.B   R6L,@button_auto_wait+1:32
   \            ....    
    941          
    942                  settings_icons();
   \   00000C8C   5C00F756           BSR     settings_icons
    943                  PRINT_MOD
   \   00000C90   5C00F87C           BSR     disp_modulation
    944          
    945                  menu_map();
   \   00000C94   5C00FF6E           BSR     menu_map
    946                  
    947                  update_display();
   \   00000C98   5E......           JSR     @update_display:24
    948          
    949                  timer_go(&menu_timer);
   \   00000C9C   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00000CA2   5E......           JSR     @timer_go:24
   \                     ?0200:
    950          
    951                  while (1)
   \   00000CA6   79060001           MOV.W   #1,R6
    952                  {
    953                          wait (30);
   \   00000CAA   1AE6               SUB.L   ER6,ER6
   \   00000CAC   FE1E               MOV.B   #30,R6L
   \   00000CAE   5E......           JSR     @wait:24
    954          
    955                          button = read_keypad_action();  
   \   00000CB2   5C00F5E6           BSR     read_keypad_action
   \   00000CB6   0CE8               MOV.B   R6L,R0L
    956          
    957                          if (menu_timeout(TRUE)) 
   \   00000CB8   FE01               MOV.B   #1,R6L
   \   00000CBA   5C00FF0C           BSR     menu_timeout
   \   00000CBE   0CEE               MOV.B   R6L,R6L
   \   00000CC0   5860009A           BNE     ?0199
    958                                  return ;
    959                                  
    960                          switch (button)
   \   00000CC4   A804               CMP.B   #4,R0L
   \   00000CC6   4622               BNE     ?0209
    961                          {
    962          
    963                                  case TOP_BUTTON:
    964                                          if (param.modulation < MODULATION_MAX)
   \   00000CC8   6A0E....           MOV.B   @param+14:16,R6L
   \   00000CCC   AE05               CMP.B   #5,R6L
   \   00000CCE   4414               BCC     ?0207
    965                                          {
    966                                                  ++param.modulation;
   \   00000CD0   6A0E....           MOV.B   @param+14:16,R6L
   \   00000CD4   8E01               ADD.B   #1,R6L
   \   00000CD6   6A8E....           MOV.B   R6L,@param+14:16
    967                                                  intensity_off();
   \   00000CDA   5E......           JSR     @intensity_off:24
    968                                                  freq_cycling_off();
   \   00000CDE   5E......           JSR     @freq_cycling_off:24
    969          
    970                                          }
    971                                          else
   \   00000CE2   4050               BRA     ?0204
   \                     ?0207:
    972                                                  end_beep();
   \   00000CE4   5E......           JSR     @end_beep:24
    973                                          break;
   \   00000CE8   404A               BRA     ?0204
   \                     ?0209:
   \   00000CEA   A803               CMP.B   #3,R0L
   \   00000CEC   461E               BNE     ?0215
    974          
    975                                  case MIDTOP_BUTTON:
    976                                          if (param.modulation > MODULATION_MIN)
   \   00000CEE   6A0E....           MOV.B   @param+14:16,R6L
   \   00000CF2   4712               BEQ     ?0211
    977                                          {
    978                                                  --param.modulation;
   \   00000CF4   6A0E....           MOV.B   @param+14:16,R6L
   \   00000CF8   8EFF               ADD.B   #-1,R6L
   \   00000CFA   6A8E....           MOV.B   R6L,@param+14:16
    979                                                  if (!param.modulation)
   \   00000CFE   4634               BNE     ?0204
    980                                                          modulation_off();
   \   00000D00   5E......           JSR     @modulation_off:24
    981                                          }
    982                                          else
   \   00000D04   402E               BRA     ?0204
   \                     ?0211:
    983                                                  end_beep();
   \   00000D06   5E......           JSR     @end_beep:24
    984                                          break;
   \   00000D0A   4028               BRA     ?0204
   \                     ?0215:
   \   00000D0C   A802               CMP.B   #2,R0L
   \   00000D0E   4610               BNE     ?0216
    985          
    986                                  case MIDBOT_BUTTON:
    987                                          menu++;
   \   00000D10   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   00000D16   8E01               ADD.B   #1,R6L
   \   00000D18   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
    988                                          return;
    989          
    990                                  case BOTTOM_BUTTON:
   \   00000D1E   403E               BRA     ?0199
   \                     ?0216:
   \   00000D20   A801               CMP.B   #1,R0L
   \   00000D22   4610               BNE     ?0204
    991                                          menu--;
   \   00000D24   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   00000D2A   8EFF               ADD.B   #-1,R6L
   \   00000D2C   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
    992                                          return;
    993                          }
   \   00000D32   402A               BRA     ?0199
   \                     ?0204:
    994          
    995                          /* Things to do if a button is pressed... */
    996                          if (button)
   \   00000D34   0C88               MOV.B   R0L,R0L
   \   00000D36   471A               BEQ     ?0218
    997                          {
    998                                  /* Update the value */
    999                                  PRINT_MOD
   \   00000D38   5C00F7D4           BSR     disp_modulation
   1000                                  settings_icons();
   \   00000D3C   5C00F6A6           BSR     settings_icons
   1001                                  update_display();
   \   00000D40   5E......           JSR     @update_display:24
   1002          
   1003                                  /* Audible signal */
   1004                                  //pip_n_times(param.modulation);
   1005          
   1006                                  reset_modulation();
   \   00000D44   5E......           JSR     @reset_modulation:24
   1007          
   1008                                  timer_go(&menu_timer);  /* Keep the menu alive */
   \   00000D48   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00000D4E   5E......           JSR     @timer_go:24
   \                     ?0218:
   1009                          }
   1010          
   1011                          /* Do the therapy stuff while in this menu */
   1012                          therapy_control();
   \   00000D52   5E......           JSR     @therapy_control:24
   1013                          modulate();
   \   00000D56   5E......           JSR     @modulate:24
   1014          
   1015          
   1016                  }
   1017          
   1018          
   1019          }
   \   00000D5A   5800FF48           BRA     ?0200
   \                     ?0199:
   \   00000D5E   6D70               POP.W   R0
   \   00000D60   5470               RTS     
   1020          
   1021          /******************************************************************
   1022          NAME            : gmenu_freq_cycle
   1023          PURPOSE         : Menu to turn frequency cycling on and off.
   1024          PARAMETERS      : NONE
   1025          RETURNS         : NONE
   1026          SIDE-EFFECTS: ...
   1027          CALLED FROM : 
   1028          *********************************************************************/
   1029          
   1030          #define PRINT_ON_OFF(A) glcd_print_string(3,text_lh+35,2,(A)? "On ":"Off");
   1031                  
   1032          void menu_freq_cycle()
   1033          {
   \                     menu_freq_cycle:
   \   00000D62   6DF0               PUSH.W  R0
   1034                  char button;
   1035          
   1036          
   1037                  /* Draw the screen. */
   1038                  clear_screen();
   \   00000D64   5E......           JSR     @clear_screen:24
   1039                  glcd_print_string(1,text_lh,2,"Freq Cyc");
   \   00000D68   7A06....           MOV.L   #?0220,ER6
   \            ....    
   \   00000D6E   01006DF6           PUSH.L  ER6
   \   00000D72   FE02               MOV.B   #2,R6L
   \   00000D74   6DF6               PUSH.W  R6
   \   00000D76   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000D7C   FE01               MOV.B   #1,R6L
   \   00000D7E   5E......           JSR     @glcd_print_string:24
   \   00000D82   79170006           ADD.W   #6,R7
   1040                  menu_icons(PLUS_ICON, MINUS_ICON, NEXT_ICON, PREV_ICON);
   \   00000D86   FE94               MOV.B   #148,R6L
   \   00000D88   6DF6               PUSH.W  R6
   \   00000D8A   FE8E               MOV.B   #142,R6L
   \   00000D8C   6DF6               PUSH.W  R6
   \   00000D8E   FD8A               MOV.B   #138,R5L
   \   00000D90   FE89               MOV.B   #137,R6L
   \   00000D92   5C00F5D6           BSR     menu_icons
   \   00000D96   0B97               ADDS.L  #4,ER7
   1041                  button_auto_wait[1] = INIT_WAIT_MAX;
   \   00000D98   FE0A               MOV.B   #10,R6L
   \   00000D9A   6AAE....           MOV.B   R6L,@button_auto_wait+1:32
   \            ....    
   1042                  settings_icons();
   \   00000DA0   5C00F642           BSR     settings_icons
   1043                  PRINT_ON_OFF(param.freq_cycling)
   \   00000DA4   6A0E....           MOV.B   @param+16:16,R6L
   \   00000DA8   4708               BEQ     ?0222
   \   00000DAA   7A06....           MOV.L   #?0223,ER6
   \            ....    
   \   00000DB0   4006               BRA     ?0224
   \                     ?0222:
   \   00000DB2   7A06....           MOV.L   #?0086,ER6
   \            ....    
   \                     ?0224:
   \   00000DB8   01006DF6           PUSH.L  ER6
   \   00000DBC   FE02               MOV.B   #2,R6L
   \   00000DBE   6DF6               PUSH.W  R6
   \   00000DC0   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000DC6   8D23               ADD.B   #35,R5L
   \   00000DC8   FE03               MOV.B   #3,R6L
   \   00000DCA   5E......           JSR     @glcd_print_string:24
   \   00000DCE   79170006           ADD.W   #6,R7
   1044          
   1045                  menu_map();
   \   00000DD2   5C00FE30           BSR     menu_map
   1046          
   1047                  update_display();
   \   00000DD6   5E......           JSR     @update_display:24
   1048          
   1049                  timer_go(&menu_timer);
   \   00000DDA   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00000DE0   5E......           JSR     @timer_go:24
   \                     ?0226:
   1050                  while (1)
   \   00000DE4   79060001           MOV.W   #1,R6
   1051                  {
   1052                          wait (30);
   \   00000DE8   1AE6               SUB.L   ER6,ER6
   \   00000DEA   FE1E               MOV.B   #30,R6L
   \   00000DEC   5E......           JSR     @wait:24
   1053                          button = read_keypad_action();  
   \   00000DF0   5C00F4A8           BSR     read_keypad_action
   \   00000DF4   0CE8               MOV.B   R6L,R0L
   1054                          if (menu_timeout(TRUE)) 
   \   00000DF6   FE01               MOV.B   #1,R6L
   \   00000DF8   5C00FDCE           BSR     menu_timeout
   \   00000DFC   0CEE               MOV.B   R6L,R6L
   \   00000DFE   586000AE           BNE     ?0225
   1055                                  return ;
   1056                          switch (button)
   \   00000E02   A804               CMP.B   #4,R0L
   \   00000E04   4618               BNE     ?0235
   1057                          {
   1058                                  case TOP_BUTTON:
   1059                                          if (!param.freq_cycling)
   \   00000E06   6A0E....           MOV.B   @param+16:16,R6L
   \   00000E0A   460C               BNE     ?0233
   1060                                          {
   1061                                                  param.freq_cycling = 1;
   \   00000E0C   FE01               MOV.B   #1,R6L
   \   00000E0E   6A8E....           MOV.B   R6L,@param+16:16
   1062                                                  modulation_off();
   \   00000E12   5E......           JSR     @modulation_off:24
   1063                                          }
   1064                                          else
   \   00000E16   404E               BRA     ?0230
   \                     ?0233:
   1065                                                  end_beep();
   \   00000E18   5E......           JSR     @end_beep:24
   1066                                          break;
   \   00000E1C   4048               BRA     ?0230
   \                     ?0235:
   \   00000E1E   A803               CMP.B   #3,R0L
   \   00000E20   461C               BNE     ?0239
   1067          
   1068                                  case MIDTOP_BUTTON:
   1069                                          if (param.freq_cycling)
   \   00000E22   6A0E....           MOV.B   @param+16:16,R6L
   \   00000E26   4710               BEQ     ?0237
   1070                                          {       /* we want to stick at the freq we got to... */
   1071                                                  //freq_cycling_off();  ... so we don't call this.
   1072                                                  param.freq_cycling = FALSE;     /* Turn off cycling */
   \   00000E28   18EE               SUB.B   R6L,R6L
   \   00000E2A   6A8E....           MOV.B   R6L,@param+16:16
   1073                                                  param.base_freq = frequency;    /* and stick here. */
   \   00000E2E   6B06....           MOV.W   @frequency:16,R6
   \   00000E32   6B86....           MOV.W   R6,@param+10:16
   1074                                          }
   1075                                          else
   \   00000E36   402E               BRA     ?0230
   \                     ?0237:
   1076                                                  end_beep();
   \   00000E38   5E......           JSR     @end_beep:24
   1077                                          break;
   \   00000E3C   4028               BRA     ?0230
   \                     ?0239:
   \   00000E3E   A802               CMP.B   #2,R0L
   \   00000E40   4610               BNE     ?0240
   1078          
   1079                                  case MIDBOT_BUTTON:
   1080                                          menu++;
   \   00000E42   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   00000E48   8E01               ADD.B   #1,R6L
   \   00000E4A   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1081                                          return;
   1082                                  case BOTTOM_BUTTON:
   \   00000E50   405E               BRA     ?0225
   \                     ?0240:
   \   00000E52   A801               CMP.B   #1,R0L
   \   00000E54   4610               BNE     ?0230
   1083                                          menu--;
   \   00000E56   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   00000E5C   8EFF               ADD.B   #-1,R6L
   \   00000E5E   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1084                                          return;
   1085                          }
   \   00000E64   404A               BRA     ?0225
   \                     ?0230:
   1086                          /* Things to do if a button is pressed... */
   1087                          if (button)
   \   00000E66   0C88               MOV.B   R0L,R0L
   \   00000E68   5870FF78           BEQ     ?0226
   1088                          {
   1089                                  /* Update the value */
   1090                                  PRINT_ON_OFF(param.freq_cycling)
   \   00000E6C   6A0E....           MOV.B   @param+16:16,R6L
   \   00000E70   4708               BEQ     ?0244
   \   00000E72   7A06....           MOV.L   #?0223,ER6
   \            ....    
   \   00000E78   4006               BRA     ?0245
   \                     ?0244:
   \   00000E7A   7A06....           MOV.L   #?0086,ER6
   \            ....    
   \                     ?0245:
   \   00000E80   01006DF6           PUSH.L  ER6
   \   00000E84   FE02               MOV.B   #2,R6L
   \   00000E86   6DF6               PUSH.W  R6
   \   00000E88   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000E8E   8D23               ADD.B   #35,R5L
   \   00000E90   FE03               MOV.B   #3,R6L
   \   00000E92   5E......           JSR     @glcd_print_string:24
   \   00000E96   79170006           ADD.W   #6,R7
   1091                                  settings_icons();
   \   00000E9A   5C00F548           BSR     settings_icons
   1092                                  update_display();
   \   00000E9E   5E......           JSR     @update_display:24
   1093                                  timer_go(&menu_timer);  /* Keep the menu alive */
   \   00000EA2   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00000EA8   5E......           JSR     @timer_go:24
   1094                          }
   1095                  }
   1096                  
   1097          }
   \   00000EAC   5800FF34           BRA     ?0226
   \                     ?0225:
   \   00000EB0   6D70               POP.W   R0
   \   00000EB2   5470               RTS     
   1098          
   1099          /******************************************************************
   1100          NAME            : gmenu_filter
   1101          PURPOSE         : Menu to turn the filter setting on and off.
   1102          PARAMETERS      : NONE
   1103          RETURNS         : NONE
   1104          SIDE-EFFECTS: filter.
   1105          CALLED FROM : 
   1106          *********************************************************************/
   1107                          
   1108          void menu_filter()
   1109          {
   \                     menu_filter:
   \   00000EB4   6DF0               PUSH.W  R0
   1110          
   1111                  char button;
   1112          
   1113          
   1114                  /* Draw the screen. */
   1115                  clear_screen();
   \   00000EB6   5E......           JSR     @clear_screen:24
   1116                  glcd_print_string(1,text_lh,2,"Filter");
   \   00000EBA   7A06....           MOV.L   #?0097,ER6
   \            ....    
   \   00000EC0   01006DF6           PUSH.L  ER6
   \   00000EC4   FE02               MOV.B   #2,R6L
   \   00000EC6   6DF6               PUSH.W  R6
   \   00000EC8   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000ECE   FE01               MOV.B   #1,R6L
   \   00000ED0   5E......           JSR     @glcd_print_string:24
   \   00000ED4   79170006           ADD.W   #6,R7
   1117                  menu_icons(PLUS_ICON, MINUS_ICON, NEXT_ICON, PREV_ICON);
   \   00000ED8   FE94               MOV.B   #148,R6L
   \   00000EDA   6DF6               PUSH.W  R6
   \   00000EDC   FE8E               MOV.B   #142,R6L
   \   00000EDE   6DF6               PUSH.W  R6
   \   00000EE0   FD8A               MOV.B   #138,R5L
   \   00000EE2   FE89               MOV.B   #137,R6L
   \   00000EE4   5C00F484           BSR     menu_icons
   \   00000EE8   0B97               ADDS.L  #4,ER7
   1118                  button_auto_wait[1] = INIT_WAIT_MAX;
   \   00000EEA   FE0A               MOV.B   #10,R6L
   \   00000EEC   6AAE....           MOV.B   R6L,@button_auto_wait+1:32
   \            ....    
   1119                  settings_icons();
   \   00000EF2   5C00F4F0           BSR     settings_icons
   1120                  PRINT_ON_OFF(param.filter)
   \   00000EF6   6A0E....           MOV.B   @param+15:16,R6L
   \   00000EFA   4708               BEQ     ?0248
   \   00000EFC   7A06....           MOV.L   #?0223,ER6
   \            ....    
   \   00000F02   4006               BRA     ?0249
   \                     ?0248:
   \   00000F04   7A06....           MOV.L   #?0086,ER6
   \            ....    
   \                     ?0249:
   \   00000F0A   01006DF6           PUSH.L  ER6
   \   00000F0E   FE02               MOV.B   #2,R6L
   \   00000F10   6DF6               PUSH.W  R6
   \   00000F12   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000F18   8D23               ADD.B   #35,R5L
   \   00000F1A   FE03               MOV.B   #3,R6L
   \   00000F1C   5E......           JSR     @glcd_print_string:24
   \   00000F20   79170006           ADD.W   #6,R7
   1121          
   1122                  menu_map();
   \   00000F24   5C00FCDE           BSR     menu_map
   1123          
   1124                  update_display();
   \   00000F28   5E......           JSR     @update_display:24
   1125          
   1126                  timer_go(&menu_timer);
   \   00000F2C   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00000F32   5E......           JSR     @timer_go:24
   \                     ?0251:
   1127                  while (1)
   \   00000F36   79060001           MOV.W   #1,R6
   1128                  {
   1129                          wait (30);
   \   00000F3A   1AE6               SUB.L   ER6,ER6
   \   00000F3C   FE1E               MOV.B   #30,R6L
   \   00000F3E   5E......           JSR     @wait:24
   1130                          button = read_keypad_action();  
   \   00000F42   5C00F356           BSR     read_keypad_action
   \   00000F46   0CE8               MOV.B   R6L,R0L
   1131                          if (menu_timeout(TRUE)) 
   \   00000F48   FE01               MOV.B   #1,R6L
   \   00000F4A   5C00FC7C           BSR     menu_timeout
   \   00000F4E   0CEE               MOV.B   R6L,R6L
   \   00000F50   586000AA           BNE     ?0250
   1132                                  return ;
   1133                          switch (button)
   \   00000F54   A804               CMP.B   #4,R0L
   \   00000F56   4618               BNE     ?0260
   1134                          {
   1135                                  case TOP_BUTTON:
   1136                                          if (!param.filter)
   \   00000F58   6A0E....           MOV.B   @param+15:16,R6L
   \   00000F5C   460C               BNE     ?0258
   1137                                                  filter_bit = param.filter = 1;
   \   00000F5E   FE01               MOV.B   #1,R6L
   \   00000F60   6A8E....           MOV.B   R6L,@param+15:16
   \   00000F64   7F617020           BSET    #2,@0xFFFFFF61
   1138                                          else
   \   00000F68   404A               BRA     ?0255
   \                     ?0258:
   1139                                                  end_beep();
   \   00000F6A   5E......           JSR     @end_beep:24
   1140                                          break;
   \   00000F6E   4044               BRA     ?0255
   \                     ?0260:
   \   00000F70   A803               CMP.B   #3,R0L
   \   00000F72   4618               BNE     ?0264
   1141          
   1142                                  case MIDTOP_BUTTON:
   1143                                          if (param.filter)
   \   00000F74   6A0E....           MOV.B   @param+15:16,R6L
   \   00000F78   470C               BEQ     ?0262
   1144                                                  filter_bit = param.filter = 0;
   \   00000F7A   18EE               SUB.B   R6L,R6L
   \   00000F7C   6A8E....           MOV.B   R6L,@param+15:16
   \   00000F80   7F617220           BCLR    #2,@0xFFFFFF61
   1145                                          else
   \   00000F84   402E               BRA     ?0255
   \                     ?0262:
   1146                                                  end_beep();
   \   00000F86   5E......           JSR     @end_beep:24
   1147                                          break;
   \   00000F8A   4028               BRA     ?0255
   \                     ?0264:
   \   00000F8C   A802               CMP.B   #2,R0L
   \   00000F8E   4610               BNE     ?0265
   1148          
   1149                                  case MIDBOT_BUTTON:
   1150                                          menu++;
   \   00000F90   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   00000F96   8E01               ADD.B   #1,R6L
   \   00000F98   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1151                                          return;
   1152                                  case BOTTOM_BUTTON:
   \   00000F9E   405E               BRA     ?0250
   \                     ?0265:
   \   00000FA0   A801               CMP.B   #1,R0L
   \   00000FA2   4610               BNE     ?0255
   1153                                          menu--;
   \   00000FA4   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   00000FAA   8EFF               ADD.B   #-1,R6L
   \   00000FAC   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1154                                          return;
   1155                          }
   \   00000FB2   404A               BRA     ?0250
   \                     ?0255:
   1156                          /* Things to do if a button is pressed... */
   1157                          if (button)
   \   00000FB4   0C88               MOV.B   R0L,R0L
   \   00000FB6   5870FF7C           BEQ     ?0251
   1158                          {
   1159                                  /* Update the value */
   1160                                  PRINT_ON_OFF(param.filter)
   \   00000FBA   6A0E....           MOV.B   @param+15:16,R6L
   \   00000FBE   4708               BEQ     ?0269
   \   00000FC0   7A06....           MOV.L   #?0223,ER6
   \            ....    
   \   00000FC6   4006               BRA     ?0270
   \                     ?0269:
   \   00000FC8   7A06....           MOV.L   #?0086,ER6
   \            ....    
   \                     ?0270:
   \   00000FCE   01006DF6           PUSH.L  ER6
   \   00000FD2   FE02               MOV.B   #2,R6L
   \   00000FD4   6DF6               PUSH.W  R6
   \   00000FD6   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00000FDC   8D23               ADD.B   #35,R5L
   \   00000FDE   FE03               MOV.B   #3,R6L
   \   00000FE0   5E......           JSR     @glcd_print_string:24
   \   00000FE4   79170006           ADD.W   #6,R7
   1161                                  settings_icons();
   \   00000FE8   5C00F3FA           BSR     settings_icons
   1162                                  update_display();
   \   00000FEC   5E......           JSR     @update_display:24
   1163                                  timer_go(&menu_timer);  /* Keep the menu alive */
   \   00000FF0   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00000FF6   5E......           JSR     @timer_go:24
   1164                          }
   1165                  }
   1166          }
   \   00000FFA   5800FF38           BRA     ?0251
   \                     ?0250:
   \   00000FFE   6D70               POP.W   R0
   \   00001000   5470               RTS     
   1167          
   1168          /******************************************************************
   1169          NAME            : gmenu_intensity
   1170          PURPOSE         : Menu to set the intensity.
   1171          PARAMETERS      : NONE
   1172          RETURNS         : NONE
   1173          SIDE-EFFECTS: ...
   1174          CALLED FROM : 
   1175          *********************************************************************/
   1176                  
   1177          void menu_intensity()
   1178          {
   \                     menu_intensity:
   \   00001002   6DF0               PUSH.W  R0
   1179          #define PRINT_INT print_big_value(param.pulse_out_number);
   1180          
   1181          
   1182                  char button;
   1183          
   1184                  /* Draw the screen. */
   1185                  clear_screen();
   \   00001004   5E......           JSR     @clear_screen:24
   1186                  glcd_print_string(1,text_lh,2,"Intensity");
   \   00001008   7A06....           MOV.L   #?0272,ER6
   \            ....    
   \   0000100E   01006DF6           PUSH.L  ER6
   \   00001012   FE02               MOV.B   #2,R6L
   \   00001014   6DF6               PUSH.W  R6
   \   00001016   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   0000101C   FE01               MOV.B   #1,R6L
   \   0000101E   5E......           JSR     @glcd_print_string:24
   \   00001022   79170006           ADD.W   #6,R7
   1187                  menu_icons(PLUS_ICON, MINUS_ICON, NEXT_ICON, PREV_ICON);
   \   00001026   FE94               MOV.B   #148,R6L
   \   00001028   6DF6               PUSH.W  R6
   \   0000102A   FE8E               MOV.B   #142,R6L
   \   0000102C   6DF6               PUSH.W  R6
   \   0000102E   FD8A               MOV.B   #138,R5L
   \   00001030   FE89               MOV.B   #137,R6L
   \   00001032   5C00F336           BSR     menu_icons
   \   00001036   0B97               ADDS.L  #4,ER7
   1188                  button_auto_wait[1] = INIT_WAIT_MAX;
   \   00001038   FE0A               MOV.B   #10,R6L
   \   0000103A   6AAE....           MOV.B   R6L,@button_auto_wait+1:32
   \            ....    
   1189                  settings_icons();
   \   00001040   5C00F3A2           BSR     settings_icons
   1190                  PRINT_INT
   \   00001044   6A0E....           MOV.B   @param+12:16,R6L
   \   00001048   1756               EXTU.W  R6
   \   0000104A   5C00F486           BSR     print_big_value
   1191                  menu_map();
   \   0000104E   5C00FBB4           BSR     menu_map
   1192                  update_display();
   \   00001052   5E......           JSR     @update_display:24
   1193          
   1194                  timer_go(&menu_timer);
   \   00001056   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   0000105C   5E......           JSR     @timer_go:24
   \                     ?0274:
   1195          
   1196          
   1197          
   1198                  while (1)
   \   00001060   79060001           MOV.W   #1,R6
   1199                  {
   1200                          wait (30);
   \   00001064   1AE6               SUB.L   ER6,ER6
   \   00001066   FE1E               MOV.B   #30,R6L
   \   00001068   5E......           JSR     @wait:24
   1201          
   1202                          button = read_keypad_action();  
   \   0000106C   5C00F22C           BSR     read_keypad_action
   \   00001070   0CE8               MOV.B   R6L,R0L
   1203          
   1204                          if (menu_timeout(TRUE)) 
   \   00001072   FE01               MOV.B   #1,R6L
   \   00001074   5C00FB52           BSR     menu_timeout
   \   00001078   0CEE               MOV.B   R6L,R6L
   \   0000107A   58600096           BNE     ?0273
   1205                                  return ;
   1206                                  
   1207                          switch (button)
   \   0000107E   A804               CMP.B   #4,R0L
   \   00001080   4622               BNE     ?0283
   1208                          {
   1209          
   1210                                  case TOP_BUTTON:
   1211                                          if (param.pulse_out_number < INTENSITY_MAX)
   \   00001082   6A0E....           MOV.B   @param+12:16,R6L
   \   00001086   AE08               CMP.B   #8,R6L
   \   00001088   4414               BCC     ?0281
   1212                                          {
   1213                                                  param.pulse_out_number++;
   \   0000108A   6A0E....           MOV.B   @param+12:16,R6L
   \   0000108E   8E01               ADD.B   #1,R6L
   \   00001090   6A8E....           MOV.B   R6L,@param+12:16
   1214                                                  set_pulse_period(); 
   \   00001094   5E......           JSR     @set_pulse_period:24
   1215          
   1216                                                  modulation_off();       /* Turn off mod if we turn on intensity. */
   \   00001098   5E......           JSR     @modulation_off:24
   1217          
   1218                                          }
   1219                                          else
   \   0000109C   4050               BRA     ?0278
   \                     ?0281:
   1220                                                  end_beep();
   \   0000109E   5E......           JSR     @end_beep:24
   1221                                          break;
   \   000010A2   404A               BRA     ?0278
   \                     ?0283:
   \   000010A4   A803               CMP.B   #3,R0L
   \   000010A6   461E               BNE     ?0287
   1222          
   1223                                  case MIDTOP_BUTTON:
   1224                                          if (param.pulse_out_number > INTENSITY_MIN)
   \   000010A8   6A0E....           MOV.B   @param+12:16,R6L
   \   000010AC   AE01               CMP.B   #1,R6L
   \   000010AE   4310               BLS     ?0285
   1225                                          {
   1226                                                  param.pulse_out_number--;
   \   000010B0   6A0E....           MOV.B   @param+12:16,R6L
   \   000010B4   8EFF               ADD.B   #-1,R6L
   \   000010B6   6A8E....           MOV.B   R6L,@param+12:16
   1227                                                  set_pulse_period(); 
   \   000010BA   5E......           JSR     @set_pulse_period:24
   1228                                          }
   1229                                          else
   \   000010BE   402E               BRA     ?0278
   \                     ?0285:
   1230                                                  end_beep();
   \   000010C0   5E......           JSR     @end_beep:24
   1231                                          break;
   \   000010C4   4028               BRA     ?0278
   \                     ?0287:
   \   000010C6   A802               CMP.B   #2,R0L
   \   000010C8   4610               BNE     ?0288
   1232          
   1233                                  case MIDBOT_BUTTON:
   1234                                          menu++;
   \   000010CA   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   000010D0   8E01               ADD.B   #1,R6L
   \   000010D2   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1235                                          return;
   1236          
   1237                                  case BOTTOM_BUTTON:
   \   000010D8   403A               BRA     ?0273
   \                     ?0288:
   \   000010DA   A801               CMP.B   #1,R0L
   \   000010DC   4610               BNE     ?0278
   1238                                          menu--;
   \   000010DE   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   000010E4   8EFF               ADD.B   #-1,R6L
   \   000010E6   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1239                                          return;
   1240                          }
   \   000010EC   4026               BRA     ?0273
   \                     ?0278:
   1241          
   1242                          /* Things to do if a button is pressed... */
   1243                          if (button)
   \   000010EE   0C88               MOV.B   R0L,R0L
   \   000010F0   5870FF6C           BEQ     ?0274
   1244                          {
   1245                                  /* Update the value */
   1246                                  PRINT_INT
   \   000010F4   6A0E....           MOV.B   @param+12:16,R6L
   \   000010F8   1756               EXTU.W  R6
   \   000010FA   5C00F3D6           BSR     print_big_value
   1247                                  settings_icons();
   \   000010FE   5C00F2E4           BSR     settings_icons
   1248                                  update_display();
   \   00001102   5E......           JSR     @update_display:24
   1249          
   1250                                  /* Audible signal */
   1251                                  //pip_n_times(param.pulse_out_number);
   1252          
   1253                                  timer_go(&menu_timer);  /* Keep the menu alive */
   \   00001106   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   0000110C   5E......           JSR     @timer_go:24
   1254                          }
   1255                  }
   1256          }
   \   00001110   5800FF4C           BRA     ?0274
   \                     ?0273:
   \   00001114   6D70               POP.W   R0
   \   00001116   5470               RTS     
   1257                  
   1258          
   1259          /******************************************************************
   1260          NAME            : gmenu_interpulse
   1261          PURPOSE         : Menu to set the inter-pulse time for intensity.
   1262          PARAMETERS      : NONE
   1263          RETURNS         : NONE
   1264          SIDE-EFFECTS: ...
   1265          CALLED FROM : 
   1266          *********************************************************************/
   1267          
   1268          void menu_interpulse()
   1269          {
   \                     menu_interpulse:
   \   00001118   6DF0               PUSH.W  R0
   1270                  char button;
   1271          
   1272          
   1273                  /* Draw the screen. */
   1274                  clear_screen();
   \   0000111A   5E......           JSR     @clear_screen:24
   1275                  glcd_print_string(1,text_lh,2,"Int Gap");
   \   0000111E   7A06....           MOV.L   #?0292,ER6
   \            ....    
   \   00001124   01006DF6           PUSH.L  ER6
   \   00001128   FE02               MOV.B   #2,R6L
   \   0000112A   6DF6               PUSH.W  R6
   \   0000112C   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001132   FE01               MOV.B   #1,R6L
   \   00001134   5E......           JSR     @glcd_print_string:24
   \   00001138   79170006           ADD.W   #6,R7
   1276                  menu_icons(PLUS_ICON, MINUS_ICON, NEXT_ICON, PREV_ICON);
   \   0000113C   FE94               MOV.B   #148,R6L
   \   0000113E   6DF6               PUSH.W  R6
   \   00001140   FE8E               MOV.B   #142,R6L
   \   00001142   6DF6               PUSH.W  R6
   \   00001144   FD8A               MOV.B   #138,R5L
   \   00001146   FE89               MOV.B   #137,R6L
   \   00001148   5C00F220           BSR     menu_icons
   \   0000114C   0B97               ADDS.L  #4,ER7
   1277                  button_auto_wait[1] = INIT_WAIT_MAX;
   \   0000114E   FE0A               MOV.B   #10,R6L
   \   00001150   6AAE....           MOV.B   R6L,@button_auto_wait+1:32
   \            ....    
   1278                  settings_icons();
   \   00001156   5C00F28C           BSR     settings_icons
   1279                  print_big_value(param.z_value);
   \   0000115A   6A0E....           MOV.B   @param+13:16,R6L
   \   0000115E   1756               EXTU.W  R6
   \   00001160   5C00F370           BSR     print_big_value
   1280                  menu_map();
   \   00001164   5C00FA9E           BSR     menu_map
   1281                  update_display();
   \   00001168   5E......           JSR     @update_display:24
   1282          
   1283                  timer_go(&menu_timer);
   \   0000116C   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00001172   5E......           JSR     @timer_go:24
   \                     ?0294:
   1284          
   1285                  while (1)
   \   00001176   79060001           MOV.W   #1,R6
   1286                  {
   1287                          wait (30);
   \   0000117A   1AE6               SUB.L   ER6,ER6
   \   0000117C   FE1E               MOV.B   #30,R6L
   \   0000117E   5E......           JSR     @wait:24
   1288          
   1289                          button = read_keypad_action();  
   \   00001182   5C00F116           BSR     read_keypad_action
   \   00001186   0CE8               MOV.B   R6L,R0L
   1290          
   1291                          if (menu_timeout(TRUE)) 
   \   00001188   FE01               MOV.B   #1,R6L
   \   0000118A   5C00FA3C           BSR     menu_timeout
   \   0000118E   0CEE               MOV.B   R6L,R6L
   \   00001190   5860008E           BNE     ?0293
   1292                                  return ;
   1293                                  
   1294                          switch (button)
   \   00001194   A804               CMP.B   #4,R0L
   \   00001196   461E               BNE     ?0303
   1295                          {
   1296          
   1297                                  case TOP_BUTTON:
   1298                                          if (param.z_value < Z_MAX)
   \   00001198   6A0E....           MOV.B   @param+13:16,R6L
   \   0000119C   AE50               CMP.B   #80,R6L
   \   0000119E   4410               BCC     ?0301
   1299                                          {
   1300                                                  param.z_value++;
   \   000011A0   6A0E....           MOV.B   @param+13:16,R6L
   \   000011A4   8E01               ADD.B   #1,R6L
   \   000011A6   6A8E....           MOV.B   R6L,@param+13:16
   1301                                                  set_pulse_period(); 
   \   000011AA   5E......           JSR     @set_pulse_period:24
   1302                                          }
   1303                                          else
   \   000011AE   4050               BRA     ?0298
   \                     ?0301:
   1304                                                  end_beep();
   \   000011B0   5E......           JSR     @end_beep:24
   1305                                          break;
   \   000011B4   404A               BRA     ?0298
   \                     ?0303:
   \   000011B6   A803               CMP.B   #3,R0L
   \   000011B8   461E               BNE     ?0307
   1306          
   1307                                  case MIDTOP_BUTTON:
   1308                                          if (param.z_value > Z_MIN)
   \   000011BA   6A0E....           MOV.B   @param+13:16,R6L
   \   000011BE   AE0A               CMP.B   #10,R6L
   \   000011C0   4310               BLS     ?0305
   1309                                          {
   1310                                                  param.z_value--;
   \   000011C2   6A0E....           MOV.B   @param+13:16,R6L
   \   000011C6   8EFF               ADD.B   #-1,R6L
   \   000011C8   6A8E....           MOV.B   R6L,@param+13:16
   1311                                                  set_pulse_period(); 
   \   000011CC   5E......           JSR     @set_pulse_period:24
   1312                                          }
   1313                                          else
   \   000011D0   402E               BRA     ?0298
   \                     ?0305:
   1314                                                  end_beep();
   \   000011D2   5E......           JSR     @end_beep:24
   1315                                          break;
   \   000011D6   4028               BRA     ?0298
   \                     ?0307:
   \   000011D8   A802               CMP.B   #2,R0L
   \   000011DA   4610               BNE     ?0308
   1316          
   1317                                  case MIDBOT_BUTTON:
   1318                                          menu++;
   \   000011DC   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   000011E2   8E01               ADD.B   #1,R6L
   \   000011E4   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1319                                          return;
   1320          
   1321                                  case BOTTOM_BUTTON:
   \   000011EA   4036               BRA     ?0293
   \                     ?0308:
   \   000011EC   A801               CMP.B   #1,R0L
   \   000011EE   4610               BNE     ?0298
   1322                                          menu--;
   \   000011F0   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   000011F6   8EFF               ADD.B   #-1,R6L
   \   000011F8   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1323                                          return;
   1324                          }
   \   000011FE   4022               BRA     ?0293
   \                     ?0298:
   1325          
   1326                          /* Things to do if a button is pressed... */
   1327                          if (button)
   \   00001200   0C88               MOV.B   R0L,R0L
   \   00001202   5870FF70           BEQ     ?0294
   1328                          {
   1329                                  /* Update the value */
   1330                                  print_big_value(param.z_value);
   \   00001206   6A0E....           MOV.B   @param+13:16,R6L
   \   0000120A   1756               EXTU.W  R6
   \   0000120C   5C00F2C4           BSR     print_big_value
   1331                                  update_display();
   \   00001210   5E......           JSR     @update_display:24
   1332                                  timer_go(&menu_timer);  /* Keep the menu alive */
   \   00001214   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   0000121A   5E......           JSR     @timer_go:24
   1333                          }
   1334                  }
   1335          }
   \   0000121E   5800FF54           BRA     ?0294
   \                     ?0293:
   \   00001222   6D70               POP.W   R0
   \   00001224   5470               RTS     
   1336          
   1337          /******************************************************************
   1338          NAME            : gmenu_freq
   1339          PURPOSE         : menu to set the frequency.
   1340          PARAMETERS      : NONE
   1341          RETURNS         : NONE
   1342          SIDE-EFFECTS: ...
   1343          CALLED FROM : 
   1344          *********************************************************************/
   1345          
   1346                  
   1347          void menu_freq()
   1348          {
   \                     menu_freq:
   \   00001226   01006DF0           PUSH.L  ER0
   \   0000122A   6DF1               PUSH.W  R1
   1349          
   1350          
   1351                  char button;
   1352                  char increment=0;
   1353          
   1354          
   1355                  /* Draw the screen. */
   1356                  clear_screen();
   \   0000122C   5E......           JSR     @clear_screen:24
   1357                  glcd_print_string(1,text_lh,2,"Frequency");
   \   00001230   7A06....           MOV.L   #?0312,ER6
   \            ....    
   \   00001236   01006DF6           PUSH.L  ER6
   \   0000123A   FE02               MOV.B   #2,R6L
   \   0000123C   6DF6               PUSH.W  R6
   \   0000123E   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001244   FE01               MOV.B   #1,R6L
   \   00001246   5E......           JSR     @glcd_print_string:24
   \   0000124A   79170006           ADD.W   #6,R7
   1358                  if (param.freq_cycling)
   \   0000124E   1888               SUB.B   R0L,R0L
   \   00001250   6A0E....           MOV.B   @param+16:16,R6L
   \   00001254   4720               BEQ     ?0314
   1359                          glcd_print_string(3,text_lh+70,1,"Cyc");
   \   00001256   7A06....           MOV.L   #?0315,ER6
   \            ....    
   \   0000125C   01006DF6           PUSH.L  ER6
   \   00001260   FE01               MOV.B   #1,R6L
   \   00001262   6DF6               PUSH.W  R6
   \   00001264   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   0000126A   8D46               ADD.B   #70,R5L
   \   0000126C   FE03               MOV.B   #3,R6L
   \   0000126E   5E......           JSR     @glcd_print_string:24
   \   00001272   79170006           ADD.W   #6,R7
   \                     ?0314:
   1360          
   1361                  menu_icons(PLUS_ICON, MINUS_ICON, NEXT_ICON, PREV_ICON);
   \   00001276   FE94               MOV.B   #148,R6L
   \   00001278   6DF6               PUSH.W  R6
   \   0000127A   FE8E               MOV.B   #142,R6L
   \   0000127C   6DF6               PUSH.W  R6
   \   0000127E   FD8A               MOV.B   #138,R5L
   \   00001280   FE89               MOV.B   #137,R6L
   \   00001282   5C00F0E6           BSR     menu_icons
   \   00001286   0B97               ADDS.L  #4,ER7
   1362                  button_auto_wait[1] = INIT_WAIT_MAX;
   \   00001288   FE0A               MOV.B   #10,R6L
   \   0000128A   6AAE....           MOV.B   R6L,@button_auto_wait+1:32
   \            ....    
   1363                  settings_icons();
   \   00001290   5C00F152           BSR     settings_icons
   1364                  print_big_value(param.base_freq);
   \   00001294   6B06....           MOV.W   @param+10:16,R6
   \   00001298   5C00F238           BSR     print_big_value
   1365                  menu_map();
   \   0000129C   5C00F966           BSR     menu_map
   1366                  update_display();
   \   000012A0   5E......           JSR     @update_display:24
   1367          
   1368                  timer_go(&menu_timer);
   \   000012A4   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   000012AA   5E......           JSR     @timer_go:24
   \                     ?0317:
   1369          
   1370                  while (1)
   \   000012AE   79060001           MOV.W   #1,R6
   1371                  {
   1372                          wait (30);
   \   000012B2   1AE6               SUB.L   ER6,ER6
   \   000012B4   FE1E               MOV.B   #30,R6L
   \   000012B6   5E......           JSR     @wait:24
   1373          
   1374                          button = read_keypad_action();  
   \   000012BA   5C00EFDE           BSR     read_keypad_action
   \   000012BE   0CE9               MOV.B   R6L,R1L
   1375          
   1376                          if (menu_timeout(TRUE)) 
   \   000012C0   FE01               MOV.B   #1,R6L
   \   000012C2   5C00F904           BSR     menu_timeout
   \   000012C6   0CEE               MOV.B   R6L,R6L
   \   000012C8   5860012E           BNE     ?0316
   1377                                  return ;
   1378                                  
   1379                          switch (button)
   \   000012CC   A904               CMP.B   #4,R1L
   \   000012CE   4642               BNE     ?0330
   1380                          {
   1381          
   1382                                  case TOP_BUTTON:
   1383                                          if (frequency < FREQ_MAX  && !param.freq_cycling)
   \   000012D0   6B06....           MOV.W   @frequency:16,R6
   \   000012D4   7926015E           CMP.W   #350,R6
   \   000012D8   4C32               BGE     ?0324
   \   000012DA   6A0E....           MOV.B   @param+16:16,R6L
   \   000012DE   462C               BNE     ?0324
   1384                                          {
   1385                              /* Go faster at higher values - and take care to hit the same values coming down. */
   1386                                                  increment = (frequency) / 50;
   \   000012E0   6B00....           MOV.W   @frequency:16,R0
   \   000012E4   79060032           MOV.W   #50,R6
   \   000012E8   17F0               EXTS.L  ER0
   \   000012EA   01D05360           DIVXS.W R6,ER0
   1387                                                  if (!increment)
   \   000012EE   0C88               MOV.B   R0L,R0L
   \   000012F0   4602               BNE     ?0328
   1388                                                          increment = 1;
   \   000012F2   F801               MOV.B   #1,R0L
   \                     ?0328:
   1389          
   1390          
   1391                                                  param.base_freq = frequency +=increment;
   \   000012F4   0C8E               MOV.B   R0L,R6L
   \   000012F6   1756               EXTU.W  R6
   \   000012F8   6B05....           MOV.W   @frequency:16,R5
   \   000012FC   0965               ADD.W   R6,R5
   \   000012FE   6B85....           MOV.W   R5,@frequency:16
   \   00001302   6B85....           MOV.W   R5,@param+10:16
   1392                                                  set_pulse_period(); 
   \   00001306   5E......           JSR     @set_pulse_period:24
   1393                                          }
   1394                                          else
   \   0000130A   407C               BRA     ?0321
   \                     ?0324:
   1395                                                  end_beep();
   \   0000130C   5E......           JSR     @end_beep:24
   1396                                          break;
   \   00001310   4076               BRA     ?0321
   \                     ?0330:
   \   00001312   A903               CMP.B   #3,R1L
   \   00001314   4648               BNE     ?0338
   1397          
   1398                                  case MIDTOP_BUTTON:
   1399                                          if (frequency > FREQ_MIN  && !param.freq_cycling)
   \   00001316   6B06....           MOV.W   @frequency:16,R6
   \   0000131A   7926000F           CMP.W   #15,R6
   \   0000131E   4F38               BLE     ?0332
   \   00001320   6A0E....           MOV.B   @param+16:16,R6L
   \   00001324   4632               BNE     ?0332
   1400                                          {
   1401                              /* Go faster at higher values - and take care to hit the same values coming down. */
   1402                                                  increment = (frequency-increment) / 50;
   \   00001326   6B06....           MOV.W   @frequency:16,R6
   \   0000132A   1750               EXTU.W  R0
   \   0000132C   1906               SUB.W   R0,R6
   \   0000132E   79050032           MOV.W   #50,R5
   \   00001332   0D60               MOV.W   R6,R0
   \   00001334   17F0               EXTS.L  ER0
   \   00001336   01D05350           DIVXS.W R5,ER0
   1403                                                  if (!increment)
   \   0000133A   0C88               MOV.B   R0L,R0L
   \   0000133C   4602               BNE     ?0336
   1404                                                          increment = 1;
   \   0000133E   F801               MOV.B   #1,R0L
   \                     ?0336:
   1405          
   1406          
   1407                                                  param.base_freq = frequency-=increment;
   \   00001340   0C8E               MOV.B   R0L,R6L
   \   00001342   1756               EXTU.W  R6
   \   00001344   6B05....           MOV.W   @frequency:16,R5
   \   00001348   1965               SUB.W   R6,R5
   \   0000134A   6B85....           MOV.W   R5,@frequency:16
   \   0000134E   6B85....           MOV.W   R5,@param+10:16
   1408                                                  set_pulse_period(); 
   \   00001352   5E......           JSR     @set_pulse_period:24
   1409                                          }
   1410                                          else
   \   00001356   4030               BRA     ?0321
   \                     ?0332:
   1411                                                  end_beep();
   \   00001358   5E......           JSR     @end_beep:24
   1412                                          break;
   \   0000135C   402A               BRA     ?0321
   \                     ?0338:
   \   0000135E   A902               CMP.B   #2,R1L
   \   00001360   4612               BNE     ?0339
   1413          
   1414          
   1415                                  case MIDBOT_BUTTON:
   1416                                          menu++;
   \   00001362   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   00001368   8E01               ADD.B   #1,R6L
   \   0000136A   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1417                                          return;
   1418          
   1419                                  case BOTTOM_BUTTON:
   \   00001370   58000086           BRA     ?0316
   \                     ?0339:
   \   00001374   A901               CMP.B   #1,R1L
   \   00001376   4610               BNE     ?0321
   1420                                          menu--;
   \   00001378   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   0000137E   8EFF               ADD.B   #-1,R6L
   \   00001380   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1421                                          return;
   1422                          }
   \   00001386   4072               BRA     ?0316
   \                     ?0321:
   1423          
   1424                          /* Things to do if a button is pressed... */
   1425                          if (button)
   \   00001388   0C99               MOV.B   R1L,R1L
   \   0000138A   4762               BEQ     ?0342
   1426                          {
   1427                                  /* Update the value */
   1428                                  print_big_value(param.base_freq);
   \   0000138C   6B06....           MOV.W   @param+10:16,R6
   \   00001390   5C00F140           BSR     print_big_value
   1429                                  settings_icons();
   \   00001394   5C00F04E           BSR     settings_icons
   1430                                  update_display();
   \   00001398   5E......           JSR     @update_display:24
   1431                                  timer_go(&menu_timer);  /* Keep the menu alive */
   \   0000139C   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   000013A2   5E......           JSR     @timer_go:24
   1432          
   1433                          /* Pip at certain points in the freq scale. */
   1434                              switch(frequency)
   \   000013A6   6B06....           MOV.W   @frequency:16,R6
   \   000013AA   7926001E           CMP.W   #30,R6
   \   000013AE   4608               BNE     ?0344
   1435                              {
   1436                                  case 30:
   1437                              pip_n_times(1);
   \   000013B0   FE01               MOV.B   #1,R6L
   \   000013B2   5E......           JSR     @pip_n_times:24
   1438                              break;
   \   000013B6   4036               BRA     ?0342
   \                     ?0344:
   \   000013B8   7926003C           CMP.W   #60,R6
   \   000013BC   4608               BNE     ?0345
   1439                                  case 60:
   1440                              pip_n_times(2);
   \   000013BE   FE02               MOV.B   #2,R6L
   \   000013C0   5E......           JSR     @pip_n_times:24
   1441                              break;
   \   000013C4   4028               BRA     ?0342
   \                     ?0345:
   \   000013C6   7926005A           CMP.W   #90,R6
   \   000013CA   4608               BNE     ?0346
   1442                                  case 90:
   1443                              pip_n_times(3);
   \   000013CC   FE03               MOV.B   #3,R6L
   \   000013CE   5E......           JSR     @pip_n_times:24
   1444                              break;
   \   000013D2   401A               BRA     ?0342
   \                     ?0346:
   \   000013D4   79260078           CMP.W   #120,R6
   \   000013D8   4608               BNE     ?0347
   1445                                  case 120:
   1446                              pip_n_times(4);
   \   000013DA   FE04               MOV.B   #4,R6L
   \   000013DC   5E......           JSR     @pip_n_times:24
   1447                              break;
   \   000013E0   400C               BRA     ?0342
   \                     ?0347:
   \   000013E2   792600B4           CMP.W   #180,R6
   \   000013E6   4606               BNE     ?0342
   1448                                  case 180:
   1449                              pip_n_times(5);
   \   000013E8   FE05               MOV.B   #5,R6L
   \   000013EA   5E......           JSR     @pip_n_times:24
   1450                              break;
   \                     ?0342:
   1451                              }
   1452                          }
   1453          
   1454                          therapy_control();
   \   000013EE   5E......           JSR     @therapy_control:24
   1455                          modulate();
   \   000013F2   5E......           JSR     @modulate:24
   1456                  }
   1457          }
   \   000013F6   5800FEB4           BRA     ?0317
   \                     ?0316:
   \   000013FA   6D71               POP.W   R1
   \   000013FC   01006D70           POP.L   ER0
   \   00001400   5470               RTS     
   1458          
   1459          
   1460          
   1461          /******************************************************************
   1462          NAME            : options_menu
   1463          PURPOSE         : Menu to allow less often used parameters to be accessed.
   1464          PARAMETERS      : NONE
   1465          RETURNS         : NONE
   1466          SIDE-EFFECTS: NONE
   1467          CALLED FROM : 
   1468          *********************************************************************/
   1469          
   1470          void options_menu()
   1471          {
   \                     options_menu:
   \   00001402   6DF0               PUSH.W  R0
   1472                  char button;
   1473          
   1474                  menu_timer.period = 2000;
   \   00001404   7A060000           MOV.L   #2000,ER6
   \            07D0    
   \   0000140A   01006BA6           MOV.L   ER6,@menu_timer+6:32
   \            ........
   1475                  timer_go(&menu_timer);
   \   00001412   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00001418   5E......           JSR     @timer_go:24
   1476          
   1477                  /* Draw the screen. */
   1478                  clear_screen();
   \   0000141C   5E......           JSR     @clear_screen:24
   1479          
   1480                  glcd_print_string(0,text_lh,1,"Contrast");
   \   00001420   7A06....           MOV.L   #?0349,ER6
   \            ....    
   \   00001426   01006DF6           PUSH.L  ER6
   \   0000142A   FE01               MOV.B   #1,R6L
   \   0000142C   6DF6               PUSH.W  R6
   \   0000142E   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001434   18EE               SUB.B   R6L,R6L
   \   00001436   5E......           JSR     @glcd_print_string:24
   \   0000143A   79170006           ADD.W   #6,R7
   1481                  glcd_print_string(2,text_lh,1,"Usage");   
   \   0000143E   7A06....           MOV.L   #?0350,ER6
   \            ....    
   \   00001444   01006DF6           PUSH.L  ER6
   \   00001448   FE01               MOV.B   #1,R6L
   \   0000144A   6DF6               PUSH.W  R6
   \   0000144C   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001452   FE02               MOV.B   #2,R6L
   \   00001454   5E......           JSR     @glcd_print_string:24
   \   00001458   79170006           ADD.W   #6,R7
   1482          
   1483          
   1484                  menu_icons(DOWN_ICON, DOWN_ICON, NEXT_ICON, PREV_ICON);
   \   0000145C   FE94               MOV.B   #148,R6L
   \   0000145E   6DF6               PUSH.W  R6
   \   00001460   FE8E               MOV.B   #142,R6L
   \   00001462   6DF6               PUSH.W  R6
   \   00001464   FD8F               MOV.B   #143,R5L
   \   00001466   0CDE               MOV.B   R5L,R6L
   \   00001468   5C00EF00           BSR     menu_icons
   \   0000146C   0B97               ADDS.L  #4,ER7
   1485                  //print_big_value();
   1486                  menu_map();
   \   0000146E   5C00F794           BSR     menu_map
   1487                  update_display();
   \   00001472   5E......           JSR     @update_display:24
   \                     ?0352:
   1488          
   1489                  while (1)
   \   00001476   79060001           MOV.W   #1,R6
   1490                  {
   1491                          wait (30);
   \   0000147A   1AE6               SUB.L   ER6,ER6
   \   0000147C   FE1E               MOV.B   #30,R6L
   \   0000147E   5E......           JSR     @wait:24
   1492          
   1493                          button = read_keypad_action();  
   \   00001482   5C00EE16           BSR     read_keypad_action
   \   00001486   0CE8               MOV.B   R6L,R0L
   1494          
   1495                          if (menu_timeout(TRUE)) 
   \   00001488   FE01               MOV.B   #1,R6L
   \   0000148A   5C00F73C           BSR     menu_timeout
   \   0000148E   0CEE               MOV.B   R6L,R6L
   \   00001490   4642               BNE     ?0351
   1496                                  return ;
   1497                                  
   1498                          switch (button)
   \   00001492   A804               CMP.B   #4,R0L
   \   00001494   460A               BNE     ?0358
   1499                          {
   1500                                  case TOP_BUTTON:
   1501                                          menu = MENU_CONTRAST;
   \   00001496   FE0A               MOV.B   #10,R6L
   \   00001498   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1502                                          return;
   1503          
   1504                                  case MIDTOP_BUTTON:
   \   0000149E   4034               BRA     ?0351
   \                     ?0358:
   \   000014A0   A803               CMP.B   #3,R0L
   \   000014A2   460A               BNE     ?0359
   1505                                          menu = MENU_HOURS;
   \   000014A4   FE0B               MOV.B   #11,R6L
   \   000014A6   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1506                                          return;
   1507          
   1508                                  case MIDBOT_BUTTON:
   \   000014AC   4026               BRA     ?0351
   \                     ?0359:
   \   000014AE   A802               CMP.B   #2,R0L
   \   000014B0   4610               BNE     ?0360
   1509                                          menu++;
   \   000014B2   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   000014B8   8E01               ADD.B   #1,R6L
   \   000014BA   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1510                                          return;
   1511          
   1512                                  case BOTTOM_BUTTON:
   \   000014C0   4012               BRA     ?0351
   \                     ?0360:
   \   000014C2   A801               CMP.B   #1,R0L
   \   000014C4   46B0               BNE     ?0352
   1513                                          menu--;
   \   000014C6   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   000014CC   8EFF               ADD.B   #-1,R6L
   \   000014CE   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1514                                          return;
   1515                          }
   1516                  }
   1517          }
   \                     ?0351:
   \   000014D4   6D70               POP.W   R0
   \   000014D6   5470               RTS     
   1518          
   1519          
   1520          /******************************************************************
   1521          NAME            : gmenu_contrast
   1522          PURPOSE         : Menu to allow LCD contrast to be set.
   1523          PARAMETERS      : NONE
   1524          RETURNS         : NONE
   1525          SIDE-EFFECTS: NONE
   1526          CALLED FROM : 
   1527          *********************************************************************/
   1528          
   1529          void menu_contrast()
   1530          {
   \                     menu_contrast:
   \   000014D8   6DF0               PUSH.W  R0
   1531                  char button;
   1532          
   1533                  /* Draw the screen. */
   1534                  clear_screen();
   \   000014DA   5E......           JSR     @clear_screen:24
   1535                  glcd_print_string(1,text_lh,2,"Contrast");
   \   000014DE   7A06....           MOV.L   #?0349,ER6
   \            ....    
   \   000014E4   01006DF6           PUSH.L  ER6
   \   000014E8   FE02               MOV.B   #2,R6L
   \   000014EA   6DF6               PUSH.W  R6
   \   000014EC   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000014F2   FE01               MOV.B   #1,R6L
   \   000014F4   5E......           JSR     @glcd_print_string:24
   \   000014F8   79170006           ADD.W   #6,R7
   1536                  menu_icons(PLUS_ICON, MINUS_ICON, 0, 0);
   \   000014FC   18EE               SUB.B   R6L,R6L
   \   000014FE   6DF6               PUSH.W  R6
   \   00001500   6DF6               PUSH.W  R6
   \   00001502   FD8A               MOV.B   #138,R5L
   \   00001504   FE89               MOV.B   #137,R6L
   \   00001506   5C00EE62           BSR     menu_icons
   \   0000150A   0B97               ADDS.L  #4,ER7
   1537          
   1538                  print_big_value(param.contrast);
   \   0000150C   6A0E....           MOV.B   @param+17:16,R6L
   \   00001510   1756               EXTU.W  R6
   \   00001512   5C00EFBE           BSR     print_big_value
   1539                  update_display();
   \   00001516   5E......           JSR     @update_display:24
   1540          
   1541                  timer_go(&menu_timer);
   \   0000151A   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00001520   5E......           JSR     @timer_go:24
   \                     ?0363:
   1542          
   1543                  while (1)
   \   00001524   79060001           MOV.W   #1,R6
   1544                  {
   1545                          wait (30);
   \   00001528   1AE6               SUB.L   ER6,ER6
   \   0000152A   FE1E               MOV.B   #30,R6L
   \   0000152C   5E......           JSR     @wait:24
   1546          
   1547                          button = read_keypad_action();  
   \   00001530   5C00ED68           BSR     read_keypad_action
   \   00001534   0CE8               MOV.B   R6L,R0L
   1548          
   1549                          if (menu_timeout(TRUE))
   \   00001536   FE01               MOV.B   #1,R6L
   \   00001538   5C00F68E           BSR     menu_timeout
   \   0000153C   0CEE               MOV.B   R6L,R6L
   \   0000153E   470A               BEQ     ?0366
   1550                          {
   1551                                  last_menu = MENU_OPTIONS;
   \   00001540   FE08               MOV.B   #8,R6L
   \   00001542   6AAE....           MOV.B   R6L,@last_menu:32
   \            ....    
   1552                                  return ;
   1553                          }
   \   00001548   407E               BRA     ?0362
   \                     ?0366:
   1554                                  
   1555                          switch (button)
   \   0000154A   A804               CMP.B   #4,R0L
   \   0000154C   461A               BNE     ?0372
   1556                          {
   1557          
   1558                                  case TOP_BUTTON:
   1559                                          if (param.contrast < 0x1F)
   \   0000154E   6A0E....           MOV.B   @param+17:16,R6L
   \   00001552   AE1F               CMP.B   #31,R6L
   \   00001554   440C               BCC     ?0370
   1560                                          {
   1561                                                  param.contrast++;
   \   00001556   6A0E....           MOV.B   @param+17:16,R6L
   \   0000155A   8E01               ADD.B   #1,R6L
   \   0000155C   6A8E....           MOV.B   R6L,@param+17:16
   1562                                          }
   1563                                          else
   \   00001560   403E               BRA     ?0367
   \                     ?0370:
   1564                                                  end_beep();
   \   00001562   5E......           JSR     @end_beep:24
   1565                                          break;
   \   00001566   4038               BRA     ?0367
   \                     ?0372:
   \   00001568   A803               CMP.B   #3,R0L
   \   0000156A   4618               BNE     ?0376
   1566          
   1567                                  case MIDTOP_BUTTON:
   1568                                          if (param.contrast > 0)
   \   0000156C   6A0E....           MOV.B   @param+17:16,R6L
   \   00001570   470C               BEQ     ?0374
   1569                                          {
   1570                                                  param.contrast--;
   \   00001572   6A0E....           MOV.B   @param+17:16,R6L
   \   00001576   8EFF               ADD.B   #-1,R6L
   \   00001578   6A8E....           MOV.B   R6L,@param+17:16
   1571                                          }
   1572                                          else
   \   0000157C   4022               BRA     ?0367
   \                     ?0374:
   1573                                                  end_beep();
   \   0000157E   5E......           JSR     @end_beep:24
   1574                                          break;
   \   00001582   401C               BRA     ?0367
   \                     ?0376:
   \   00001584   A802               CMP.B   #2,R0L
   \   00001586   460A               BNE     ?0377
   1575          
   1576                                  case MIDBOT_BUTTON:
   1577                                          menu = MENU_OPTIONS;
   \   00001588   FE08               MOV.B   #8,R6L
   \   0000158A   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1578                                          return;
   1579          
   1580                                  case BOTTOM_BUTTON:
   \   00001590   4036               BRA     ?0362
   \                     ?0377:
   \   00001592   A801               CMP.B   #1,R0L
   \   00001594   460A               BNE     ?0367
   1581                                          menu = MENU_OPTIONS;
   \   00001596   FE08               MOV.B   #8,R6L
   \   00001598   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1582                                          return;
   1583                          }
   \   0000159E   4028               BRA     ?0362
   \                     ?0367:
   1584          
   1585                          /* Things to do if a button is pressed... */
   1586                          if (button)
   \   000015A0   0C88               MOV.B   R0L,R0L
   \   000015A2   4780               BEQ     ?0363
   1587                          {void set_contrast(char contr);
   1588                                  set_contrast(param.contrast);
   \   000015A4   6A0E....           MOV.B   @param+17:16,R6L
   \   000015A8   5E......           JSR     @set_contrast:24
   1589                                  /* Update the value */
   1590                                  print_big_value(param.contrast);
   \   000015AC   6A0E....           MOV.B   @param+17:16,R6L
   \   000015B0   1756               EXTU.W  R6
   \   000015B2   5C00EF1E           BSR     print_big_value
   1591                                  update_display();
   \   000015B6   5E......           JSR     @update_display:24
   1592                                  timer_go(&menu_timer);  /* Keep the menu alive */
   \   000015BA   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   000015C0   5E......           JSR     @timer_go:24
   1593                          }
   1594                  }
   1595          }
   \   000015C4   5800FF5C           BRA     ?0363
   \                     ?0362:
   \   000015C8   6D70               POP.W   R0
   \   000015CA   5470               RTS     
   1596          
   1597          
   1598          /******************************************************************
   1599          NAME            : gmenu_hours
   1600          PURPOSE         : Menu to view the therapy time accumulator.
   1601          PARAMETERS      : NONE
   1602          RETURNS         : NONE
   1603          SIDE-EFFECTS: NONE
   1604          CALLED FROM : 
   1605          *********************************************************************/
   1606          
   1607          
   1608          void menu_hours()
   1609          {
   \                     menu_hours:
   \   000015CC   6DF0               PUSH.W  R0
   \   000015CE   6DF1               PUSH.W  R1
   1610                  char button,clear_count=0;
   1611                  short hours,mins,secs;
   1612          
   1613          
   1614                  menu_timer.period = 20000; /* Give us some time here. */
   \   000015D0   7A060000           MOV.L   #20000,ER6
   \            4E20    
   \   000015D6   01006BA6           MOV.L   ER6,@menu_timer+6:32
   \            ........
   1615                  timer_go(&menu_timer);
   \   000015DE   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   000015E4   5E......           JSR     @timer_go:24
   1616          
   1617                  /* Draw the screen. */
   1618                  clear_screen();
   \   000015E8   5E......           JSR     @clear_screen:24
   1619                  glcd_print_string(1,text_lh,2,"Usage");
   \   000015EC   7A06....           MOV.L   #?0350,ER6
   \            ....    
   \   000015F2   01006DF6           PUSH.L  ER6
   \   000015F6   FE02               MOV.B   #2,R6L
   \   000015F8   6DF6               PUSH.W  R6
   \   000015FA   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001600   FE01               MOV.B   #1,R6L
   \   00001602   5E......           JSR     @glcd_print_string:24
   \   00001606   79170006           ADD.W   #6,R7
   1620                  menu_icons(0, 0, 0, PREV_ICON);
   \   0000160A   FE94               MOV.B   #148,R6L
   \   0000160C   6DF6               PUSH.W  R6
   \   0000160E   18EE               SUB.B   R6L,R6L
   \   00001610   6DF6               PUSH.W  R6
   \   00001612   18DD               SUB.B   R5L,R5L
   \   00001614   5C00ED54           BSR     menu_icons
   \   00001618   0B97               ADDS.L  #4,ER7
   1621          
   1622                  //test:
   1623                  // param.acc_ther_time = (3600 * 2000L) + (60 * 56L) + 24L; 
   1624          
   1625                  hours = param.acc_ther_time / 3600;
   \   0000161A   01006B06           MOV.L   @param:16,ER6
   \            ....    
   \   00001620   7A050000           MOV.L   #3600,ER5
   \            0E10    
   \   00001626   5E......           JSR     @?UL_DIV_L03
   \   0000162A   0D60               MOV.W   R6,R0
   1626                  mins = (param.acc_ther_time / 60) % 60; 
   \   0000162C   01006B06           MOV.L   @param:16,ER6
   \            ....    
   \   00001632   1AD5               SUB.L   ER5,ER5
   \   00001634   FD3C               MOV.B   #60,R5L
   \   00001636   5E......           JSR     @?UL_DIV_L03
   \   0000163A   1AD5               SUB.L   ER5,ER5
   \   0000163C   FD3C               MOV.B   #60,R5L
   \   0000163E   5E......           JSR     @?UL_MOD_L03
   \   00001642   0D61               MOV.W   R6,R1
   1627                  secs =  param.acc_ther_time % 60;
   \   00001644   01006B06           MOV.L   @param:16,ER6
   \            ....    
   \   0000164A   1AD5               SUB.L   ER5,ER5
   \   0000164C   FD3C               MOV.B   #60,R5L
   \   0000164E   5E......           JSR     @?UL_MOD_L03
   1628          
   1629                  /* Display full details of time on the serial. */
   1630                  PRINT "%4iHrs %2iMin %2iSec\r\n",hours, mins, secs PREND
   \   00001652   6DF6               PUSH.W  R6
   \   00001654   6DF1               PUSH.W  R1
   \   00001656   6DF0               PUSH.W  R0
   \   00001658   7A06....           MOV.L   #?0381,ER6
   \            ....    
   \   0000165E   01006DF6           PUSH.L  ER6
   \   00001662   7A06....           MOV.L   #print_temp,ER6
   \            ....    
   \   00001668   5E......           JSR     @sprintf:24
   \   0000166C   7917000A           ADD.W   #10,R7
   \   00001670   7A06....           MOV.L   #print_temp,ER6
   \            ....    
   \   00001676   5E......           JSR     @serial_put_string:24
   1631          
   1632                  sprintf(g_str,"%4iHrs %2iMin",hours, mins );
   \   0000167A   6DF1               PUSH.W  R1
   \   0000167C   6DF0               PUSH.W  R0
   \   0000167E   7A06....           MOV.L   #?0382,ER6
   \            ....    
   \   00001684   01006DF6           PUSH.L  ER6
   \   00001688   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   0000168E   5E......           JSR     @sprintf:24
   \   00001692   79170008           ADD.W   #8,R7
   1633                  glcd_print_string(4,0,1,g_str); 
   \   00001696   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   0000169C   01006DF6           PUSH.L  ER6
   \   000016A0   FE01               MOV.B   #1,R6L
   \   000016A2   6DF6               PUSH.W  R6
   \   000016A4   18DD               SUB.B   R5L,R5L
   \   000016A6   FE04               MOV.B   #4,R6L
   \   000016A8   5E......           JSR     @glcd_print_string:24
   \   000016AC   79170006           ADD.W   #6,R7
   1634          
   1635                  update_display();
   \   000016B0   5E......           JSR     @update_display:24
   \   000016B4   1888               SUB.B   R0L,R0L
   \                     ?0384:
   1636          
   1637                  while (1)
   \   000016B6   79060001           MOV.W   #1,R6
   1638                  {
   1639                          wait (30);
   \   000016BA   1AE6               SUB.L   ER6,ER6
   \   000016BC   FE1E               MOV.B   #30,R6L
   \   000016BE   5E......           JSR     @wait:24
   1640          
   1641                          button = read_keypad_action();  
   \   000016C2   5C00EBD6           BSR     read_keypad_action
   \   000016C6   0CE0               MOV.B   R6L,R0H
   1642          
   1643                          if (menu_timeout(TRUE)) 
   \   000016C8   FE01               MOV.B   #1,R6L
   \   000016CA   5C00F4FC           BSR     menu_timeout
   \   000016CE   0CEE               MOV.B   R6L,R6L
   \   000016D0   470A               BEQ     ?0387
   1644                          {
   1645                                  last_menu = MENU_OPTIONS;
   \   000016D2   FE08               MOV.B   #8,R6L
   \   000016D4   6AAE....           MOV.B   R6L,@last_menu:32
   \            ....    
   1646                                  return ;
   1647                          }
   \   000016DA   4046               BRA     ?0383
   \                     ?0387:
   1648                                  
   1649                          if (button)
   \   000016DC   0C00               MOV.B   R0H,R0H
   \   000016DE   47D6               BEQ     ?0384
   1650                          {
   1651                                  switch (button)
   \   000016E0   A004               CMP.B   #4,R0H
   \   000016E2   4622               BNE     ?0395
   1652                                  {
   1653                                          case 4:
   1654                                                  if (clear_count == 13) 
   \   000016E4   A80D               CMP.B   #13,R0L
   \   000016E6   461A               BNE     ?0393
   1655                                                  {
   1656                                                          param.acc_ther_time = 0;
   \   000016E8   1AE6               SUB.L   ER6,ER6
   \   000016EA   01006B86           MOV.L   ER6,@param:16
   \            ....    
   1657                                                          param.cutoff_time = 10; 
   \   000016F0   FE0A               MOV.B   #10,R6L
   \   000016F2   01006B86           MOV.L   ER6,@param+4:16
   \            ....    
   1658                                                          beep_for(1000);
   \   000016F8   790603E8           MOV.W   #1000,R6
   \   000016FC   5E......           JSR     @beep_for:24
   1659                                                  }
   1660                                                  else
   \   00001700   40B4               BRA     ?0384
   \                     ?0393:
   1661                                                          clear_count = 0;
   \   00001702   1888               SUB.B   R0L,R0L
   1662          
   1663                                                  break;
   \   00001704   40B0               BRA     ?0384
   \                     ?0395:
   \   00001706   A003               CMP.B   #3,R0H
   \   00001708   4604               BNE     ?0396
   1664          
   1665                                          case 3:
   1666                                                  clear_count++;
   \   0000170A   8801               ADD.B   #1,R0L
   1667                                                  break;
   \   0000170C   40A8               BRA     ?0384
   \                     ?0396:
   \   0000170E   A002               CMP.B   #2,R0H
   \   00001710   4604               BNE     ?0397
   1668                                                  
   1669                                          case 2:
   1670                                                  clear_count = 0;
   \   00001712   1888               SUB.B   R0L,R0L
   1671                                                  break;
   \   00001714   40A0               BRA     ?0384
   \                     ?0397:
   \   00001716   A001               CMP.B   #1,R0H
   \   00001718   469C               BNE     ?0384
   1672          
   1673                                          case 1:
   1674                                                  menu = MENU_OPTIONS;
   \   0000171A   FE08               MOV.B   #8,R6L
   \   0000171C   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1675                                                  return;
   1676                                                  //break;
   1677                                  }
   1678                          }
   1679                  }
   1680          }
   \                     ?0383:
   \   00001722   6D71               POP.W   R1
   \   00001724   6D70               POP.W   R0
   \   00001726   5470               RTS     
   1681          
   1682          /******************************************************************
   1683          NAME            : gmenu_power_off
   1684          PURPOSE         : Menu to warn that power will be turned off.
   1685          PARAMETERS      : NONE
   1686          RETURNS         : NONE
   1687          SIDE-EFFECTS: NONE
   1688          CALLED FROM : 
   1689          *********************************************************************/
   1690          
   1691          
   1692          void menu_power_off()
   1693          {
   \                     menu_power_off:
   \   00001728   6DF0               PUSH.W  R0
   1694              char button,i;
   1695          
   1696                  clear_screen();
   \   0000172A   5E......           JSR     @clear_screen:24
   1697                  glcd_print_string(2,0,2, "Power off?");
   \   0000172E   7A06....           MOV.L   #?0399,ER6
   \            ....    
   \   00001734   01006DF6           PUSH.L  ER6
   \   00001738   FE02               MOV.B   #2,R6L
   \   0000173A   6DF6               PUSH.W  R6
   \   0000173C   18DD               SUB.B   R5L,R5L
   \   0000173E   5E......           JSR     @glcd_print_string:24
   \   00001742   79170006           ADD.W   #6,R7
   1698                  glcd_print_string(4,0,2, "any button");
   \   00001746   7A06....           MOV.L   #?0400,ER6
   \            ....    
   \   0000174C   01006DF6           PUSH.L  ER6
   \   00001750   FE02               MOV.B   #2,R6L
   \   00001752   6DF6               PUSH.W  R6
   \   00001754   18DD               SUB.B   R5L,R5L
   \   00001756   FE04               MOV.B   #4,R6L
   \   00001758   5E......           JSR     @glcd_print_string:24
   \   0000175C   79170006           ADD.W   #6,R7
   1699                  glcd_print_string(6,0,2, "to stay ON");
   \   00001760   7A06....           MOV.L   #?0401,ER6
   \            ....    
   \   00001766   01006DF6           PUSH.L  ER6
   \   0000176A   FE02               MOV.B   #2,R6L
   \   0000176C   6DF6               PUSH.W  R6
   \   0000176E   18DD               SUB.B   R5L,R5L
   \   00001770   FE06               MOV.B   #6,R6L
   \   00001772   5E......           JSR     @glcd_print_string:24
   \   00001776   79170006           ADD.W   #6,R7
   1700                  update_display();
   \   0000177A   5E......           JSR     @update_display:24
   \                     ?0403:
   1701          
   1702                  while (1)
   \   0000177E   79060001           MOV.W   #1,R6
   1703                  {
   1704          
   1705                          wait (50);
   \   00001782   1AE6               SUB.L   ER6,ER6
   \   00001784   FE32               MOV.B   #50,R6L
   \   00001786   5E......           JSR     @wait:24
   1706          
   1707                          button = read_keypad_action();  
   \   0000178A   5C00EB0E           BSR     read_keypad_action
   1708                  if (button)
   \   0000178E   0CEE               MOV.B   R6L,R6L
   \   00001790   470A               BEQ     ?0406
   1709                  {
   1710                      menu = 0;
   \   00001792   18EE               SUB.B   R6L,R6L
   \   00001794   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1711                      return ;
   1712                  }
   \   0000179A   4028               BRA     ?0402
   \                     ?0406:
   1713          
   1714                          
   1715                          if (i++ % 60 == 0 )
   \   0000179C   0C8E               MOV.B   R0L,R6L
   \   0000179E   0A08               INC.B   R0L
   \   000017A0   FD3C               MOV.B   #60,R5L
   \   000017A2   1756               EXTU.W  R6
   \   000017A4   51D6               DIVXU.B R5L,R6
   \   000017A6   0C66               MOV.B   R6H,R6H
   \   000017A8   4610               BNE     ?0408
   1716                          {
   1717                                  beep_for(20);
   \   000017AA   79060014           MOV.W   #20,R6
   \   000017AE   5E......           JSR     @beep_for:24
   1718                                  beep_for(-20);
   \   000017B2   7906FFEC           MOV.W   #-20,R6
   \   000017B6   5E......           JSR     @beep_for:24
   \                     ?0408:
   1719                          }
   1720          
   1721                  if (i > 250)
   \   000017BA   A8FA               CMP.B   #250,R0L
   \   000017BC   43C0               BLS     ?0403
   1722                  {
   1723                          power_down();
   \   000017BE   5C00EA4C           BSR     power_down
   1724                  }
   1725              }
   1726          }
   \   000017C2   40BA               BRA     ?0403
   \                     ?0402:
   \   000017C4   6D70               POP.W   R0
   \   000017C6   5470               RTS     
   1727          
   1728          /******************************************************************
   1729          NAME            : menu_tree
   1730          PURPOSE         : Governs the navigation among menus.
   1731          PARAMETERS      : NONE
   1732          RETURNS         : NONE
   1733          SIDE-EFFECTS: NONE
   1734          CALLED FROM : 
   1735          *********************************************************************/
   1736          
   1737          
   1738          void menu_tree()
   1739          {
   \                     menu_tree:
   \                     ?0410:
   1740                  while (1)
   \   000017C8   79060001           MOV.W   #1,R6
   1741                  {
   1742                          switch(menu)
   \   000017CC   6A2E....           MOV.B   @menu:32,R6L
   \            ....    
   \   000017D2   AE0D               CMP.B   #13,R6L
   \   000017D4   582000BC           BHI     ?0430
   \   000017D8   1756               EXTU.W  R6
   \   000017DA   1776               EXTU.L  ER6
   \   000017DC   1076               SHLL.L  #2,ER6
   \   000017DE   01007860           MOV.L   @(?0501:32,ER6),ER6
   \            6B26....
   \            ....    
   \   000017E8   5960               JMP     @ER6
   \                     ?0501:
   \   000017EA   ........           DC.L    ?0416
   \   000017EE   ........           DC.L    ?0417
   \   000017F2   ........           DC.L    ?0423
   \   000017F6   ........           DC.L    ?0422
   \   000017FA   ........           DC.L    ?0418
   \   000017FE   ........           DC.L    ?0419
   \   00001802   ........           DC.L    ?0420
   \   00001806   ........           DC.L    ?0421
   \   0000180A   ........           DC.L    ?0424
   \   0000180E   ........           DC.L    ?0425
   \   00001812   ........           DC.L    ?0426
   \   00001816   ........           DC.L    ?0427
   \   0000181A   ........           DC.L    ?0428
   \   0000181E   ........           DC.L    ?0429
   \                     ?0416:
   1743                          {
   1744                                  case MENU_MAIN:
   1745                                          main_menu();
   \   00001822   5C00EF14           BSR     main_menu
   1746                                          break;
   \   00001826   40A0               BRA     ?0410
   \                     ?0417:
   1747          
   1748                                  case MENU_GAP1:
   1749                                          menu = MENU_LAST_IN_LIST;
   \   00001828   FE08               MOV.B   #8,R6L
   \   0000182A   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1750                                          break;
   \   00001830   4096               BRA     ?0410
   \                     ?0418:
   1751          
   1752                                  case MENU_MODULATION:
   1753                                          menu_modulation();
   \   00001832   5C00F418           BSR     menu_modulation
   1754                                          break;
   \   00001836   4090               BRA     ?0410
   \                     ?0419:
   1755          
   1756                                  case MENU_FILTER:
   1757                                          menu_filter();
   \   00001838   5C00F678           BSR     menu_filter
   1758                                          break;
   \   0000183C   408A               BRA     ?0410
   \                     ?0420:
   1759          
   1760                                  case MENU_INTENSITY:
   1761                                          menu_intensity();
   \   0000183E   5C00F7C0           BSR     menu_intensity
   1762                                          break;
   \   00001842   4084               BRA     ?0410
   \                     ?0421:
   1763          
   1764                                  case MENU_INTERPULSE:
   1765                                          menu_interpulse();
   \   00001844   5C00F8D0           BSR     menu_interpulse
   1766                                          break;
   \   00001848   5800FF7C           BRA     ?0410
   \                     ?0422:
   1767          
   1768                                  case MENU_FREQUENCY:
   1769                                          menu_freq();
   \   0000184C   5C00F9D6           BSR     menu_freq
   1770                                          break;
   \   00001850   5800FF74           BRA     ?0410
   \                     ?0423:
   1771          
   1772                                  case MENU_FREQ_CYCLE:
   1773                                          menu_freq_cycle();
   \   00001854   5C00F50A           BSR     menu_freq_cycle
   1774                                          break;
   \   00001858   5800FF6C           BRA     ?0410
   \                     ?0424:
   1775          
   1776          
   1777                                  case MENU_OPTIONS:
   1778                                          options_menu();
   \   0000185C   5C00FBA2           BSR     options_menu
   1779                                          break;
   \   00001860   5800FF64           BRA     ?0410
   \                     ?0425:
   1780                                          
   1781          
   1782                                  case MENU_GAP2:
   1783                                          menu = MENU_FIRST_IN_LIST;
   \   00001864   FE02               MOV.B   #2,R6L
   \   00001866   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1784                                          break;
   \   0000186C   5800FF58           BRA     ?0410
   \                     ?0426:
   1785          
   1786          
   1787          
   1788                                  case MENU_CONTRAST:
   1789                                          menu_contrast();
   \   00001870   5C00FC64           BSR     menu_contrast
   1790                                          break;
   \   00001874   5800FF50           BRA     ?0410
   \                     ?0427:
   1791          
   1792                                  case MENU_HOURS:
   1793                                          menu_hours();
   \   00001878   5C00FD50           BSR     menu_hours
   1794                                          break;
   \   0000187C   5800FF48           BRA     ?0410
   \                     ?0428:
   1795          
   1796                                  case MENU_GAP3:
   1797                                          menu = MENU_CONTRAST;
   \   00001880   FE0A               MOV.B   #10,R6L
   \   00001882   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1798                                          break;
   \   00001888   5800FF3C           BRA     ?0410
   \                     ?0429:
   1799          
   1800                      case MENU_POWER_OFF:
   1801                          menu_power_off();
   \   0000188C   5C00FE98           BSR     menu_power_off
   1802                          break;
   \   00001890   5800FF34           BRA     ?0410
   \                     ?0430:
   1803          
   1804                                  default:
   1805                                          menu = MENU_MAIN;
   \   00001894   18EE               SUB.B   R6L,R6L
   \   00001896   6AAE....           MOV.B   R6L,@menu:32
   \            ....    
   1806                                          break;
   1807                          }
   1808                  }
   1809          }       
   \   0000189C   5800FF28           BRA     ?0410
   1810          
   1811          
   1812          void plot_seq_chars_at(char line, char col, char start_c, char n)
   1813          {
   \                     plot_seq_chars_at:
   \   000018A0   6DF0               PUSH.W  R0
   \   000018A2   6DF1               PUSH.W  R1
   \   000018A4   0CE8               MOV.B   R6L,R0L
   \   000018A6   0CD0               MOV.B   R5L,R0H
   \   000018A8   6E790009           MOV.B   @(9,SP),R1L
   1814                  char i;
   1815          
   1816                  changed_lines[line-1] = 1;
   \   000018AC   FD01               MOV.B   #1,R5L
   \   000018AE   0C8E               MOV.B   R0L,R6L
   \   000018B0   1756               EXTU.W  R6
   \   000018B2   17F6               EXTS.L  ER6
   \   000018B4   78606AAD           MOV.B   R5L,@(changed_lines-1:32,ER6)
   \            ........
   1817                  changed_lines[line] = 1;
   \   000018BC   0C8E               MOV.B   R0L,R6L
   \   000018BE   1756               EXTU.W  R6
   \   000018C0   17F6               EXTS.L  ER6
   \   000018C2   78606AAD           MOV.B   R5L,@(changed_lines:32,ER6)
   \            ........
   1818          
   1819                  for (i=0; i< n; i++)
   \   000018CA   1811               SUB.B   R1H,R1H
   \                     ?0432:
   \   000018CC   6E7E000B           MOV.B   @(11,SP),R6L
   \   000018D0   1CE1               CMP.B   R6L,R1H
   \   000018D2   441A               BCC     ?0431
   1820                  {
   1821                          plot_big_char( line,  col, start_c, 1);
   \   000018D4   FE01               MOV.B   #1,R6L
   \   000018D6   6DF6               PUSH.W  R6
   \   000018D8   0C9E               MOV.B   R1L,R6L
   \   000018DA   6DF6               PUSH.W  R6
   \   000018DC   0C0D               MOV.B   R0H,R5L
   \   000018DE   0C8E               MOV.B   R0L,R6L
   \   000018E0   5E......           JSR     @plot_big_char:24
   \   000018E4   0B97               ADDS.L  #4,ER7
   1822                          col += 9;
   \   000018E6   8009               ADD.B   #9,R0H
   1823                          start_c ++;
   \   000018E8   8901               ADD.B   #1,R1L
   \   000018EA   8101               ADD.B   #1,R1H
   1824                  }
   1825          }
   \   000018EC   40DE               BRA     ?0432
   \                     ?0431:
   \   000018EE   6D71               POP.W   R1
   \   000018F0   6D70               POP.W   R0
   \   000018F2   5470               RTS     
   1826          
   1827          
   1828          
   1829          /* do the things that set up the unit with the parameters loaded. */
   1830          void realise_parameters()
   1831          {
   \                     realise_parameters:
   1832                  filter_bit = param.filter;
   \   000018F4   6A0E....           MOV.B   @param+15:16,R6L
   \   000018F8   770E               BLD     #0,R6L
   \   000018FA   7F616720           BST     #2,@0xFFFFFF61
   1833                  frequency = param.base_freq;
   \   000018FE   6B06....           MOV.W   @param+10:16,R6
   \   00001902   6B86....           MOV.W   R6,@frequency:16
   1834                  set_pulse_width(param.strength); 
   \   00001906   6A0E....           MOV.B   @param+9:16,R6L
   \   0000190A   5E......           JSR     @set_pulse_width:24
   1835                  set_pulse_period(); 
   \   0000190E   5E......           JSR     @set_pulse_period:24
   1836          }
   \   00001912   5470               RTS     
   1837          
   1838          
   1839          /******************** CREDIT CONTROL **********************/
   1840          /******************** CREDIT CONTROL **********************/
   1841          /******************** CREDIT CONTROL **********************/
   1842          
   1843          
   1844          /* The Credit levels in seconds. */
   1845          #define CREDIT_WARNING_LEVEL (3 * 3600L)
   1846          #define CREDIT_INCREMENT (50 * 3600L)    /* Number of Hours to credit each time. */
   1847          
   1848          #define KEY_FUNC key_func(acc_splat , seq_spat)
   1849          
   1850          
   1851          /* 
   1852                  Menu to cover the generation of the sequence code, and the entry of the credit key.
   1853          */
   1854          char get_credit()
   1855          {
   \                     get_credit:
   \   00001914   01106DF0           STM     (ER0-ER1),@-SP
   \   00001918   6DF2               PUSH.W  R2
   1856                  char ind;
   1857              char button = 0;
   1858                  unsigned short key_bits = 0;
   1859          
   1860                  unsigned long acc_splat;
   1861                  char seq_spat;
   1862          
   1863                  acc_splat = param.acc_ther_time ^ HOURS_LOG_CYPHER;
   \   0000191A   01006B00           MOV.L   @param:16,ER0
   \            ....    
   \   00001920   7A507AC4           XOR.L   #2059680734,ER0
   \            3BDE    
   1864                  seq_spat =      param.credit_seq ^ CREDIT_SEQ_CYPHER;
   \   00001926   6A09....           MOV.B   @param+18:16,R1L
   \   0000192A   D93E               XOR.B   #62,R1L
   1865          
   1866                  /* Draw the screen. */
   1867                  clear_screen();
   \   0000192C   5E......           JSR     @clear_screen:24
   1868                  menu_icons( '3' ,'2', '1' , '0');
   \   00001930   FE30               MOV.B   #48,R6L
   \   00001932   6DF6               PUSH.W  R6
   \   00001934   FE31               MOV.B   #49,R6L
   \   00001936   6DF6               PUSH.W  R6
   \   00001938   FD32               MOV.B   #50,R5L
   \   0000193A   FE33               MOV.B   #51,R6L
   \   0000193C   5C00EA2C           BSR     menu_icons
   \   00001940   0B97               ADDS.L  #4,ER7
   1869          
   1870                  glcd_print_string(1,text_lh,2,"Credit");
   \   00001942   7A06....           MOV.L   #?0435,ER6
   \            ....    
   \   00001948   01006DF6           PUSH.L  ER6
   \   0000194C   FE02               MOV.B   #2,R6L
   \   0000194E   6DF6               PUSH.W  R6
   \   00001950   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001956   FE01               MOV.B   #1,R6L
   \   00001958   5E......           JSR     @glcd_print_string:24
   \   0000195C   79170006           ADD.W   #6,R7
   1871                  glcd_print_string(2,text_lh,1,"Quote code:");
   \   00001960   7A06....           MOV.L   #?0436,ER6
   \            ....    
   \   00001966   01006DF6           PUSH.L  ER6
   \   0000196A   FE01               MOV.B   #1,R6L
   \   0000196C   6DF6               PUSH.W  R6
   \   0000196E   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001974   FE02               MOV.B   #2,R6L
   \   00001976   5E......           JSR     @glcd_print_string:24
   \   0000197A   79170006           ADD.W   #6,R7
   1872                  
   1873                  sprintf(g_str,"0%08LX%02X" ,acc_splat  , seq_spat );
   \   0000197E   0C9E               MOV.B   R1L,R6L
   \   00001980   1756               EXTU.W  R6
   \   00001982   6DF6               PUSH.W  R6
   \   00001984   01006DF0           PUSH.L  ER0
   \   00001988   7A06....           MOV.L   #?0437,ER6
   \            ....    
   \   0000198E   01006DF6           PUSH.L  ER6
   \   00001992   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00001998   5E......           JSR     @sprintf:24
   \   0000199C   7917000A           ADD.W   #10,R7
   1874          
   1875                  glcd_print_string(3,text_lh,1,g_str);
   \   000019A0   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   000019A6   01006DF6           PUSH.L  ER6
   \   000019AA   FE01               MOV.B   #1,R6L
   \   000019AC   6DF6               PUSH.W  R6
   \   000019AE   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000019B4   FE03               MOV.B   #3,R6L
   \   000019B6   5E......           JSR     @glcd_print_string:24
   \   000019BA   79170006           ADD.W   #6,R7
   1876                  glcd_print_string(5,text_lh,1,"Enter key:");
   \   000019BE   7A06....           MOV.L   #?0438,ER6
   \            ....    
   \   000019C4   01006DF6           PUSH.L  ER6
   \   000019C8   FE01               MOV.B   #1,R6L
   \   000019CA   6DF6               PUSH.W  R6
   \   000019CC   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000019D2   FE05               MOV.B   #5,R6L
   \   000019D4   5E......           JSR     @glcd_print_string:24
   \   000019D8   79170006           ADD.W   #6,R7
   1877                  glcd_print_string(6,text_lh,1,"________");
   \   000019DC   7A06....           MOV.L   #?0439,ER6
   \            ....    
   \   000019E2   01006DF6           PUSH.L  ER6
   \   000019E6   FE01               MOV.B   #1,R6L
   \   000019E8   6DF6               PUSH.W  R6
   \   000019EA   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   000019F0   FE06               MOV.B   #6,R6L
   \   000019F2   5E......           JSR     @glcd_print_string:24
   \   000019F6   79170006           ADD.W   #6,R7
   1878                  update_display();
   \   000019FA   5E......           JSR     @update_display:24
   \   000019FE   1999               SUB.W   E1,E1
   \                     ?0442:
   1879          
   1880                  /* send answer out on serial ! */
   1881                  //PRINT "%08LX\r\n",binary_coded_quartal(KEY_FUNC)  PREND
   1882                  
   1883                  /* wait for no key - don't know why we have to do this here and not elsewhere! */
   1884                  do {wait (30);} while(read_keypad_action());
   \   00001A00   1AE6               SUB.L   ER6,ER6
   \   00001A02   FE1E               MOV.B   #30,R6L
   \   00001A04   5E......           JSR     @wait:24
   \   00001A08   5C00E890           BSR     read_keypad_action
   \   00001A0C   0CEE               MOV.B   R6L,R6L
   \   00001A0E   46F0               BNE     ?0442
   1885          
   1886          
   1887                  menu_timer.period = 5 * 60 * 1000L; /* Give us some time here. */
   \   00001A10   7A060004           MOV.L   #300000,ER6
   \            93E0    
   \   00001A16   01006BA6           MOV.L   ER6,@menu_timer+6:32
   \            ........
   1888                  timer_go(&menu_timer);
   \   00001A1E   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00001A24   5E......           JSR     @timer_go:24
   1889          
   1890                  g_str[0] = '\0';
   \   00001A28   18EE               SUB.B   R6L,R6L
   \   00001A2A   6AAE....           MOV.B   R6L,@g_str:32
   \            ....    
   1891                  ind = 0;
   \   00001A30   1811               SUB.B   R1H,R1H
   \                     ?0444:
   1892          
   1893                  while (ind < 8)
   \   00001A32   A108               CMP.B   #8,R1H
   \   00001A34   447A               BCC     ?0443
   1894                  {
   1895                          wait (30);
   \   00001A36   1AE6               SUB.L   ER6,ER6
   \   00001A38   FE1E               MOV.B   #30,R6L
   \   00001A3A   5E......           JSR     @wait:24
   1896          
   1897                          button = read_keypad_action();  
   \   00001A3E   5C00E85A           BSR     read_keypad_action
   \   00001A42   0CEA               MOV.B   R6L,R2L
   1898          
   1899                          if (menu_timeout(TRUE)) 
   \   00001A44   FE01               MOV.B   #1,R6L
   \   00001A46   5C00F180           BSR     menu_timeout
   \   00001A4A   0CEE               MOV.B   R6L,R6L
   \   00001A4C   4704               BEQ     ?0447
   1900                          {
   1901                                   power_down();
   \   00001A4E   5C00E7BC           BSR     power_down
   \                     ?0447:
   1902                          }
   1903                                  
   1904                          if (button)
   \   00001A52   0CAA               MOV.B   R2L,R2L
   \   00001A54   47DC               BEQ     ?0444
   1905                          {
   1906          
   1907                                  g_str[ind++] = button-1 + '0'; // 0123
   \   00001A56   0CAD               MOV.B   R2L,R5L
   \   00001A58   8D2F               ADD.B   #47,R5L
   \   00001A5A   0C1E               MOV.B   R1H,R6L
   \   00001A5C   0A01               INC.B   R1H
   \   00001A5E   1756               EXTU.W  R6
   \   00001A60   17F6               EXTS.L  ER6
   \   00001A62   78606AAD           MOV.B   R5L,@(g_str:32,ER6)
   \            ........
   1908                                  g_str[ind] = '\0';
   \   00001A6A   18DD               SUB.B   R5L,R5L
   \   00001A6C   0C1E               MOV.B   R1H,R6L
   \   00001A6E   1756               EXTU.W  R6
   \   00001A70   17F6               EXTS.L  ER6
   \   00001A72   78606AAD           MOV.B   R5L,@(g_str:32,ER6)
   \            ........
   1909          
   1910                                  key_bits <<= 2;
   \   00001A7A   10D9               SHAL.W  #2,E1
   1911                                  key_bits |= button-1;
   \   00001A7C   1752               EXTU.W  R2
   \   00001A7E   1B52               DEC.W   #1,R2
   \   00001A80   6429               OR.W    R2,E1
   1912          
   1913                                  glcd_print_string(6,text_lh ,1,g_str);
   \   00001A82   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00001A88   01006DF6           PUSH.L  ER6
   \   00001A8C   FE01               MOV.B   #1,R6L
   \   00001A8E   6DF6               PUSH.W  R6
   \   00001A90   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001A96   FE06               MOV.B   #6,R6L
   \   00001A98   5E......           JSR     @glcd_print_string:24
   \   00001A9C   79170006           ADD.W   #6,R7
   1914                                  update_display();
   \   00001AA0   5E......           JSR     @update_display:24
   1915          
   1916                                  timer_go(&menu_timer);
   \   00001AA4   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00001AAA   5E......           JSR     @timer_go:24
   \   00001AAE   4082               BRA     ?0444
   \                     ?0443:
   1917                          }
   1918                  }
   1919          
   1920                  if (key_bits == KEY_FUNC )
   \   00001AB0   0C9D               MOV.B   R1L,R5L
   \   00001AB2   0F86               MOV.L   ER0,ER6
   \   00001AB4   5E......           JSR     @key_func:24
   \   00001AB8   1D69               CMP.W   R6,E1
   \   00001ABA   4648               BNE     ?0451
   1921                  {
   1922                          param.credit_seq++;       /* Go to next in seq. */
   \   00001ABC   6A0E....           MOV.B   @param+18:16,R6L
   \   00001AC0   8E01               ADD.B   #1,R6L
   \   00001AC2   6A8E....           MOV.B   R6L,@param+18:16
   1923          
   1924                          if (param.cutoff_time < param.acc_ther_time) /* ignore -ve credit run up. */
   \   00001AC6   01006B06           MOV.L   @param+4:16,ER6
   \            ....    
   \   00001ACC   01006B05           MOV.L   @param:16,ER5
   \            ....    
   \   00001AD2   1FD6               CMP.L   ER5,ER6
   \   00001AD4   440C               BCC     ?0453
   1925                             param.cutoff_time = param.acc_ther_time;    
   \   00001AD6   01006B06           MOV.L   @param:16,ER6
   \            ....    
   \   00001ADC   01006B86           MOV.L   ER6,@param+4:16
   \            ....    
   \                     ?0453:
   1926          
   1927                          param.cutoff_time += CREDIT_INCREMENT ; /* Increase credit. */
   \   00001AE2   01006B06           MOV.L   @param+4:16,ER6
   \            ....    
   \   00001AE8   7A160002           ADD.L   #180000,ER6
   \            BF20    
   \   00001AEE   01006B86           MOV.L   ER6,@param+4:16
   \            ....    
   1928                          save_parameters();
   \   00001AF4   5C00E590           BSR     save_parameters
   1929                          beep_for(100);
   \   00001AF8   79060064           MOV.W   #100,R6
   \   00001AFC   5E......           JSR     @beep_for:24
   1930                          return(TRUE);
   \   00001B00   FE01               MOV.B   #1,R6L
   1931                  }
   \   00001B02   4036               BRA     ?0455
   \                     ?0451:
   1932                  else
   1933                  {
   1934                          glcd_print_string(5,text_lh,1,"Bad key!!!:");
   \   00001B04   7A06....           MOV.L   #?0454,ER6
   \            ....    
   \   00001B0A   01006DF6           PUSH.L  ER6
   \   00001B0E   FE01               MOV.B   #1,R6L
   \   00001B10   6DF6               PUSH.W  R6
   \   00001B12   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001B18   FE05               MOV.B   #5,R6L
   \   00001B1A   5E......           JSR     @glcd_print_string:24
   \   00001B1E   79170006           ADD.W   #6,R7
   1935                          update_display();
   \   00001B22   5E......           JSR     @update_display:24
   1936                          beep_for(1000);
   \   00001B26   790603E8           MOV.W   #1000,R6
   \   00001B2A   5E......           JSR     @beep_for:24
   1937                          wait (1000);
   \   00001B2E   7A060000           MOV.L   #1000,ER6
   \            03E8    
   \   00001B34   5E......           JSR     @wait:24
   1938                          return(FALSE);
   \   00001B38   18EE               SUB.B   R6L,R6L
   1939                  }
   \                     ?0455:
   \   00001B3A   6D72               POP.W   R2
   \   00001B3C   01106D71           LDM     @SP+,(ER0-ER1)
   \   00001B40   5470               RTS     
   1940          }
   1941                  
   1942          /* 
   1943                  Print the remaining credit to the LCD and 
   1944                  return +ve if we have therapy time in credit 
   1945          */
   1946          long therapy_credit()
   1947          {
   \                     therapy_credit:
   \   00001B42   01006DF0           PUSH.L  ER0
   \   00001B46   6DF1               PUSH.W  R1
   1948                  long secs = param.cutoff_time - param.acc_ther_time;    
   \   00001B48   01006B00           MOV.L   @param+4:16,ER0
   \            ....    
   \   00001B4E   01006B06           MOV.L   @param:16,ER6
   \            ....    
   \   00001B54   1AE0               SUB.L   ER6,ER0
   1949                  char hours = secs / 3600;
   \   00001B56   0F86               MOV.L   ER0,ER6
   \   00001B58   7A050000           MOV.L   #3600,ER5
   \            0E10    
   \   00001B5E   5E......           JSR     @?SL_DIV_L03
   \   00001B62   0CE9               MOV.B   R6L,R1L
   1950                  char mins =  (secs / 60) % 60;
   \   00001B64   0F86               MOV.L   ER0,ER6
   \   00001B66   1AD5               SUB.L   ER5,ER5
   \   00001B68   FD3C               MOV.B   #60,R5L
   \   00001B6A   5E......           JSR     @?SL_DIV_L03
   \   00001B6E   1AD5               SUB.L   ER5,ER5
   \   00001B70   FD3C               MOV.B   #60,R5L
   \   00001B72   5E......           JSR     @?SL_MOD_L03
   1951          
   1952                  sprintf(g_str,"%2iH%02i Credit",hours,mins);
   \   00001B76   1756               EXTU.W  R6
   \   00001B78   6DF6               PUSH.W  R6
   \   00001B7A   1751               EXTU.W  R1
   \   00001B7C   6DF1               PUSH.W  R1
   \   00001B7E   7A06....           MOV.L   #?0456,ER6
   \            ....    
   \   00001B84   01006DF6           PUSH.L  ER6
   \   00001B88   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00001B8E   5E......           JSR     @sprintf:24
   \   00001B92   79170008           ADD.W   #8,R7
   1953                  glcd_print_string(7,11,1,g_str);
   \   00001B96   7A06....           MOV.L   #g_str,ER6
   \            ....    
   \   00001B9C   01006DF6           PUSH.L  ER6
   \   00001BA0   FE01               MOV.B   #1,R6L
   \   00001BA2   6DF6               PUSH.W  R6
   \   00001BA4   FD0B               MOV.B   #11,R5L
   \   00001BA6   FE07               MOV.B   #7,R6L
   \   00001BA8   5E......           JSR     @glcd_print_string:24
   \   00001BAC   79170006           ADD.W   #6,R7
   1954          
   1955          PRINT "Credit: %liS\r\n",secs PREND
   \   00001BB0   01006DF0           PUSH.L  ER0
   \   00001BB4   7A06....           MOV.L   #?0457,ER6
   \            ....    
   \   00001BBA   01006DF6           PUSH.L  ER6
   \   00001BBE   7A06....           MOV.L   #print_temp,ER6
   \            ....    
   \   00001BC4   5E......           JSR     @sprintf:24
   \   00001BC8   79170008           ADD.W   #8,R7
   \   00001BCC   7A06....           MOV.L   #print_temp,ER6
   \            ....    
   \   00001BD2   5E......           JSR     @serial_put_string:24
   1956          
   1957                  return(secs);
   \   00001BD6   0F86               MOV.L   ER0,ER6
   1958          }
   \   00001BD8   6D71               POP.W   R1
   \   00001BDA   01006D70           POP.L   ER0
   \   00001BDE   5470               RTS     
   1959          
   1960          /******************** END CREDIT CONTROL **********************/
   1961          /******************** END CREDIT CONTROL **********************/
   1962          /******************** END CREDIT CONTROL **********************/
   1963                  
   1964          
   1965          /******************************************************************
   1966          NAME            : start_screen
   1967          PURPOSE         : The first screens that appear at startup.
   1968          PARAMETERS      : NONE
   1969          RETURNS         : NONE
   1970          SIDE-EFFECTS: NONE
   1971          CALLED FROM : 
   1972          *********************************************************************/
   1973          
   1974          
   1975          
   1976          void start_screen()
   1977          {
   \                     start_screen:
   \   00001BE0   01006DF0           PUSH.L  ER0
   \   00001BE4   6DF1               PUSH.W  R1
   1978           char start_button;
   1979           char b;
   1980           char i = 0;
   1981           long in_credit;
   1982          
   1983          
   1984                  /******* The power on sequence *******/
   1985              start_button = read_button(); /* Read any button pressed at startup. */
   \   00001BE6   5C00E672           BSR     read_button
   1986          
   1987                  if (start_button == TOP_BUTTON)
   \   00001BEA   1899               SUB.B   R1L,R1L
   \   00001BEC   AE04               CMP.B   #4,R6L
   \   00001BEE   4608               BNE     ?0459
   1988                  {
   1989                          upside_down = TRUE;
   \   00001BF0   FE01               MOV.B   #1,R6L
   \   00001BF2   6AAE....           MOV.B   R6L,@upside_down:32
   \            ....    
   \                     ?0459:
   1990                  } 
   1991          
   1992                  set_menu_state(upside_down);
   \   00001BF8   6A2E....           MOV.B   @upside_down:32,R6L
   \            ....    
   \   00001BFE   5C00E8B2           BSR     set_menu_state
   \                     ?0461:
   1993          
   1994                  /* To stop the controller waking on a false button press. */
   1995                  while (!read_button()) wait(1);                   /* wait for a button. */
   \   00001C02   5C00E656           BSR     read_button
   \   00001C06   0CEE               MOV.B   R6L,R6L
   \   00001C08   460A               BNE     ?0460
   \   00001C0A   1AE6               SUB.L   ER6,ER6
   \   00001C0C   FE01               MOV.B   #1,R6L
   \   00001C0E   5E......           JSR     @wait:24
   \   00001C12   40EE               BRA     ?0461
   \                     ?0460:
   1996          
   1997          
   1998          
   1999                  /******* Saved Parameter Management *******/
   2000                  /* We read the params from the EEPROM, then display them 
   2001                     on the LCD, but don't actually turn on pulses.
   2002                     This allows the user to choose whether to have them 
   2003                     or not.
   2004                  */
   2005                  read_parameters(); /* Read the parameters from the EEPROM */
   \   00001C14   5C00E4EA           BSR     read_parameters
   2006          
   2007                  set_contrast(param.contrast);   /* Set the stored contrast. */
   \   00001C18   6A0E....           MOV.B   @param+17:16,R6L
   \   00001C1C   5E......           JSR     @set_contrast:24
   2008          
   2009          
   2010                  glcd_print_string(3,10,2,"Eumedic\xA9");
   \   00001C20   7A06....           MOV.L   #?0463,ER6
   \            ....    
   \   00001C26   01006DF6           PUSH.L  ER6
   \   00001C2A   FE02               MOV.B   #2,R6L
   \   00001C2C   6DF6               PUSH.W  R6
   \   00001C2E   FD0A               MOV.B   #10,R5L
   \   00001C30   FE03               MOV.B   #3,R6L
   \   00001C32   5E......           JSR     @glcd_print_string:24
   \   00001C36   79170006           ADD.W   #6,R7
   2011                  glcd_print_string(5,11,1,"(C)2003 V2.05");      /* Version and copyright */
   \   00001C3A   7A06....           MOV.L   #?0464,ER6
   \            ....    
   \   00001C40   01006DF6           PUSH.L  ER6
   \   00001C44   FE01               MOV.B   #1,R6L
   \   00001C46   6DF6               PUSH.W  R6
   \   00001C48   FD0B               MOV.B   #11,R5L
   \   00001C4A   FE05               MOV.B   #5,R6L
   \   00001C4C   5E......           JSR     @glcd_print_string:24
   \   00001C50   79170006           ADD.W   #6,R7
   2012          
   2013          
   2014                  in_credit = therapy_credit();    /* Write credit time to screen. */
   \   00001C54   5C00FEEA           BSR     therapy_credit
   \   00001C58   0FE0               MOV.L   ER6,ER0
   2015          
   2016          
   2017                  update_display();
   \   00001C5A   5E......           JSR     @update_display:24
   2018          
   2019                  POWER_HOLD_ON; /* hold power on now */
   \   00001C5E   7F607070           BSET    #7,@0xFFFFFF60
   2020          
   2021                  beep_for(50);
   \   00001C62   79060032           MOV.W   #50,R6
   \   00001C66   5E......           JSR     @beep_for:24
   2022          
   2023          
   2024                  setup_threshold();                      /* Setup the CMOS gate bias for pulse measurement. */
   \   00001C6A   5E......           JSR     @setup_threshold:24
   2025          
   2026          
   2027                  
   2028                  for (i = 0; read_button(); i++ , wait (100))              /* wait for no buttons. */
   \   00001C6E   1899               SUB.B   R1L,R1L
   \                     ?0466:
   \   00001C70   5C00E5E8           BSR     read_button
   \   00001C74   0CEE               MOV.B   R6L,R6L
   \   00001C76   472E               BEQ     ?0465
   2029                  {
   2030                          if (i == 150 && ( (~porte & 0xF) == (BUTTON1_BIT | BUTTON3_BIT) )  ) /* allow single use access if buttons 1 & 3 held for 15S. */
   \   00001C78   A996               CMP.B   #150,R1L
   \   00001C7A   461E               BNE     ?0470
   \   00001C7C   2E5D               MOV.B   @0xFFFFFF5D,R6L
   \   00001C7E   170E               NOT.B   R6L
   \   00001C80   17D6               EXTS.W  R6
   \   00001C82   7966000F           AND.W   #15,R6
   \   00001C86   79260005           CMP.W   #5,R6
   \   00001C8A   460E               BNE     ?0470
   2031                          {
   2032                                  in_credit = 1;
   2033                                  beep_for(100);
   \   00001C8C   79060064           MOV.W   #100,R6
   \   00001C90   5E......           JSR     @beep_for:24
   2034                                  i = 0;
   \   00001C94   1A80               SUB.L   ER0,ER0
   \   00001C96   F801               MOV.B   #1,R0L
   \   00001C98   1899               SUB.B   R1L,R1L
   \                     ?0470:
   \   00001C9A   8901               ADD.B   #1,R1L
   \   00001C9C   1AE6               SUB.L   ER6,ER6
   \   00001C9E   FE64               MOV.B   #100,R6L
   \   00001CA0   5E......           JSR     @wait:24
   \   00001CA4   40CA               BRA     ?0466
   \                     ?0465:
   2035                          }
   2036                  }
   2037          
   2038                  main_screen();
   \   00001CA6   5C00E898           BSR     main_screen
   2039          
   2040                  #define TICK_ICON 154
   2041                  #define XCROSS_ICON 153
   2042                  #define ALLOW_CREDIT (in_credit < CREDIT_WARNING_LEVEL)
   2043          
   2044                  menu_icons(TICK_ICON, XCROSS_ICON ,(in_credit < CREDIT_WARNING_LEVEL)? '$' : 0, ON_OFF_ICON);
   \   00001CAA   7A200000           CMP.L   #10800,ER0
   \            2A30    
   \   00001CB0   4C04               BGE     ?0474
   \   00001CB2   FE24               MOV.B   #36,R6L
   \   00001CB4   4002               BRA     ?0475
   \                     ?0474:
   \   00001CB6   18EE               SUB.B   R6L,R6L
   \                     ?0475:
   \   00001CB8   FD9B               MOV.B   #155,R5L
   \   00001CBA   6DF5               PUSH.W  R5
   \   00001CBC   6DF6               PUSH.W  R6
   \   00001CBE   FD99               MOV.B   #153,R5L
   \   00001CC0   FE9A               MOV.B   #154,R6L
   \   00001CC2   5C00E6A6           BSR     menu_icons
   \   00001CC6   0B97               ADDS.L  #4,ER7
   2045                  
   2046                  update_display();
   \   00001CC8   5E......           JSR     @update_display:24
   2047          
   2048          
   2049                  /* Get the selection. */
   2050                  menu_timer.period = 20 * 1000L;
   \   00001CCC   7A060000           MOV.L   #20000,ER6
   \            4E20    
   \   00001CD2   01006BA6           MOV.L   ER6,@menu_timer+6:32
   \            ........
   2051                  timer_go(&menu_timer);
   \   00001CDA   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00001CE0   5E......           JSR     @timer_go:24
   \                     ?0477:
   2052                  while ( !(b = read_button()) )
   \   00001CE4   5C00E574           BSR     read_button
   \   00001CE8   0CE9               MOV.B   R6L,R1L
   \   00001CEA   461C               BNE     ?0476
   2053                  {
   2054                          wait (30);
   \   00001CEC   1AE6               SUB.L   ER6,ER6
   \   00001CEE   FE1E               MOV.B   #30,R6L
   \   00001CF0   5E......           JSR     @wait:24
   2055                          if ( timer_done(&menu_timer) )
   \   00001CF4   7A06....           MOV.L   #menu_timer,ER6
   \            ....    
   \   00001CFA   5E......           JSR     @timer_done:24
   \   00001CFE   0CEE               MOV.B   R6L,R6L
   \   00001D00   47E2               BEQ     ?0477
   2056                                  power_down();
   \   00001D02   5C00E508           BSR     power_down
   \   00001D06   40DC               BRA     ?0477
   \                     ?0476:
   2057                  }
   2058                          
   2059                                  
   2060                  beep_for(2);
   \   00001D08   79060002           MOV.W   #2,R6
   \   00001D0C   5E......           JSR     @beep_for:24
   2061                   
   2062                  switch (b)
   \   00001D10   A904               CMP.B   #4,R1L
   \   00001D12   4666               BNE     ?0490
   2063                  {
   2064                          case TOP_BUTTON:                        /* Use saved settings */
   2065                                  /* Buzz a warning according to the strength! */
   2066                                  {
   2067                                          char i;
   2068          
   2069                                          #define STRENGTH_WARNING_LEVEL 15
   2070                                          if (param.strength > STRENGTH_WARNING_LEVEL )
   \   00001D14   6B06....           MOV.W   @param+8:16,R6
   \   00001D18   7926000F           CMP.W   #15,R6
   \   00001D1C   58F0008C           BLE     ?0481
   2071                                          {
   2072                                                  menu_icons(TICK_ICON, 0 ,0, 0);
   \   00001D20   18EE               SUB.B   R6L,R6L
   \   00001D22   6DF6               PUSH.W  R6
   \   00001D24   6DF6               PUSH.W  R6
   \   00001D26   18DD               SUB.B   R5L,R5L
   \   00001D28   FE9A               MOV.B   #154,R6L
   \   00001D2A   5C00E63E           BSR     menu_icons
   \   00001D2E   0B97               ADDS.L  #4,ER7
   2073                                                  glcd_print_string(5,text_lh + 6,1,"HIGH VOLTAGE!");
   \   00001D30   7A06....           MOV.L   #?0485,ER6
   \            ....    
   \   00001D36   01006DF6           PUSH.L  ER6
   \   00001D3A   FE01               MOV.B   #1,R6L
   \   00001D3C   6DF6               PUSH.W  R6
   \   00001D3E   6A2D....           MOV.B   @text_lh:32,R5L
   \            ....    
   \   00001D44   8D06               ADD.B   #6,R5L
   \   00001D46   FE05               MOV.B   #5,R6L
   \   00001D48   5E......           JSR     @glcd_print_string:24
   \   00001D4C   79170006           ADD.W   #6,R7
   2074                                                  update_display();
   \   00001D50   5E......           JSR     @update_display:24
   2075          
   2076                                                  for (i=0; i < 20; i++)
   \   00001D54   1899               SUB.B   R1L,R1L
   \                     ?0487:
   \   00001D56   A914               CMP.B   #20,R1L
   \   00001D58   4414               BCC     ?0486
   2077                                                  {
   2078                                                          beep_for(3);
   \   00001D5A   79060003           MOV.W   #3,R6
   \   00001D5E   5E......           JSR     @beep_for:24
   2079                                                          wait (10);
   \   00001D62   1AE6               SUB.L   ER6,ER6
   \   00001D64   FE0A               MOV.B   #10,R6L
   \   00001D66   5E......           JSR     @wait:24
   \   00001D6A   8901               ADD.B   #1,R1L
   \   00001D6C   40E8               BRA     ?0487
   \                     ?0486:
   2080                                                  }
   2081          
   2082                                                  wait (700);
   \   00001D6E   7A060000           MOV.L   #700,ER6
   \            02BC    
   \   00001D74   5E......           JSR     @wait:24
   2083                                          }
   2084                                  }
   2085                                  break;
   \   00001D78   4032               BRA     ?0481
   \                     ?0490:
   \   00001D7A   A903               CMP.B   #3,R1L
   \   00001D7C   4606               BNE     ?0491
   2086          
   2087                          case MIDTOP_BUTTON:                     /* Reset settings */
   2088                                  set_default_params();   /* Set default params */
   \   00001D7E   5C00E32E           BSR     set_default_params
   2089                                  break;
   \   00001D82   4028               BRA     ?0481
   \                     ?0491:
   \   00001D84   A902               CMP.B   #2,R1L
   \   00001D86   461C               BNE     ?0497
   2090          
   2091                          case MIDBOT_BUTTON:
   2092                                  if (ALLOW_CREDIT)
   \   00001D88   7A200000           CMP.L   #10800,ER0
   \            2A30    
   \   00001D8E   4C0E               BGE     ?0493
   2093                                  {
   2094                                          if (get_credit())/* use a key-code to get more credit. */       
   \   00001D90   5C00FB80           BSR     get_credit
   \   00001D94   0CEE               MOV.B   R6L,R6L
   \   00001D96   4714               BEQ     ?0481
   2095                                           in_credit = TRUE;
   \   00001D98   1A80               SUB.L   ER0,ER0
   \   00001D9A   F801               MOV.B   #1,R0L
   2096                                  }
   2097                                  else
   \   00001D9C   400E               BRA     ?0481
   \                     ?0493:
   2098                                          power_down();
   \   00001D9E   5C00E46C           BSR     power_down
   2099          
   2100                                  break;
   \   00001DA2   4008               BRA     ?0481
   \                     ?0497:
   \   00001DA4   A901               CMP.B   #1,R1L
   \   00001DA6   4604               BNE     ?0481
   2101                                  
   2102                          case BOTTOM_BUTTON:
   2103                                  power_down();
   \   00001DA8   5C00E462           BSR     power_down
   2104                                  break;
   \                     ?0481:
   2105                  }
   2106          
   2107                  /* No credit? - don't go any further. */
   2108                  if (in_credit <= 0)
   \   00001DAC   0F80               MOV     ER0,ER0
   \   00001DAE   4E38               BGT     ?0499
   2109                  {
   2110                          clear_screen();
   \   00001DB0   5E......           JSR     @clear_screen:24
   2111                          glcd_print_string(3,5,2,"No Credit");
   \   00001DB4   7A06....           MOV.L   #?0500,ER6
   \            ....    
   \   00001DBA   01006DF6           PUSH.L  ER6
   \   00001DBE   FE02               MOV.B   #2,R6L
   \   00001DC0   6DF6               PUSH.W  R6
   \   00001DC2   FD05               MOV.B   #5,R5L
   \   00001DC4   FE03               MOV.B   #3,R6L
   \   00001DC6   5E......           JSR     @glcd_print_string:24
   \   00001DCA   79170006           ADD.W   #6,R7
   2112                          update_display();
   \   00001DCE   5E......           JSR     @update_display:24
   2113                          beep_for(1000);
   \   00001DD2   790603E8           MOV.W   #1000,R6
   \   00001DD6   5E......           JSR     @beep_for:24
   2114                          wait (2000);
   \   00001DDA   7A060000           MOV.L   #2000,ER6
   \            07D0    
   \   00001DE0   5E......           JSR     @wait:24
   2115                          power_down();   
   \   00001DE4   5C00E426           BSR     power_down
   \                     ?0499:
   2116                  }
   2117          
   2118          
   2119                  /* Now allow the pulses to start... */
   2120                  setup_tpu();                            /* Setup the TPU for pulse output and input. */ 
   \   00001DE8   5E......           JSR     @setup_tpu:24
   2121                  setup_dtc();                            /* Setup the DTC for pulse measurement */
   \   00001DEC   5E......           JSR     @setup_dtc:24
   2122          
   2123          
   2124                  realise_parameters();           /* do the things that set up the unit with the parameters loaded. */
   \   00001DF0   5C00FB00           BSR     realise_parameters
   2125          
   2126                  menu_tree();
   \   00001DF4   5C00F9D0           BSR     menu_tree
   2127                  
   2128          }       
   \   00001DF8   6D71               POP.W   R1
   \   00001DFA   01006D70           POP.L   ER0
   \   00001DFE   5470               RTS     
   2129          
   \                     	RSEG	CSTR
   \                     ?0014:
   \                     	DC.B	'Ps:C:%i S:%i F:%i I:%i z:%i m:%i f:%i Fc:%i T:%li x:%i'
   \                     	DC.B	13,10,0
   \                     ?0022:
   \                     	DC.B	'parameter out of range.'
   \                     	DC.B	13,10,0
   \                     ?0025:
   \                     	DC.B	'bad sum!! set defaults'
   \                     	DC.B	13,10,0
   \                     ?0028:
   \                     	DC.B	'Power off'
   \                     	DC.B	0
   \                     ?0073:
   \                     	DC.B	'%c%c'
   \                     	DC.B	0
   \                     ?0076:
   \                     	DC.B	'FrCyc'
   \                     	DC.B	0
   \                     ?0078:
   \                     	DC.B	'%3iHz'
   \                     	DC.B	0
   \                     ?0082:
   \                     	DC.B	'%3i'
   \                     	DC.B	0
   \                     ?0086:
   \                     	DC.B	'Off'
   \                     	DC.B	0
   \                     ?0087:
   \                     	DC.B	'Strength'
   \                     	DC.B	0
   \                     ?0090:
   \                     	DC.B	'x%i'
   \                     	DC.B	0
   \                     ?0094:
   \                     	DC.B	'Str'
   \                     	DC.B	0
   \                     ?0097:
   \                     	DC.B	'Filter'
   \                     	DC.B	0
   \                     ?0101:
   \                     	DC.B	'Modulation'
   \                     	DC.B	0
   \                     ?0105:
   \                     	DC.B	'Freq Cycle'
   \                     	DC.B	0
   \                     ?0107:
   \                     	DC.B	-115,0
   \                     ?0148:
   \                     	DC.B	'%01i:%02i'
   \                     	DC.B	0
   \                     ?0154:
   \                     	DC.B	'%3i %3i'
   \                     	DC.B	0
   \                     ?0155:
   \                     	DC.B	'%3i%c'
   \                     	DC.B	0
   \                     ?0161:
   \                     	DC.B	'%2i %2i'
   \                     	DC.B	0
   \                     ?0163:
   \                     	DC.B	'%2i  -'
   \                     	DC.B	0
   \                     ?0166:
   \                     	DC.B	'* No Info *'
   \                     	DC.B	0
   \                     ?0197:
   \                     	DC.B	'cfMFIg-'
   \                     	DC.B	0
   \                     ?0198:
   \                     	DC.B	'Modulate'
   \                     	DC.B	0
   \                     ?0220:
   \                     	DC.B	'Freq Cyc'
   \                     	DC.B	0
   \                     ?0223:
   \                     	DC.B	'On '
   \                     	DC.B	0
   \                     ?0272:
   \                     	DC.B	'Intensity'
   \                     	DC.B	0
   \                     ?0292:
   \                     	DC.B	'Int Gap'
   \                     	DC.B	0
   \                     ?0312:
   \                     	DC.B	'Frequency'
   \                     	DC.B	0
   \                     ?0315:
   \                     	DC.B	'Cyc'
   \                     	DC.B	0
   \                     ?0349:
   \                     	DC.B	'Contrast'
   \                     	DC.B	0
   \                     ?0350:
   \                     	DC.B	'Usage'
   \                     	DC.B	0
   \                     ?0381:
   \                     	DC.B	'%4iHrs %2iMin %2iSec'
   \                     	DC.B	13,10,0
   \                     ?0382:
   \                     	DC.B	'%4iHrs %2iMin'
   \                     	DC.B	0
   \                     ?0399:
   \                     	DC.B	'Power off?'
   \                     	DC.B	0
   \                     ?0400:
   \                     	DC.B	'any button'
   \                     	DC.B	0
   \                     ?0401:
   \                     	DC.B	'to stay ON'
   \                     	DC.B	0
   \                     ?0435:
   \                     	DC.B	'Credit'
   \                     	DC.B	0
   \                     ?0436:
   \                     	DC.B	'Quote code:'
   \                     	DC.B	0
   \                     ?0437:
   \                     	DC.B	'0%08LX%02X'
   \                     	DC.B	0
   \                     ?0438:
   \                     	DC.B	'Enter key:'
   \                     	DC.B	0
   \                     ?0439:
   \                     	DC.B	'________'
   \                     	DC.B	0
   \                     ?0454:
   \                     	DC.B	'Bad key!!!:'
   \                     	DC.B	0
   \                     ?0456:
   \                     	DC.B	'%2iH%02i Credit'
   \                     	DC.B	0
   \                     ?0457:
   \                     	DC.B	'Credit: %liS'
   \                     	DC.B	13,10,0
   \                     ?0463:
   \                     	DC.B	'Eumedic'
   \                     	DC.B	-87,0
   \                     ?0464:
   \                     	DC.B	'(C)2003 V2.05'
   \                     	DC.B	0
   \                     ?0485:
   \                     	DC.B	'HIGH VOLTAGE!'
   \                     	DC.B	0
   \                     ?0500:
   \                     	DC.B	'No Credit'
   \                     	DC.B	0
   \                     	RSEG	UDATA2
   \                     menu_sprite_col:
   \                     	DS.B	1
   \                     g_str:
   \                     	DS.B	100
   \                     	RSEG	IDATA2
   \                     parameters_valid:
   \                     	DS.B	1
   \                     menu:
   \                     	DS.B	1
   \                     last_menu:
   \                     	DS.B	1
   \                     button_auto_wait:
   \                     	DS.B	5
   \                     auto_repeating:
   \                     	DS.B	1
   \                     ?0048:
   \                     	DS.B	1
   \                     ?0049:
   \                     	DS.B	1
   \                     ?0050:
   \                     	DS.B	1
   \                     text_lh:
   \                     	DS.B	1
   \                     	RSEG	CDATA2
   \                     	DC.B	0
   \                     	DC.B	0
   \                     	DC.B	2
   \                     	DC.B	0
   \                     	DC.B	10
   \                     	DC.B	10
   \                     	DC.B	10
   \                     	DC.B	10
   \                     	DC.B	0
   \                     	DC.B	0
   \                     	DC.B	0
   \                     	DC.B	0
   \                     	DC.B	0
   \                     	END

Errors: none
Warnings: none
Code size: 7680
Constant size: 542
Static variable size: 114

