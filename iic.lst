##############################################################################
#                                                                            #
# IAR H8 C-Compiler V1.53F/WIN                                               #
#                                                                            #
#       Compile time  =  19/Jun/2003  11:41:56                               #
#       Target option =  H8S/2300                                            #
#       Memory model  =  large                                               #
#       Source file   =  h:\jobs\eumedic3\iic.c                              #
#       List file     =  h:\jobs\eumedic3\debug\list\iic.lst                 #
#       Object file   =  h:\jobs\eumedic3\debug\obj\iic.r37                  #
#       Command line  =  -v3 -ml -OH:\Jobs\Eumedic3\Debug\Obj\ -RCODE -s9    #
#                        -um0I0 -e -K -g -LH:\Jobs\Eumedic3\Debug\List\ -q   #
#                        -t8 -IC:\IAR\EW23\h8\inc\ H:\Jobs\Eumedic3\iic.c    #
#                                                                            #
#                           Copyright 2002 IAR Systems. All rights reserved. #
##############################################################################

   \                     	NAME	iic(17)
   \                     	RSEG	CODE(1)
   \                     	RSEG	CSTR(1)
   \                     	PUBLIC	iic_get
   \                     	PUBLIC	iic_init
   \                     	PUBLIC	iic_off
   \                     	PUBLIC	iic_on
   \                     	PUBLIC	iic_poll
   \                     	PUBLIC	iic_put
   \                     	EXTERN	p2ddrc
   \                     	PUBLIC	read_block_from_eeprom
   \                     	EXTERN	serial_put_string
   \                     	EXTERN	wait
   \                     	PUBLIC	wait_for_eeprom_to_finish
   \                     	PUBLIC	write_block_to_eeprom
   \                     	EXTERN	?CLH8SL_1_42_L00
   \                     	RSEG	CODE
      1          
      2          
      3          /*
      4          
      5          DESCRIPTION:   IIC bus driver
      6          AUTHOR  : Karl Lam
      7          DATE    : 4/10/2000
      8          
      9          History:                                                                                                                                                                                
     10          --------------
     11          */
     12          
     13          
     14          /*
     15          NOTES:
     16          
     17          */
     18          
     19          #pragma language=extended       /* Enable use of extended keywords */
     20          
     21          #include <stdio.h>
     22          #include <inh8.h>
     23          #include <stdlib.h>
     24          #include <ctype.h>
     25          #include <string.h>
     26          
     27          #include "hardware.h"
     28          #include "iic.h"
     29          #include "time.h"
     30          #include "general.h"
     31          #include "debug.h"                                                                                          
     32          
     33          
     34          
     35          #define iic_wait() no_operation()//;no_operation();no_operation();no_operation()
     36          
     37          
     38          
     39          
     40          
     41          
     42          
     43          /* Turns IIC bus on 
     44          SDA: HI OUT -> LO OUT
     45          SCL: HI     -> HI
     46          */
     47          void iic_on()
     48          {
   \                     iic_on:
     49             p2dr &= 0xFF - SDA; /* lower the data line */
   \   00000000   7F617270           BCLR    #7,@0xFFFFFF61
     50             iic_wait();
   \   00000004   0000               NOP     
     51             p2dr &= 0xFF - SCL; /* lower the clock line */
   \   00000006   7F617250           BCLR    #5,@0xFFFFFF61
     52             iic_wait();
   \   0000000A   0000               NOP     
     53          }
   \   0000000C   5470               RTS     
     54          
     55          /* Turns IIC bus off
     56          SDA: LO OUT -> HI OUT
     57          SCL: HI     -> HI
     58          */
     59          void iic_off()
     60          {
   \                     iic_off:
     61             p2dr |= SCL; /* raise the clock line */
   \   0000000E   7F617050           BSET    #5,@0xFFFFFF61
     62             iic_wait();
   \   00000012   0000               NOP     
     63             p2dr |= SDA; /* raise the data line */
   \   00000014   7F617070           BSET    #7,@0xFFFFFF61
     64             iic_wait();
   \   00000018   0000               NOP     
     65          }
   \   0000001A   5470               RTS     
     66          
     67          /* Write a byte to the bus and detect the acknowledge
     68          Initially:
     69          SDA: LO OUT
     70          SCL: LO
     71          Ends with the same.
     72          Returns true if acknowledges.
     73          */
     74          char iic_put(char byte)
     75          {char i;
   \                     iic_put:
     76          
     77             /* set the data bits, MSB first */
     78             for(i=0; i<8; i++)
   \   0000001C   1866               SUB.B   R6H,R6H
   \                     ?0011:
   \   0000001E   A608               CMP.B   #8,R6H
   \   00000020   4422               BCC     ?0010
     79             {
     80                if (byte & 0x80)
   \   00000022   0CEE               MOV     R6L,R6L
   \   00000024   4C06               BGE     ?0015
     81                  p2dr |= SDA;            /* raise the data line */
   \   00000026   7F617070           BSET    #7,@0xFFFFFF61
     82                else    
   \   0000002A   4004               BRA     ?0016
   \                     ?0015:
     83                  p2dr &= 0xFF - SDA;     /* lower the data line */
   \   0000002C   7F617270           BCLR    #7,@0xFFFFFF61
   \                     ?0016:
     84             
     85                iic_wait();
   \   00000030   0000               NOP     
     86                p2dr |=  SCL;             /* raise the clock line */
   \   00000032   7F617050           BSET    #5,@0xFFFFFF61
     87                iic_wait();
   \   00000036   0000               NOP     
     88                p2dr &= 0xFF - SCL;       /* lower the clock line */
   \   00000038   7F617250           BCLR    #5,@0xFFFFFF61
     89                iic_wait();
   \   0000003C   0000               NOP     
     90                byte <<= 1;               /* shift the next bit in */
   \   0000003E   108E               SHAL.B  R6L
   \   00000040   8601               ADD.B   #1,R6H
   \   00000042   40DA               BRA     ?0011
   \                     ?0010:
     91             }
     92             /* read the ack */
     93             p2ddrc &= (0xFF - SDA);      /* make SDA an input */
   \   00000044   6A18....           BCLR    #7,@p2ddrc:16
   \            7270    
     94             p2ddr = p2ddrc;
   \   0000004A   6A0E....           MOV.B   @p2ddrc:16,R6L
   \   0000004E   6A8EFEB1           MOV.B   R6L,@0xFFFFFEB1
     95          
     96             iic_wait();
   \   00000052   0000               NOP     
     97             p2dr |=  SCL;                /* raise the clock line - after making SDA input, else get stop cond! */
   \   00000054   7F617050           BSET    #5,@0xFFFFFF61
     98             iic_wait();
   \   00000058   0000               NOP     
     99             byte = port2;                /* read SDA for the ack */
   \   0000005A   2E51               MOV.B   @0xFFFFFF51,R6L
    100             p2dr &= 0xFF - SCL;          /* lower the clock line, ending the ack period */
   \   0000005C   7F617250           BCLR    #5,@0xFFFFFF61
    101             iic_wait();
   \   00000060   0000               NOP     
    102          
    103             //INTS_OFF;                  /* this has to be here else an interrupt (or task) could get in and change SDA */
    104             p2dr &= 0xFF - SDA;          /* lower the data line, for end state */
   \   00000062   7F617270           BCLR    #7,@0xFFFFFF61
    105             p2ddrc |= SDA;               /* make SDA an output */
   \   00000066   6A18....           BSET    #7,@p2ddrc:16
   \            7070    
    106             p2ddr = p2ddrc;
   \   0000006C   6A06....           MOV.B   @p2ddrc:16,R6H
   \   00000070   6A86FEB1           MOV.B   R6H,@0xFFFFFEB1
    107             //INTS_ON;
    108          
    109             iic_wait();
   \   00000074   0000               NOP     
    110             
    111             if (byte & SDA)
   \   00000076   0CEE               MOV     R6L,R6L
   \   00000078   4C04               BGE     ?0018
    112                return 0;
   \   0000007A   18EE               SUB.B   R6L,R6L
   \   0000007C   5470               RTS     
   \                     ?0018:
    113             return 1;  /* return true if SDA pulled low */
   \   0000007E   FE01               MOV.B   #1,R6L
    114          }
   \   00000080   5470               RTS     
    115          
    116          
    117          /* ! watch out for doing &= etc. on a port as it can change the state of o/p levels when
    118          they are currently inputs */
    119          
    120          /*
    121          Read a byte from the bus and acknowledge it 
    122          Initially:
    123          SDA: LO OUT
    124          SCL: LO
    125          Ends with the same.
    126          Returns true if acknowledges.
    127          */
    128          char iic_get(char last)
    129          {
   \                     iic_get:
    130             char i=0, byte = 0;
    131             
    132             p2ddrc &= (0xFF - SDA); /* make SDA an input */
   \   00000082   6A18....           BCLR    #7,@p2ddrc:16
   \            7270    
    133             p2ddr = p2ddrc;
   \   00000088   6A06....           MOV.B   @p2ddrc:16,R6H
   \   0000008C   6A86FEB1           MOV.B   R6H,@0xFFFFFEB1
    134             iic_wait();
   \   00000090   0000               NOP     
   \   00000092   18DD               SUB.B   R5L,R5L
   \   00000094   1866               SUB.B   R6H,R6H
   \                     ?0021:
    135             
    136             while (1)
    137             {
    138                p2dr |=  SCL;    /* raise SCL */
   \   00000096   7F617050           BSET    #5,@0xFFFFFF61
    139                iic_wait();
   \   0000009A   0000               NOP     
    140                if (port2 & SDA)  /* if SDA is high put a 1 in the byte */
   \   0000009C   2551               MOV.B   @0xFFFFFF51,R5H
   \   0000009E   0C55               MOV     R5H,R5H
   \   000000A0   4C02               BGE     ?0024
    141                   byte |= 0x01;
   \   000000A2   C601               OR.B    #1,R6H
   \                     ?0024:
    142                   
    143                p2dr &= 0xFF - SCL - SDA;   /* lower the clock */
   \   000000A4   2561               MOV.B   @0xFFFFFF61,R5H
   \   000000A6   E55F               AND.B   #95,R5H
   \   000000A8   3561               MOV.B   R5H,@0xFFFFFF61
    144                iic_wait();
   \   000000AA   0000               NOP     
    145                
    146                if (++i == 8)     /* exit when 8 bits put in */
   \   000000AC   8D01               ADD.B   #1,R5L
   \   000000AE   AD08               CMP.B   #8,R5L
   \   000000B0   4704               BEQ     ?0020
    147                   break;
    148          
    149                byte <<=1;       /* shift the bits along ready for the next one */
   \   000000B2   1086               SHAL.B  R6H
   \   000000B4   40E0               BRA     ?0021
   \                     ?0020:
    150             }
    151             /* Ack */
    152             
    153             if (last) /* don't ack */
   \   000000B6   0CEE               MOV.B   R6L,R6L
   \   000000B8   4722               BEQ     ?0028
    154             {
    155                p2dr |=  SCL;    /* raise SCL */
   \   000000BA   7F617050           BSET    #5,@0xFFFFFF61
    156                iic_wait();
   \   000000BE   0000               NOP     
    157                p2dr &= 0xFF - SCL - SDA;   /* lower the clock */
   \   000000C0   2E61               MOV.B   @0xFFFFFF61,R6L
   \   000000C2   EE5F               AND.B   #95,R6L
   \   000000C4   3E61               MOV.B   R6L,@0xFFFFFF61
    158                iic_wait();
   \   000000C6   0000               NOP     
    159          
    160                //INTS_OFF;            /* this has to be here else an interrupt (or task) could get in and change SDA */
    161                p2dr &= 0xFF - SDA; /* lower the data line */
   \   000000C8   7F617270           BCLR    #7,@0xFFFFFF61
    162                p2ddrc |= SDA;   /* make SDA an output */
   \   000000CC   6A18....           BSET    #7,@p2ddrc:16
   \            7070    
    163                p2ddr = p2ddrc;
   \   000000D2   6A0E....           MOV.B   @p2ddrc:16,R6L
   \   000000D6   6A8EFEB1           MOV.B   R6L,@0xFFFFFEB1
    164                //INTS_ON;
    165             }
    166             else /* do ack */
   \   000000DA   4020               BRA     ?0029
   \                     ?0028:
    167             {
    168                //INTS_OFF;            /* this has to be here else an interrupt (or task) could get in and change SDA */
    169                p2dr &= 0xFF - SDA; /* lower the data line */
   \   000000DC   7F617270           BCLR    #7,@0xFFFFFF61
    170                p2ddrc |= SDA;   /* make SDA an output */
   \   000000E0   6A18....           BSET    #7,@p2ddrc:16
   \            7070    
    171                p2ddr = p2ddrc;
   \   000000E6   6A0E....           MOV.B   @p2ddrc:16,R6L
   \   000000EA   6A8EFEB1           MOV.B   R6L,@0xFFFFFEB1
    172                //INTS_ON;
    173          
    174                iic_wait();
   \   000000EE   0000               NOP     
    175                p2dr |=  SCL;    /* raise SCL */
   \   000000F0   7F617050           BSET    #5,@0xFFFFFF61
    176                iic_wait();
   \   000000F4   0000               NOP     
    177                p2dr &= 0xFF - SCL - SDA;   /* lower the clock */
   \   000000F6   2E61               MOV.B   @0xFFFFFF61,R6L
   \   000000F8   EE5F               AND.B   #95,R6L
   \   000000FA   3E61               MOV.B   R6L,@0xFFFFFF61
   \                     ?0029:
    178             }
    179             iic_wait();
   \   000000FC   0000               NOP     
    180             return byte;
   \   000000FE   0C6E               MOV.B   R6H,R6L
    181          }
   \   00000100   5470               RTS     
    182           
    183          /* returns true if there is a device at 'address' */
    184          char iic_poll(char address)
    185          {  char x;
   \                     iic_poll:
   \   00000102   6DF0               PUSH.W  R0
   \   00000104   0CE8               MOV.B   R6L,R0L
    186             iic_on();
   \   00000106   5C00FEF6           BSR     iic_on
    187             x = iic_put(address);
   \   0000010A   0C8E               MOV.B   R0L,R6L
   \   0000010C   5C00FF0C           BSR     iic_put
   \   00000110   0CE8               MOV.B   R6L,R0L
    188             iic_off();
   \   00000112   5C00FEF8           BSR     iic_off
    189             return x;
   \   00000116   0C8E               MOV.B   R0L,R6L
    190          }
   \   00000118   6D70               POP.W   R0
   \   0000011A   5470               RTS     
    191          
    192          
    193          void iic_init()
    194          {
   \                     iic_init:
    195             //INTS_OFF;
    196             p2dr = p2dr | (SDA + SCL);             /* make SDA and SCL go high when they become outputs */
   \   0000011C   2E61               MOV.B   @0xFFFFFF61,R6L
   \   0000011E   CEA0               OR.B    #160,R6L
   \   00000120   3E61               MOV.B   R6L,@0xFFFFFF61
    197             p2ddrc |= (SDA | SCL);                 /* make SDA and SCL outputs */
   \   00000122   6A0E....           MOV.B   @p2ddrc:16,R6L
   \   00000126   CEA0               OR.B    #160,R6L
   \   00000128   6A8E....           MOV.B   R6L,@p2ddrc:16
    198             p2ddr = p2ddrc;
   \   0000012C   6A0E....           MOV.B   @p2ddrc:16,R6L
   \   00000130   6A8EFEB1           MOV.B   R6L,@0xFFFFFEB1
    199             //INTS_ON;
    200             iic_on();
   \   00000134   5C00FEC8           BSR     iic_on
    201             iic_off();
   \   00000138   5C00FED2           BSR     iic_off
    202          }
   \   0000013C   5470               RTS     
    203          
    204          
    205          #define EEPROM_ADDRESS 160 /* All address lines low */
    206          
    207          void wait_for_eeprom_to_finish()
    208          {
   \                     wait_for_eeprom_to_finish:
   \   0000013E   6DF0               PUSH.W  R0
    209                  char i = 0;
   \   00000140   1888               SUB.B   R0L,R0L
   \                     ?0031:
    210          
    211                  while (!iic_poll(EEPROM_ADDRESS))  /* Wait while EEPROM busy */
   \   00000142   FEA0               MOV.B   #160,R6L
   \   00000144   55BC               BSR     iic_poll
   \   00000146   0CEE               MOV.B   R6L,R6L
   \   00000148   461A               BNE     ?0030
    212                  {
    213                          wait (5);
   \   0000014A   1AE6               SUB.L   ER6,ER6
   \   0000014C   FE05               MOV.B   #5,R6L
   \   0000014E   5E......           JSR     @wait:24
    214                          if (i++ > 200)
   \   00000152   0C8E               MOV.B   R0L,R6L
   \   00000154   0A08               INC.B   R0L
   \   00000156   AEC8               CMP.B   #200,R6L
   \   00000158   43E8               BLS     ?0031
    215                          {
    216                                  STR("EEPROM not acknowledging!\r\n");
   \   0000015A   7A06....           MOV.L   #?0035,ER6
   \            ....    
   \   00000160   5E......           JSR     @serial_put_string:24
    217                                  break;  
    218                          }
    219                  }
    220          }       
   \                     ?0030:
   \   00000164   6D70               POP.W   R0
   \   00000166   5470               RTS     
    221          
    222          void write_block_to_eeprom(char address, char count , char * data)
    223          {
   \                     write_block_to_eeprom:
   \   00000168   6DF0               PUSH.W  R0
   \   0000016A   0CE0               MOV.B   R6L,R0H
   \   0000016C   0CD8               MOV.B   R5L,R0L
   \                     ?0034:
    224                  /* Send 1 byte at a time till we find out how many the EEPROM can take.!!! */
    225                  for ( ; count; count--)
   \   0000016E   0C88               MOV.B   R0L,R0L
   \   00000170   4732               BEQ     ?0036
    226                  {
    227                          wait_for_eeprom_to_finish();
   \   00000172   55CA               BSR     wait_for_eeprom_to_finish
    228          
    229                          iic_on();
   \   00000174   5C00FE88           BSR     iic_on
    230                          iic_put(EEPROM_ADDRESS);
   \   00000178   FEA0               MOV.B   #160,R6L
   \   0000017A   5C00FE9E           BSR     iic_put
    231                          iic_put(address++);
   \   0000017E   0C0E               MOV.B   R0H,R6L
   \   00000180   0A00               INC.B   R0H
   \   00000182   5C00FE96           BSR     iic_put
    232                          iic_put(*data++);
   \   00000186   01006F75           MOV.L   @(6,SP),ER5
   \            0006    
   \   0000018C   0B75               INC.L   #1,ER5
   \   0000018E   01006FF5           MOV.L   ER5,@(6,SP)
   \            0006    
   \   00000194   1B75               DEC.L   #1,ER5
   \   00000196   685E               MOV.B   @ER5,R6L
   \   00000198   5C00FE80           BSR     iic_put
    233                          iic_off();
   \   0000019C   5C00FE6E           BSR     iic_off
   \   000001A0   88FF               ADD.B   #-1,R0L
    234                  }
    235          
    236          }       
   \   000001A2   40CA               BRA     ?0034
   \                     ?0036:
   \   000001A4   6D70               POP.W   R0
   \   000001A6   5470               RTS     
    237          
    238          
    239          void read_block_from_eeprom(char address, char count , char * data)
    240          {
   \                     read_block_from_eeprom:
   \   000001A8   6DF0               PUSH.W  R0
   \   000001AA   01006DF1           PUSH.L  ER1
   \   000001AE   0CE0               MOV.B   R6L,R0H
   \   000001B0   0CD8               MOV.B   R5L,R0L
   \   000001B2   01006F71           MOV.L   @(10,SP),ER1
   \            000A    
    241                  wait_for_eeprom_to_finish();
   \   000001B8   5584               BSR     wait_for_eeprom_to_finish
    242          
    243                  iic_on();
   \   000001BA   5C00FE42           BSR     iic_on
    244                  iic_put(EEPROM_ADDRESS);
   \   000001BE   FEA0               MOV.B   #160,R6L
   \   000001C0   5C00FE58           BSR     iic_put
    245                  iic_put(address);
   \   000001C4   0C0E               MOV.B   R0H,R6L
   \   000001C6   5C00FE52           BSR     iic_put
    246                  iic_off();
   \   000001CA   5C00FE40           BSR     iic_off
    247          
    248                  iic_on();
   \   000001CE   5C00FE2E           BSR     iic_on
    249                  iic_put(EEPROM_ADDRESS+1);
   \   000001D2   FEA1               MOV.B   #161,R6L
   \   000001D4   5C00FE44           BSR     iic_put
   \                     ?0041:
    250          
    251          
    252                  for ( ; count; count--)
   \   000001D8   0C88               MOV.B   R0L,R0L
   \   000001DA   4710               BEQ     ?0040
    253                  {
    254                          *data++ = iic_get(0);
   \   000001DC   18EE               SUB.B   R6L,R6L
   \   000001DE   5C00FEA0           BSR     iic_get
   \   000001E2   0F95               MOV.L   ER1,ER5
   \   000001E4   0B71               INC.L   #1,ER1
   \   000001E6   68DE               MOV.B   R6L,@ER5
   \   000001E8   88FF               ADD.B   #-1,R0L
   \   000001EA   40EC               BRA     ?0041
   \                     ?0040:
    255                  }
    256          
    257                  iic_get(1);      /* Terminate the transaction and discard dummy byte.[easier to code but less efficient!] */
   \   000001EC   FE01               MOV.B   #1,R6L
   \   000001EE   5C00FE90           BSR     iic_get
    258          
    259                  iic_off();
   \   000001F2   5C00FE18           BSR     iic_off
    260          }       
   \   000001F6   01006D71           POP.L   ER1
   \   000001FA   6D70               POP.W   R0
   \   000001FC   5470               RTS     
    261          
    262          
    263          
   \                     	RSEG	CSTR
   \                     ?0035:
   \                     	DC.B	'EEPROM not acknowledging!'
   \                     	DC.B	13,10,0
   \                     	END

Errors: none
Warnings: none
Code size: 510
Constant size: 28
Static variable size: 0

